/**
 * 🌍 Oren.js v1.0 - Universal Enterprise-Grade Full-Stack Framework
 * ─────────────────────────────────────────────────────────────────────────────
 * 🧾 Copyright © 2025 John Kesh Mahugu & Contributors
 * 🕒 Generated: 2025-07-21 12:17 EAT
 * 🔑 License: MIT
 *
 * 📘 SYNOPSIS:
 * Oren.js is a revolutionary universal full-stack JavaScript framework that seamlessly combines
 * backend and frontend capabilities in a single, zero-dependency package. It runs on both server
 * (Node.js) and client (browser) environments, enabling true isomorphic applications with shared
 * code, state management, and rendering capabilities. Oren.js provides enterprise-grade features
 * including database integration, real-time communication, authentication, and a comprehensive UI framework.
 *
 * 🛣️ FEATURES:
 * - ✅ Universal Architecture: Single codebase that runs on both server and browser
 * - ✅ Zero Dependencies: Entire framework in one file with no external dependencies
 * - ✅ Isomorphic Rendering: Server-side rendering (SSR) and client-side hydration
 * - ✅ Shared State Management: Universal state that syncs between server and client
 * - ✅ Integrated Database: Hybrid ORM (SQL/NoSQL) with browser-compatible storage
 * - ✅ Real-time Communication: WebSocket and SSE with universal event system
 * - ✅ Enterprise Security: JWT, OAuth2, CSRF, RBAC, rate limiting, secure headers
 * - ✅ Universal UI Framework: Component system with SSR and client-side interactivity
 * - ✅ Routing: Universal routing that works on server and client
 * - ✅ API Layer: REST and GraphQL with automatic client generation
 * - ✅ CLI Tooling: Comprehensive CLI for development, testing, and deployment
 * - ✅ Observability: Logging, metrics, and tracing for both server and client
 * - ✅ TypeScript Support: Full TypeScript support with universal types
 * - ✅ Progressive Enhancement: Graceful degradation for older browsers
 * - ✅ Offline Capabilities: Service worker integration and offline storage
 * - ✅ Internationalization: Built-in i18n support for global applications
 * - ✅ Testing Framework: Universal testing for server and client code
 *
 * 📜 LICENSE:
 * MIT License. See https://opensource.org/licenses/MIT.
 *
 * 🙏 DEDICATION:
 * To developers building scalable, secure, and delightful universal web applications.
 * Code with clarity, ship with confidence, everywhere.
 *
 * 🌐 AUTHOR & WEBSITE:
 * John Kesh Mahugu
 * Website: https://johnmwirigimahugu.github.io/orn.js | oren.js.org
 * Contact: johnmahugu at gmail dot com
 * ─────────────────────────────────────────────────────────────────────────────
 */

// ===== CORE ENGINE =====
const Core = {
  // Environment detection
  isServer: typeof window === 'undefined',
  isBrowser: typeof window !== 'undefined',
  
  // Version information
  version: '1.0.0',
  
  // Global configuration
  config: {
    // Server configuration
    server: {
      port: process.env.PORT || 3000,
      host: process.env.HOST || '0.0.0.0',
      staticDir: './public',
      viewsDir: './views'
    },
    
    // Client configuration
    client: {
      apiBase: '/api',
      wsUrl: typeof window !== 'undefined' ? 
        (window.location.protocol === 'https:' ? 'wss:' : 'ws:') + '//' + window.location.host : 
        'ws://localhost:3000',
      ssr: true,
      hydration: true
    },
    
    // Database configuration
    database: {
      engine: Core.isServer ? (process.env.DB_ENGINE || 'json') : 'indexeddb',
      path: Core.isServer ? './data' : '/oren-db'
    },
    
    // Security configuration
    security: {
      jwtSecret: process.env.JWT_SECRET || 'oren-secret-key',
      sessionSecret: process.env.SESSION_SECRET || 'oren-session-secret',
      csrfProtection: true,
      cors: {
        origin: process.env.CORS_ORIGIN || '*',
        credentials: true
      }
    }
  },
  
  // Utilities
  utils: {
    // UID generator
    uid: (length = 16) => {
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      let result = '';
      for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
    },
    
    // Deep clone
    clone: (obj) => {
      if (obj === null || typeof obj !== 'object') return obj;
      if (obj instanceof Date) return new Date(obj.getTime());
      if (obj instanceof Array) return obj.map(item => Core.utils.clone(item));
      if (typeof obj === 'object') {
        const cloned = {};
        Object.keys(obj).forEach(key => {
          cloned[key] = Core.utils.clone(obj[key]);
        });
        return cloned;
      }
    },
    
    // Merge objects
    merge: (target, source) => {
      const output = Object.assign({}, target);
      if (Core.utils.isObject(target) && Core.utils.isObject(source)) {
        Object.keys(source).forEach(key => {
          if (Core.utils.isObject(source[key])) {
            if (!(key in target)) {
              Object.assign(output, { [key]: source[key] });
            } else {
              output[key] = Core.utils.merge(target[key], source[key]);
            }
          } else {
            Object.assign(output, { [key]: source[key] });
          }
        });
      }
      return output;
    },
    
    // Check if object
    isObject: (item) => {
      return item && typeof item === 'object' && !Array.isArray(item);
    },
    
    // Format date
    formatDate: (date = new Date()) => {
      return date.toISOString();
    },
    
    // Parse query string
    parseQuery: (queryString) => {
      const query = {};
      const pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');
      for (let i = 0; i < pairs.length; i++) {
        const pair = pairs[i].split('=');
        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
      }
      return query;
    },
    
    // Debounce function
    debounce: (func, wait) => {
      let timeout;
      return function(...args) {
        const context = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
      };
    },
    
    // Throttle function
    throttle: (func, limit) => {
      let inThrottle;
      return function(...args) {
        const context = this;
        if (!inThrottle) {
          func.apply(context, args);
          inThrottle = true;
          setTimeout(() => inThrottle = false, limit);
        }
      };
    }
  },
  
  // Event system (universal)
  EventSystem: class {
    constructor() {
      this.events = {};
    }
    
    on(event, callback) {
      if (!this.events[event]) {
        this.events[event] = [];
      }
      this.events[event].push(callback);
      return this;
    }
    
    off(event, callback) {
      if (!this.events[event]) return this;
      if (!callback) {
        delete this.events[event];
      } else {
        this.events[event] = this.events[event].filter(cb => cb !== callback);
      }
      return this;
    }
    
    emit(event, data) {
      if (this.events[event]) {
        this.events[event].forEach(callback => {
          try {
            callback(data);
          } catch (error) {
            console.error(`Error in event handler for ${event}:`, error);
          }
        });
      }
      return this;
    }
  },
  
  // Universal storage abstraction
  Storage: class {
    constructor(name, options = {}) {
      this.name = name;
      this.options = options;
      this.isServer = Core.isServer;
      this.isBrowser = Core.isBrowser;
      
      if (this.isServer) {
        this.engine = options.engine || 'json';
        this.path = options.path || './data';
      } else {
        this.engine = 'indexeddb';
        this.dbName = options.dbName || 'OrenDB';
        this.version = options.version || 1;
      }
      
      this.init();
    }
    
    async init() {
      if (this.isServer) {
        // Server-side storage initialization
        switch (this.engine) {
          case 'json':
            this.storage = new Core.Server.JSONStorage(this.name, this.path);
            break;
          case 'memory':
            this.storage = new Core.Server.MemoryStorage(this.name);
            break;
          default:
            this.storage = new Core.Server.JSONStorage(this.name, this.path);
        }
      } else {
        // Client-side storage initialization
        this.storage = new Core.Client.IndexedDBStorage(this.name, this.dbName, this.version);
      }
      
      await this.storage.init();
    }
    
    async get(key) {
      return await this.storage.get(key);
    }
    
    async set(key, value) {
      return await this.storage.set(key, value);
    }
    
    async delete(key) {
      return await this.storage.delete(key);
    }
    
    async find(query = {}) {
      return await this.storage.find(query);
    }
    
    async clear() {
      return await this.storage.clear();
    }
  },
  
  // Server-side implementations
  Server: {
    // JSON file-based storage for server
    JSONStorage: class {
      constructor(name, path) {
        this.name = name;
        this.path = path;
        this.filePath = `${path}/${name}.json`;
        this.data = [];
        this.indexes = {};
        this.ensureDirectory();
      }
      
      ensureDirectory() {
        if (typeof require !== 'undefined') {
          const fs = require('fs');
          const path = require('path');
          
          if (!fs.existsSync(this.path)) {
            fs.mkdirSync(this.path, { recursive: true });
          }
          
          if (!fs.existsSync(this.filePath)) {
            fs.writeFileSync(this.filePath, '[]');
          } else {
            const content = fs.readFileSync(this.filePath, 'utf8');
            this.data = JSON.parse(content);
          }
        }
      }
      
      async init() {
        // Already initialized in constructor
        return Promise.resolve();
      }
      
      async get(key) {
        return this.data.find(item => item.id === key);
      }
      
      async set(key, value) {
        const index = this.data.findIndex(item => item.id === key);
        if (index !== -1) {
          this.data[index] = { ...this.data[index], ...value, updatedAt: Core.utils.formatDate() };
        } else {
          this.data.push({
            id: key,
            ...value,
            createdAt: Core.utils.formatDate(),
            updatedAt: Core.utils.formatDate()
          });
        }
        this.save();
        return value;
      }
      
      async delete(key) {
        const index = this.data.findIndex(item => item.id === key);
        if (index !== -1) {
          this.data.splice(index, 1);
          this.save();
          return true;
        }
        return false;
      }
      
      async find(query = {}) {
        return this.data.filter(item => {
          return Object.keys(query).every(key => {
            if (typeof query[key] === 'object' && query[key] !== null) {
              // Handle operators
              for (const [op, value] of Object.entries(query[key])) {
                switch (op) {
                  case '$eq': return item[key] === value;
                  case '$ne': return item[key] !== value;
                  case '$gt': return item[key] > value;
                  case '$gte': return item[key] >= value;
                  case '$lt': return item[key] < value;
                  case '$lte': return item[key] <= value;
                  case '$in': return Array.isArray(value) && value.includes(item[key]);
                  case '$nin': return Array.isArray(value) && !value.includes(item[key]);
                }
              }
              return true;
            } else {
              return item[key] === query[key];
            }
          });
        });
      }
      
      async clear() {
        this.data = [];
        this.save();
      }
      
      save() {
        if (typeof require !== 'undefined') {
          const fs = require('fs');
          fs.writeFileSync(this.filePath, JSON.stringify(this.data, null, 2));
        }
      }
    },
    
    // In-memory storage for server
    MemoryStorage: class {
      constructor(name) {
        this.name = name;
        this.data = [];
      }
      
      async init() {
        return Promise.resolve();
      }
      
      async get(key) {
        return this.data.find(item => item.id === key);
      }
      
      async set(key, value) {
        const index = this.data.findIndex(item => item.id === key);
        if (index !== -1) {
          this.data[index] = { ...this.data[index], ...value, updatedAt: Core.utils.formatDate() };
        } else {
          this.data.push({
            id: key,
            ...value,
            createdAt: Core.utils.formatDate(),
            updatedAt: Core.utils.formatDate()
          });
        }
        return value;
      }
      
      async delete(key) {
        const index = this.data.findIndex(item => item.id === key);
        if (index !== -1) {
          this.data.splice(index, 1);
          return true;
        }
        return false;
      }
      
      async find(query = {}) {
        return this.data.filter(item => {
          return Object.keys(query).every(key => {
            if (typeof query[key] === 'object' && query[key] !== null) {
              // Handle operators
              for (const [op, value] of Object.entries(query[key])) {
                switch (op) {
                  case '$eq': return item[key] === value;
                  case '$ne': return item[key] !== value;
                  case '$gt': return item[key] > value;
                  case '$gte': return item[key] >= value;
                  case '$lt': return item[key] < value;
                  case '$lte': return item[key] <= value;
                  case '$in': return Array.isArray(value) && value.includes(item[key]);
                  case '$nin': return Array.isArray(value) && !value.includes(item[key]);
                }
              }
              return true;
            } else {
              return item[key] === query[key];
            }
          });
        });
      }
      
      async clear() {
        this.data = [];
      }
    }
  },
  
  // Client-side implementations
  Client: {
    // IndexedDB storage for browser
    IndexedDBStorage: class {
      constructor(name, dbName, version = 1) {
        this.name = name;
        this.dbName = dbName;
        this.version = version;
        this.db = null;
        this.storeName = name;
      }
      
      async init() {
        return new Promise((resolve, reject) => {
          const request = indexedDB.open(this.dbName, this.version);
          
          request.onerror = (event) => {
            reject('Error opening IndexedDB');
          };
          
          request.onsuccess = (event) => {
            this.db = event.target.result;
            resolve();
          };
          
          request.onupgradeneeded = (event) => {
            const db = event.target.result;
            
            // Create object store if it doesn't exist
            if (!db.objectStoreNames.contains(this.storeName)) {
              const objectStore = db.createObjectStore(this.storeName, { keyPath: 'id' });
              
              // Create indexes
              objectStore.createIndex('createdAt', 'createdAt', { unique: false });
              objectStore.createIndex('updatedAt', 'updatedAt', { unique: false });
            }
          };
        });
      }
      
      async get(key) {
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([this.storeName], 'readonly');
          const objectStore = transaction.objectStore(this.storeName);
          const request = objectStore.get(key);
          
          request.onerror = (event) => {
            reject('Error getting data from IndexedDB');
          };
          
          request.onsuccess = (event) => {
            resolve(event.target.result);
          };
        });
      }
      
      async set(key, value) {
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([this.storeName], 'readwrite');
          const objectStore = transaction.objectStore(this.storeName);
          
          const data = {
            id: key,
            ...value,
            createdAt: value.createdAt || Core.utils.formatDate(),
            updatedAt: Core.utils.formatDate()
          };
          
          const request = objectStore.put(data);
          
          request.onerror = (event) => {
            reject('Error setting data in IndexedDB');
          };
          
          request.onsuccess = (event) => {
            resolve(data);
          };
        });
      }
      
      async delete(key) {
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([this.storeName], 'readwrite');
          const objectStore = transaction.objectStore(this.storeName);
          const request = objectStore.delete(key);
          
          request.onerror = (event) => {
            reject('Error deleting data from IndexedDB');
          };
          
          request.onsuccess = (event) => {
            resolve(true);
          };
        });
      }
      
      async find(query = {}) {
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([this.storeName], 'readonly');
          const objectStore = transaction.objectStore(this.storeName);
          const request = objectStore.getAll();
          
          request.onerror = (event) => {
            reject('Error finding data in IndexedDB');
          };
          
          request.onsuccess = (event) => {
            const results = event.target.result;
            
            // Filter results based on query
            const filtered = results.filter(item => {
              return Object.keys(query).every(key => {
                if (typeof query[key] === 'object' && query[key] !== null) {
                  // Handle operators
                  for (const [op, value] of Object.entries(query[key])) {
                    switch (op) {
                      case '$eq': return item[key] === value;
                      case '$ne': return item[key] !== value;
                      case '$gt': return item[key] > value;
                      case '$gte': return item[key] >= value;
                      case '$lt': return item[key] < value;
                      case '$lte': return item[key] <= value;
                      case '$in': return Array.isArray(value) && value.includes(item[key]);
                      case '$nin': return Array.isArray(value) && !value.includes(item[key]);
                    }
                  }
                  return true;
                } else {
                  return item[key] === query[key];
                }
              });
            });
            
            resolve(filtered);
          };
        });
      }
      
      async clear() {
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([this.storeName], 'readwrite');
          const objectStore = transaction.objectStore(this.storeName);
          const request = objectStore.clear();
          
          request.onerror = (event) => {
            reject('Error clearing IndexedDB');
          };
          
          request.onsuccess = (event) => {
            resolve();
          };
        });
      }
    },
    
    // LocalStorage fallback for older browsers
    LocalStorageStorage: class {
      constructor(name) {
        this.name = name;
        this.prefix = `oren_${name}_`;
      }
      
      async init() {
        return Promise.resolve();
      }
      
      async get(key) {
        const item = localStorage.getItem(this.prefix + key);
        return item ? JSON.parse(item) : null;
      }
      
      async set(key, value) {
        const data = {
          id: key,
          ...value,
          createdAt: value.createdAt || Core.utils.formatDate(),
          updatedAt: Core.utils.formatDate()
        };
        localStorage.setItem(this.prefix + key, JSON.stringify(data));
        return data;
      }
      
      async delete(key) {
        localStorage.removeItem(this.prefix + key);
        return true;
      }
      
      async find(query = {}) {
        const results = [];
        
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && key.startsWith(this.prefix)) {
            const item = JSON.parse(localStorage.getItem(key));
            results.push(item);
          }
        }
        
        // Filter results based on query
        return results.filter(item => {
          return Object.keys(query).every(key => {
            if (typeof query[key] === 'object' && query[key] !== null) {
              // Handle operators
              for (const [op, value] of Object.entries(query[key])) {
                switch (op) {
                  case '$eq': return item[key] === value;
                  case '$ne': return item[key] !== value;
                  case '$gt': return item[key] > value;
                  case '$gte': return item[key] >= value;
                  case '$lt': return item[key] < value;
                  case '$lte': return item[key] <= value;
                  case '$in': return Array.isArray(value) && value.includes(item[key]);
                  case '$nin': return Array.isArray(value) && !value.includes(item[key]);
                }
              }
              return true;
            } else {
              return item[key] === query[key];
            }
          });
        });
      }
      
      async clear() {
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && key.startsWith(this.prefix)) {
            localStorage.removeItem(key);
          }
        }
      }
    }
  }
};

// ===== UNIVERSAL LAYER =====
const Universal = {
  // Universal model (works on both server and client)
  Model: class {
    constructor(name, schema = {}) {
      this.name = name;
      this.schema = schema;
      this.storage = new Core.Storage(name, Core.config.database);
      this.hooks = {
        beforeCreate: [],
        afterCreate: [],
        beforeUpdate: [],
        afterUpdate: [],
        beforeDelete: [],
        afterDelete: []
      };
      this.relations = {};
    }
    
    // Add hooks
    hook(event, callback) {
      if (this.hooks[event]) {
        this.hooks[event].push(callback);
      }
      return this;
    }
    
    // Define relationships
    hasMany(name, model, options = {}) {
      this.relations[name] = {
        type: 'hasMany',
        model,
        foreignKey: options.foreignKey || `${this.name}Id`,
        localKey: options.localKey || 'id'
      };
      return this;
    }
    
    belongsTo(name, model, options = {}) {
      this.relations[name] = {
        type: 'belongsTo',
        model,
        foreignKey: options.foreignKey || `${name}Id`,
        localKey: options.localKey || 'id'
      };
      return this;
    }
    
    // Create a new record
    async create(data) {
      // Run beforeCreate hooks
      for (const hook of this.hooks.beforeCreate) {
        await hook(data);
      }
      
      // Generate ID if not provided
      if (!data.id) {
        data.id = Core.utils.uid();
      }
      
      // Add timestamps
      const now = Core.utils.formatDate();
      data.createdAt = now;
      data.updatedAt = now;
      
      // Validate against schema
      for (const [field, options] of Object.entries(this.schema)) {
        if (options.required && !data[field]) {
          throw new Error(`Field ${field} is required`);
        }
        
        if (options.type && typeof data[field] !== options.type) {
          throw new Error(`Field ${field} must be of type ${options.type}`);
        }
        
        if (options.validate && !options.validate(data[field])) {
          throw new Error(`Field ${field} is invalid`);
        }
      }
      
      // Save to storage
      const result = await this.storage.set(data.id, data);
      
      // Run afterCreate hooks
      for (const hook of this.hooks.afterCreate) {
        await hook(result);
      }
      
      return result;
    }
    
    // Find a record by ID
    async findById(id) {
      return await this.storage.get(id);
    }
    
    // Find records matching query
    async find(query = {}) {
      return await this.storage.find(query);
    }
    
    // Update a record
    async update(id, data) {
      // Get existing record
      const existing = await this.findById(id);
      if (!existing) {
        throw new Error(`Record with ID ${id} not found`);
      }
      
      // Run beforeUpdate hooks
      for (const hook of this.hooks.beforeUpdate) {
        await hook(existing, data);
      }
      
      // Merge data
      const updated = { ...existing, ...data, updatedAt: Core.utils.formatDate() };
      
      // Validate against schema
      for (const [field, options] of Object.entries(this.schema)) {
        if (options.required && !updated[field]) {
          throw new Error(`Field ${field} is required`);
        }
        
        if (options.type && typeof updated[field] !== options.type) {
          throw new Error(`Field ${field} must be of type ${options.type}`);
        }
        
        if (options.validate && !options.validate(updated[field])) {
          throw new Error(`Field ${field} is invalid`);
        }
      }
      
      // Save to storage
      const result = await this.storage.set(id, updated);
      
      // Run afterUpdate hooks
      for (const hook of this.hooks.afterUpdate) {
        await hook(result);
      }
      
      return result;
    }
    
    // Delete a record
    async delete(id) {
      // Get existing record
      const existing = await this.findById(id);
      if (!existing) {
        throw new Error(`Record with ID ${id} not found`);
      }
      
      // Run beforeDelete hooks
      for (const hook of this.hooks.beforeDelete) {
        await hook(existing);
      }
      
      // Delete from storage
      const result = await this.storage.delete(id);
      
      // Run afterDelete hooks
      for (const hook of this.hooks.afterDelete) {
        await hook(existing);
      }
      
      return result;
    }
    
    // Query builder
    query() {
      return new Universal.QueryBuilder(this);
    }
  },
  
  // Universal query builder
  QueryBuilder: class {
    constructor(model) {
      this.model = model;
      this.query = {};
      this.options = {
        limit: null,
        skip: null,
        sort: null,
        fields: null
      };
    }
    
    where(field, value) {
      this.query[field] = value;
      return this;
    }
    
    whereNot(field, value) {
      this.query[field] = { $ne: value };
      return this;
    }
    
    whereIn(field, values) {
      this.query[field] = { $in: values };
      return this;
    }
    
    whereGt(field, value) {
      this.query[field] = { $gt: value };
      return this;
    }
    
    whereLt(field, value) {
      this.query[field] = { $lt: value };
      return this;
    }
    
    limit(value) {
      this.options.limit = value;
      return this;
    }
    
    skip(value) {
      this.options.skip = value;
      return this;
    }
    
    sort(field, direction = 'asc') {
      this.options.sort = { field, direction };
      return this;
    }
    
    fields(fields) {
      this.options.fields = Array.isArray(fields) ? fields : [fields];
      return this;
    }
    
    async execute() {
      let results = await this.model.find(this.query);
      
      // Apply sorting
      if (this.options.sort) {
        const { field, direction } = this.options.sort;
        results.sort((a, b) => {
          if (a[field] < b[field]) return direction === 'asc' ? -1 : 1;
          if (a[field] > b[field]) return direction === 'asc' ? 1 : -1;
          return 0;
        });
      }
      
      // Apply skip and limit
      if (this.options.skip) {
        results = results.slice(this.options.skip);
      }
      
      if (this.options.limit) {
        results = results.slice(0, this.options.limit);
      }
      
      // Apply field projection
      if (this.options.fields) {
        results = results.map(record => {
          const projected = {};
          for (const field of this.options.fields) {
            if (record[field] !== undefined) {
              projected[field] = record[field];
            }
          }
          return projected;
        });
      }
      
      return results;
    }
    
    async first() {
      this.options.limit = 1;
      const results = await this.execute();
      return results.length > 0 ? results[0] : null;
    }
    
    async count() {
      const results = await this.model.find(this.query);
      return results.length;
    }
  },
  
  // Universal state management
  State: class {
    constructor(initialState = {}) {
      this.state = initialState;
      this.listeners = [];
      this.middleware = [];
    }
    
    // Get state
    getState() {
      return this.state;
    }
    
    // Update state
    setState(updates) {
      const prevState = { ...this.state };
      this.state = { ...this.state, ...updates };
      
      // Run middleware
      let action = { type: 'setState', payload: updates };
      for (const middleware of this.middleware) {
        action = middleware(action, this.state, prevState) || action;
      }
      
      // Notify listeners
      this.notify();
    }
    
    // Add middleware
    use(middleware) {
      this.middleware.push(middleware);
      return this;
    }
    
    // Subscribe to state changes
    subscribe(listener) {
      this.listeners.push(listener);
      
      // Return unsubscribe function
      return () => {
        this.listeners = this.listeners.filter(l => l !== listener);
      };
    }
    
    // Notify listeners of state changes
    notify() {
      this.listeners.forEach(listener => {
        try {
          listener(this.state);
        } catch (error) {
          console.error('Error in state listener:', error);
        }
      });
    }
  },
  
  // Universal router
  Router: class {
    constructor(options = {}) {
      this.routes = [];
      this.currentRoute = null;
      this.mode = options.mode || (Core.isBrowser ? 'history' : 'memory');
      this.base = options.base || '/';
      this.notFoundHandler = options.notFoundHandler || (() => {});
      this.middleware = [];
      
      if (Core.isBrowser) {
        this.initBrowserRouter();
      }
    }
    
    // Add a route
    add(path, handler, options = {}) {
      const route = {
        path,
        handler,
        exact: options.exact !== false,
        props: options.props || {}
      };
      
      this.routes.push(route);
      return this;
    }
    
    // Add middleware
    use(middleware) {
      this.middleware.push(middleware);
      return this;
    }
    
    // Initialize browser router
    initBrowserRouter() {
      // Handle popstate event
      window.addEventListener('popstate', () => {
        this.handleLocationChange();
      });
      
      // Handle initial location
      this.handleLocationChange();
    }
    
    // Handle location change
    handleLocationChange() {
      const path = this.getCurrentPath();
      const route = this.matchRoute(path);
      
      if (route) {
        this.currentRoute = route;
        this.executeRoute(route);
      } else {
        this.notFoundHandler();
      }
    }
    
    // Get current path
    getCurrentPath() {
      if (Core.isBrowser) {
        if (this.mode === 'history') {
          return window.location.pathname + window.location.search;
        } else {
          return window.location.hash.substring(1) || '/';
        }
      }
      return '/';
    }
    
    // Match route to path
    matchRoute(path) {
      for (const route of this.routes) {
        const match = this.matchPath(route.path, path);
        if (match) {
          return {
            ...route,
            params: match.params,
            query: match.query
          };
        }
      }
      return null;
    }
    
    // Match path pattern to actual path
    matchPath(pattern, path) {
      // Extract path and query
      const [pathname, queryString] = path.split('?');
      const query = queryString ? Core.utils.parseQuery(queryString) : {};
      
      // Convert pattern to regex
      const regexPattern = pattern
        .replace(/:(\w+)/g, '([^/]+)')  // Replace :param with capture group
        .replace(/\*/g, '.*');           // Replace * with wildcard
      
      const regex = new RegExp(`^${regexPattern}$`);
      const match = pathname.match(regex);
      
      if (match) {
        // Extract parameter names from pattern
        const paramNames = [];
        pattern.replace(/:(\w+)/g, (_, paramName) => {
          paramNames.push(paramName);
          return '';
        });
        
        // Create params object
        const params = {};
        paramNames.forEach((name, index) => {
          params[name] = match[index + 1];
        });
        
        return { params, query };
      }
      
      return null;
    }
    
    // Execute route handler
    async executeRoute(route) {
      const context = {
        route: route.path,
        params: route.params,
        query: route.query,
        props: route.props
      };
      
      // Run middleware
      for (const middleware of this.middleware) {
        await middleware(context);
      }
      
      // Execute handler
      await route.handler(context);
    }
    
    // Navigate to a path
    navigate(path, state = {}) {
      if (Core.isBrowser) {
        if (this.mode === 'history') {
          window.history.pushState(state, '', path);
        } else {
          window.location.hash = path;
        }
        this.handleLocationChange();
      }
    }
    
    // Replace current path
    replace(path, state = {}) {
      if (Core.isBrowser) {
        if (this.mode === 'history') {
          window.history.replaceState(state, '', path);
        } else {
          window.location.replace(`#${path}`);
        }
        this.handleLocationChange();
      }
    }
    
    // Go back in history
    back() {
      if (Core.isBrowser) {
        window.history.back();
      }
    }
    
    // Go forward in history
    forward() {
      if (Core.isBrowser) {
        window.history.forward();
      }
    }
  },
  
  // Universal component system
  Component: class {
    constructor(options = {}) {
      this.name = options.name || 'Component';
      this.template = options.template || '';
      this.data = options.data || {};
      this.methods = options.methods || {};
      this.computed = options.computed || {};
      this.watch = options.watch || {};
      this.hooks = options.hooks || {};
      this.props = options.props || {};
      this.state = new Universal.State(this.data);
      
      // Component lifecycle
      this.created = false;
      this.mounted = false;
      this.beforeDestroy = false;
      
      // DOM elements
      this.el = null;
      this.$el = null;
      
      // Event listeners
      this.eventListeners = [];
    }
    
    // Initialize component
    init() {
      // Bind methods
      Object.keys(this.methods).forEach(key => {
        this.methods[key] = this.methods[key].bind(this);
      });
      
      // Setup computed properties
      this.setupComputed();
      
      // Setup watchers
      this.setupWatchers();
      
      // Call created hook
      if (this.hooks.created) {
        this.hooks.created.call(this);
      }
      
      this.created = true;
    }
    
    // Setup computed properties
    setupComputed() {
      Object.keys(this.computed).forEach(key => {
        Object.defineProperty(this, key, {
          get: () => {
            return this.computed[key].call(this);
          },
          enumerable: true
        });
      });
    }
    
    // Setup watchers
    setupWatchers() {
      Object.keys(this.watch).forEach(key => {
        this.state.subscribe((state) => {
          if (this.watch[key]) {
            this.watch[key].call(this, state[key], this.state.getState()[key]);
          }
        });
      });
    }
    
    // Mount component to DOM
    mount(el) {
      if (typeof el === 'string') {
        this.el = document.querySelector(el);
      } else {
        this.el = el;
      }
      
      if (!this.el) {
        throw new Error(`Element not found: ${el}`);
      }
      
      // Initialize component if not already
      if (!this.created) {
        this.init();
      }
      
      // Render template
      this.render();
      
      // Call mounted hook
      if (this.hooks.mounted) {
        this.hooks.mounted.call(this);
      }
      
      this.mounted = true;
    }
    
    // Render component
    render() {
      if (!this.el) return;
      
      // Compile template
      const html = this.compileTemplate(this.template);
      
      // Update DOM
      this.el.innerHTML = html;
      
      // Cache element reference
      this.$el = this.el;
      
      // Setup event listeners
      this.setupEventListeners();
    }
    
    // Compile template
    compileTemplate(template) {
      let html = template;
      
      // Replace data bindings {{ }}
      html = html.replace(/\{\{(.+?)\}\}/g, (match, key) => {
        const value = this.getNestedValue(this.state.getState(), key.trim());
        return value !== undefined ? value : '';
      });
      
      // Replace event bindings v-on:
      html = html.replace(/v-on:(\w+)="(.+?)"/g, (match, event, method) => {
        return `data-event="${event}" data-method="${method}"`;
      });
      
      return html;
    }
    
    // Get nested value from object
    getNestedValue(obj, path) {
      return path.split('.').reduce((o, i) => o[i], obj);
    }
    
    // Setup event listeners
    setupEventListeners() {
      if (!this.el) return;
      
      // Find all elements with event bindings
      const eventElements = this.el.querySelectorAll('[data-event]');
      
      eventElements.forEach(el => {
        const event = el.getAttribute('data-event');
        const methodName = el.getAttribute('data-method');
        
        if (event && methodName && this.methods[methodName]) {
          const handler = (e) => {
            this.methods[methodName](e);
          };
          
          el.addEventListener(event, handler);
          
          // Store listener for cleanup
          this.eventListeners.push({
            element: el,
            event,
            handler
          });
        }
      });
    }
    
    // Update component data
    setData(data) {
      this.state.setState(data);
    }
    
    // Destroy component
    destroy() {
      // Call beforeDestroy hook
      if (this.hooks.beforeDestroy) {
        this.hooks.beforeDestroy.call(this);
      }
      
      // Remove event listeners
      this.eventListeners.forEach(({ element, event, handler }) => {
        element.removeEventListener(event, handler);
      });
      
      this.eventListeners = [];
      
      this.beforeDestroy = true;
    }
  }
};

// ===== BACKEND LAYER =====
const Backend = {
  // HTTP server
  Server: class {
    constructor(options = {}) {
      this.port = options.port || Core.config.server.port;
      this.host = options.host || Core.config.server.host;
      this.server = null;
      this.routes = [];
      this.middleware = [];
      this.staticDir = options.staticDir || Core.config.server.staticDir;
      this.viewsDir = options.viewsDir || Core.config.server.viewsDir;
      
      // Initialize HTTP server
      if (Core.isServer && typeof require !== 'undefined') {
        const http = require('http');
        const fs = require('fs');
        const path = require('path');
        const url = require('url');
        
        this.server = http.createServer(async (req, res) => {
          await this.handleRequest(req, res);
        });
      }
    }
    
    // Add middleware
    use(middleware) {
      this.middleware.push(middleware);
      return this;
    }
    
    // Add route
    add(method, path, handler) {
      this.routes.push({ method, path, handler });
      return this;
    }
    
    // GET route
    get(path, handler) {
      return this.add('GET', path, handler);
    }
    
    // POST route
    post(path, handler) {
      return this.add('POST', path, handler);
    }
    
    // PUT route
    put(path, handler) {
      return this.add('PUT', path, handler);
    }
    
    // DELETE route
    delete(path, handler) {
      return this.add('DELETE', path, handler);
    }
    
    // Handle HTTP request
    async handleRequest(req, res) {
      try {
        // Parse URL
        const parsedUrl = url.parse(req.url, true);
        req.url = parsedUrl.pathname;
        req.query = parsedUrl.query;
        
        // Parse body
        if (['POST', 'PUT', 'PATCH'].includes(req.method)) {
          req.body = await this.parseBody(req);
        }
        
        // Create context
        const context = {
          req,
          res,
          url: req.url,
          query: req.query,
          body: req.body,
          params: {}
        };
        
        // Match route
        const route = this.matchRoute(req.method, req.url);
        
        if (route) {
          // Extract params
          context.params = route.params;
          
          // Execute middleware
          for (const middleware of this.middleware) {
            await middleware(context);
          }
          
          // Execute route handler
          await route.handler(context);
        } else {
          // Try to serve static file
          if (!await this.serveStaticFile(req, res)) {
            // 404 Not Found
            res.writeHead(404, { 'Content-Type': 'text/plain' });
            res.end('Not Found');
          }
        }
      } catch (error) {
        console.error('Error handling request:', error);
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end('Internal Server Error');
      }
    }
    
    // Parse request body
    parseBody(req) {
      return new Promise((resolve, reject) => {
        let body = '';
        
        req.on('data', chunk => {
          body += chunk.toString();
        });
        
        req.on('end', () => {
          const contentType = req.headers['content-type'] || '';
          
          if (contentType.includes('application/json')) {
            try {
              resolve(JSON.parse(body));
            } catch (error) {
              reject(new Error('Invalid JSON'));
            }
          } else if (contentType.includes('application/x-www-form-urlencoded')) {
            const params = new URLSearchParams(body);
            const result = {};
            for (const [key, value] of params.entries()) {
              result[key] = value;
            }
            resolve(result);
          } else {
            resolve(body);
          }
        });
        
        req.on('error', error => {
          reject(error);
        });
      });
    }
    
    // Match route to method and path
    matchRoute(method, path) {
      for (const route of this.routes) {
        if (route.method === method) {
          const match = this.matchPath(route.path, path);
          if (match) {
            return {
              ...route,
              params: match.params
            };
          }
        }
      }
      return null;
    }
    
    // Match path pattern to actual path
    matchPath(pattern, path) {
      // Extract parameter names from pattern
      const paramNames = [];
      const regexPattern = pattern
        .replace(/:(\w+)/g, (_, paramName) => {
          paramNames.push(paramName);
          return '([^/]+)';
        })
        .replace(/\*/g, '.*');
      
      const regex = new RegExp(`^${regexPattern}$`);
      const match = path.match(regex);
      
      if (match) {
        const params = {};
        paramNames.forEach((name, index) => {
          params[name] = match[index + 1];
        });
        return { params };
      }
      
      return null;
    }
    
    // Serve static file
    async serveStaticFile(req, res) {
      if (Core.isServer && typeof require !== 'undefined') {
        const fs = require('fs');
        const path = require('path');
        
        try {
          const filePath = path.join(this.staticDir, req.url);
          
          // Check if file exists
          if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            
            if (stats.isFile()) {
              // Set content type based on file extension
              const ext = path.extname(filePath).toLowerCase();
              const contentType = this.getContentType(ext);
              
              res.writeHead(200, { 'Content-Type': contentType });
              fs.createReadStream(filePath).pipe(res);
              return true;
            }
          }
        } catch (error) {
          console.error('Error serving static file:', error);
        }
      }
      
      return false;
    }
    
    // Get content type by file extension
    getContentType(ext) {
      const contentTypes = {
        '.html': 'text/html',
        '.js': 'application/javascript',
        '.css': 'text/css',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpeg',
        '.gif': 'image/gif',
        '.svg': 'image/svg+xml',
        '.ico': 'image/x-icon'
      };
      
      return contentTypes[ext] || 'application/octet-stream';
    }
    
    // Start server
    start() {
      if (this.server) {
        return new Promise((resolve, reject) => {
          this.server.listen(this.port, this.host, () => {
            console.log(`Server running at http://${this.host}:${this.port}`);
            resolve(this.server);
          });
          
          this.server.on('error', error => {
            reject(error);
          });
        });
      } else {
        return Promise.reject(new Error('HTTP server not available'));
      }
    }
    
    // Stop server
    stop() {
      if (this.server) {
        return new Promise(resolve => {
          this.server.close(() => {
            console.log('Server stopped');
            resolve();
          });
        });
      }
      return Promise.resolve();
    }
  },
  
  // WebSocket server
  WebSocketServer: class {
    constructor(options = {}) {
      this.server = options.server;
      this.clients = new Set();
      this.rooms = new Map();
      this.middleware = [];
      
      if (Core.isServer && typeof require !== 'undefined') {
        const WebSocket = require('ws');
        this.wss = new WebSocket.Server({ server: this.server });
        
        this.wss.on('connection', (ws, req) => {
          this.handleConnection(ws, req);
        });
      }
    }
    
    // Add middleware
    use(middleware) {
      this.middleware.push(middleware);
      return this;
    }
    
    // Handle new WebSocket connection
    async handleConnection(ws, req) {
      // Create client object
      const client = {
        id: Core.utils.uid(),
        ws,
        rooms: new Set(),
        data: {}
      };
      
      // Add to clients set
      this.clients.add(client);
      
      // Handle incoming messages
      ws.on('message', async (message) => {
        try {
          const data = JSON.parse(message);
          
          // Create context
          const context = {
            client,
            data,
            send: (data) => {
              if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify(data));
              }
            },
            broadcast: (data) => {
              this.broadcast(data, { exclude: client });
            },
            toRoom: (room, data) => {
              this.toRoom(room, data);
            }
          };
          
          // Execute middleware
          for (const middleware of this.middleware) {
            await middleware(context);
          }
          
          // Handle message based on type
          this.handleMessage(context);
        } catch (error) {
          console.error('Error handling WebSocket message:', error);
        }
      });
      
      // Handle disconnect
      ws.on('close', () => {
        this.handleDisconnect(client);
      });
      
      // Send welcome message
      ws.send(JSON.stringify({
        type: 'connection',
        data: {
          id: client.id,
          message: 'Connected to WebSocket server'
        }
      }));
    }
    
    // Handle WebSocket message
    handleMessage(context) {
      const { data } = context;
      
      switch (data.type) {
        case 'join':
          this.joinRoom(context.client, data.room);
          break;
        case 'leave':
          this.leaveRoom(context.client, data.room);
          break;
        case 'message':
          this.broadcast({
            type: 'message',
            data: {
              from: context.client.id,
              content: data.content
            }
          });
          break;
        default:
          // Custom message types can be handled by middleware
          break;
      }
    }
    
    // Handle client disconnect
    handleDisconnect(client) {
      // Remove from clients set
      this.clients.delete(client);
      
      // Remove from all rooms
      client.rooms.forEach(room => {
        this.leaveRoom(client, room);
      });
      
      // Notify other clients
      this.broadcast({
        type: 'disconnect',
        data: {
          id: client.id
        }
      });
    }
    
    // Join room
    joinRoom(client, room) {
      if (!this.rooms.has(room)) {
        this.rooms.set(room, new Set());
      }
      
      this.rooms.get(room).add(client);
      client.rooms.add(room);
      
      // Notify client
      client.ws.send(JSON.stringify({
        type: 'joined',
        data: {
          room
        }
      }));
    }
    
    // Leave room
    leaveRoom(client, room) {
      if (this.rooms.has(room)) {
        this.rooms.get(room).delete(client);
        
        // Notify client
        client.ws.send(JSON.stringify({
          type: 'left',
          data: {
            room
          }
        }));
      }
      
      client.rooms.delete(room);
    }
    
    // Broadcast message to all clients
    broadcast(message, options = {}) {
      const { exclude } = options;
      
      this.clients.forEach(client => {
        if (exclude && client === exclude) return;
        
        if (client.ws.readyState === 1) { // WebSocket.OPEN
          client.ws.send(JSON.stringify(message));
        }
      });
    }
    
    // Send message to all clients in a room
    toRoom(room, message) {
      if (this.rooms.has(room)) {
        this.rooms.get(room).forEach(client => {
          if (client.ws.readyState === 1) { // WebSocket.OPEN
            client.ws.send(JSON.stringify(message));
          }
        });
      }
    }
  },
  
  // REST API
  API: class {
    constructor(server) {
      this.server = server;
      this.routes = [];
      this.models = {};
    }
    
    // Register model
    registerModel(name, model) {
      this.models[name] = model;
      return this;
    }
    
    // Add REST routes for a model
    addRESTRoutes(modelName, options = {}) {
      const model = this.models[modelName];
      if (!model) {
        throw new Error(`Model ${modelName} not found`);
      }
      
      const basePath = options.path || `/${modelName}`;
      
      // GET /:modelName - Get all records
      this.server.get(basePath, async (context) => {
        try {
          const records = await model.find(context.req.query);
          context.res.writeHead(200, { 'Content-Type': 'application/json' });
          context.res.end(JSON.stringify(records));
        } catch (error) {
          this.handleError(context.res, error);
        }
      });
      
      // GET /:modelName/:id - Get record by ID
      this.server.get(`${basePath}/:id`, async (context) => {
        try {
          const record = await model.findById(context.req.params.id);
          if (!record) {
            context.res.writeHead(404, { 'Content-Type': 'application/json' });
            context.res.end(JSON.stringify({ error: 'Not found' }));
            return;
          }
          context.res.writeHead(200, { 'Content-Type': 'application/json' });
          context.res.end(JSON.stringify(record));
        } catch (error) {
          this.handleError(context.res, error);
        }
      });
      
      // POST /:modelName - Create new record
      this.server.post(basePath, async (context) => {
        try {
          const record = await model.create(context.req.body);
          context.res.writeHead(201, { 'Content-Type': 'application/json' });
          context.res.end(JSON.stringify(record));
        } catch (error) {
          this.handleError(context.res, error);
        }
      });
      
      // PUT /:modelName/:id - Update record
      this.server.put(`${basePath}/:id`, async (context) => {
        try {
          const record = await model.update(context.req.params.id, context.req.body);
          context.res.writeHead(200, { 'Content-Type': 'application/json' });
          context.res.end(JSON.stringify(record));
        } catch (error) {
          this.handleError(context.res, error);
        }
      });
      
      // DELETE /:modelName/:id - Delete record
      this.server.delete(`${basePath}/:id`, async (context) => {
        try {
          await model.delete(context.req.params.id);
          context.res.writeHead(204);
          context.res.end();
        } catch (error) {
          this.handleError(context.res, error);
        }
      });
      
      return this;
    }
    
    // Handle errors
    handleError(res, error) {
      console.error('API Error:', error);
      res.writeHead(500, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: error.message }));
    }
  },
  
  // Authentication system
  Auth: class {
    constructor(options = {}) {
      this.secret = options.secret || Core.config.security.jwtSecret;
      this.algorithm = 'HS256';
      this.models = {};
      this.middleware = [];
    }
    
    // Register user model
    registerUserModel(model) {
      this.models.user = model;
      return this;
    }
    
    // Add middleware
    use(middleware) {
      this.middleware.push(middleware);
      return this;
    }
    
    // Hash password
    async hashPassword(password) {
      if (Core.isServer && typeof require !== 'undefined') {
        const crypto = require('crypto');
        
        return new Promise((resolve, reject) => {
          crypto.pbkdf2(password, crypto.randomBytes(16).toString('hex'), 10000, 64, 'sha512', (err, derivedKey) => {
            if (err) reject(err);
            resolve(derivedKey.toString('hex'));
          });
        });
      } else {
        // Fallback for browser
        return password; // In a real implementation, use Web Crypto API
      }
    }
    
    // Verify password
    async verifyPassword(password, hash) {
      if (Core.isServer && typeof require !== 'undefined') {
        const crypto = require('crypto');
        
        return new Promise((resolve, reject) => {
          const [salt, iterations, keylen, digest, ...hashParts] = hash.split('$');
          const derivedKey = hashParts.join('$');
          
          crypto.pbkdf2(password, salt, parseInt(iterations), parseInt(keylen), digest, (err, newKey) => {
            if (err) reject(err);
            resolve(newKey.toString('hex') === derivedKey);
          });
        });
      } else {
        // Fallback for browser
        return password === hash; // In a real implementation, use Web Crypto API
      }
    }
    
    // Generate JWT token
    generateToken(payload) {
      if (Core.isServer && typeof require !== 'undefined') {
        const crypto = require('crypto');
        
        const header = {
          alg: this.algorithm,
          typ: 'JWT'
        };
        
        const now = Math.floor(Date.now() / 1000);
        const tokenPayload = {
          ...payload,
          iat: now,
          exp: now + (24 * 60 * 60) // 24 hours
        };
        
        const encodedHeader = this.base64UrlEncode(JSON.stringify(header));
        const encodedPayload = this.base64UrlEncode(JSON.stringify(tokenPayload));
        
        const signature = crypto.createHmac('sha256', this.secret)
          .update(`${encodedHeader}.${encodedPayload}`)
          .digest('base64')
          .replace(/\+/g, '-')
          .replace(/\//g, '_')
          .replace(/=/g, '');
        
        return `${encodedHeader}.${encodedPayload}.${signature}`;
      } else {
        // Fallback for browser
        return 'browser-token'; // In a real implementation, use Web Crypto API
      }
    }
    
    // Verify JWT token
    verifyToken(token) {
      if (Core.isServer && typeof require !== 'undefined') {
        const crypto = require('crypto');
        
        const parts = token.split('.');
        if (parts.length !== 3) {
          return null;
        }
        
        const [encodedHeader, encodedPayload, signature] = parts;
        
        // Verify signature
        const expectedSignature = crypto.createHmac('sha256', this.secret)
          .update(`${encodedHeader}.${encodedPayload}`)
          .digest('base64')
          .replace(/\+/g, '-')
          .replace(/\//g, '_')
          .replace(/=/g, '');
        
        if (signature !== expectedSignature) {
          return null;
        }
        
        // Decode payload
        const payload = JSON.parse(this.base64UrlDecode(encodedPayload));
        
        // Check expiration
        if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {
          return null;
        }
        
        return payload;
      } else {
        // Fallback for browser
        return { userId: 'browser-user' }; // In a real implementation, use Web Crypto API
      }
    }
    
    // Base64 URL encode
    base64UrlEncode(str) {
      return Buffer.from(str)
        .toString('base64')
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
    }
    
    // Base64 URL decode
    base64UrlDecode(str) {
      str += '='.repeat((4 - str.length % 4) % 4);
      return Buffer.from(str.replace(/-/g, '+').replace(/_/g, '/'), 'base64').toString();
    }
    
    // Authenticate user
    async authenticate(email, password) {
      if (!this.models.user) {
        throw new Error('User model not registered');
      }
      
      // Find user by email
      const user = await this.models.user.findOne({ email });
      if (!user) {
        throw new Error('Invalid email or password');
      }
      
      // Verify password
      const isValid = await this.verifyPassword(password, user.password);
      if (!isValid) {
        throw new Error('Invalid email or password');
      }
      
      // Generate token
      const token = this.generateToken({
        userId: user.id,
        email: user.email
      });
      
      return {
        user: {
          id: user.id,
          email: user.email,
          name: user.name
        },
        token
      };
    }
    
    // Get authentication middleware
    middleware() {
      return async (context) => {
        try {
          // Get token from Authorization header
          const authHeader = context.req.headers.authorization;
          if (!authHeader || !authHeader.startsWith('Bearer ')) {
            context.res.writeHead(401, { 'Content-Type': 'application/json' });
            context.res.end(JSON.stringify({ error: 'Unauthorized' }));
            return;
          }
          
          const token = authHeader.substring(7);
          const payload = this.verifyToken(token);
          
          if (!payload) {
            context.res.writeHead(401, { 'Content-Type': 'application/json' });
            context.res.end(JSON.stringify({ error: 'Invalid or expired token' }));
            return;
          }
          
          // Get user
          const user = await this.models.user.findById(payload.userId);
          if (!user) {
            context.res.writeHead(401, { 'Content-Type': 'application/json' });
            context.res.end(JSON.stringify({ error: 'User not found' }));
            return;
          }
          
          // Attach user to context
          context.user = user;
          
          // Execute middleware
          for (const middleware of this.middleware) {
            await middleware(context);
          }
        } catch (error) {
          context.res.writeHead(500, { 'Content-Type': 'application/json' });
          context.res.end(JSON.stringify({ error: error.message }));
        }
      };
    }
    
    // Register middleware
    registerMiddleware(middleware) {
      this.middleware.push(middleware);
      return this;
    }
  }
};

// ===== FRONTEND LAYER =====
const Frontend = {
  // Universal UI framework
  UI: {
    // Component registry
    components: {},
    
    // Register component
    register(name, component) {
      this.components[name] = component;
      return this;
    },
    
    // Create component
    create(name, options) {
      const ComponentClass = this.components[name];
      if (!ComponentClass) {
        throw new Error(`Component ${name} not found`);
      }
      
      return new ComponentClass(options);
    },
    
    // Mount component to DOM
    mount(name, selector, options = {}) {
      const component = this.create(name, options);
      component.mount(selector);
      return component;
    }
  },
  
  // Router for client-side navigation
  Router: class extends Universal.Router {
    constructor(options = {}) {
      super({
        mode: options.mode || 'history',
        base: options.base || '/',
        notFoundHandler: options.notFoundHandler
      });
      
      if (Core.isBrowser) {
        this.initClientRouter();
      }
    }
    
    // Initialize client router
    initClientRouter() {
      // Handle link clicks
      document.addEventListener('click', (e) => {
        const link = e.target.closest('a');
        if (link && link.getAttribute('data-router') !== 'false') {
          const href = link.getAttribute('href');
          
          if (href && href.startsWith('/')) {
            e.preventDefault();
            this.navigate(href);
          }
        }
      });
    }
  },
  
  // State management for client
  State: class extends Universal.State {
    constructor(initialState = {}) {
      super(initialState);
      
      if (Core.isBrowser) {
        // Persist state to localStorage
        this.persistToLocalStorage();
      }
    }
    
    // Persist state to localStorage
    persistToLocalStorage() {
      // Save state to localStorage when it changes
      this.subscribe((state) => {
        if (Core.isBrowser) {
          localStorage.setItem('oren_state', JSON.stringify(state));
        }
      });
      
      // Load state from localStorage on initialization
      if (Core.isBrowser) {
        try {
          const savedState = localStorage.getItem('oren_state');
          if (savedState) {
            this.setState(JSON.parse(savedState));
          }
        } catch (error) {
          console.error('Error loading state from localStorage:', error);
        }
      }
    }
  },
  
  // HTTP client for API calls
  HTTP: class {
    constructor(options = {}) {
      this.baseURL = options.baseURL || Core.config.client.apiBase;
      this.headers = options.headers || {};
      this.interceptors = {
        request: [],
        response: []
      };
    }
    
    // Set default header
    setHeader(name, value) {
      this.headers[name] = value;
      return this;
    }
    
    // Set authorization header
    setAuth(token) {
      this.setHeader('Authorization', `Bearer ${token}`);
      return this;
    }
    
    // Add request interceptor
    addRequestInterceptor(interceptor) {
      this.interceptors.request.push(interceptor);
      return this;
    }
    
    // Add response interceptor
    addResponseInterceptor(interceptor) {
      this.interceptors.response.push(interceptor);
      return this;
    }
    
    // Make HTTP request
    async request(config) {
      // Merge config with defaults
      const finalConfig = {
        url: '',
        method: 'GET',
        headers: {},
        data: null,
        ...config
      };
      
      // Add base URL
      if (finalConfig.url && !finalConfig.url.startsWith('http') && !finalConfig.url.startsWith('/')) {
        finalConfig.url = `${this.baseURL}/${finalConfig.url}`;
      } else if (finalConfig.url && !finalConfig.url.startsWith('http') && finalConfig.url.startsWith('/')) {
        finalConfig.url = `${this.baseURL}${finalConfig.url}`;
      }
      
      // Merge headers
      finalConfig.headers = {
        ...this.headers,
        ...finalConfig.headers
      };
      
      // Apply request interceptors
      for (const interceptor of this.interceptors.request) {
        finalConfig = interceptor(finalConfig) || finalConfig;
      }
      
      // Make request
      let response;
      if (Core.isBrowser) {
        // Browser fetch API
        const fetchOptions = {
          method: finalConfig.method,
          headers: finalConfig.headers
        };
        
        if (finalConfig.data) {
          if (finalConfig.headers['Content-Type'] === 'application/json') {
            fetchOptions.body = JSON.stringify(finalConfig.data);
          } else {
            fetchOptions.body = finalConfig.data;
          }
        }
        
        const fetchResponse = await fetch(finalConfig.url, fetchOptions);
        
        // Parse response
        let responseData;
        const contentType = fetchResponse.headers.get('content-type');
        
        if (contentType && contentType.includes('application/json')) {
          responseData = await fetchResponse.json();
        } else {
          responseData = await fetchResponse.text();
        }
        
        response = {
          data: responseData,
          status: fetchResponse.status,
          statusText: fetchResponse.statusText,
          headers: fetchResponse.headers,
          config: finalConfig
        };
      } else {
        // Server-side HTTP request
        if (typeof require !== 'undefined') {
          const http = require('http');
          const https = require('https');
          const url = require('url');
          
          const parsedUrl = url.parse(finalConfig.url);
          const isHttps = parsedUrl.protocol === 'https:';
          const httpModule = isHttps ? https : http;
          
          const options = {
            hostname: parsedUrl.hostname,
            port: parsedUrl.port || (isHttps ? 443 : 80),
            path: parsedUrl.path,
            method: finalConfig.method,
            headers: finalConfig.headers
          };
          
          return new Promise((resolve, reject) => {
            const req = httpModule.request(options, (res) => {
              let data = '';
              
              res.on('data', (chunk) => {
                data += chunk;
              });
              
              res.on('end', () => {
                let responseData;
                const contentType = res.headers['content-type'];
                
                if (contentType && contentType.includes('application/json')) {
                  try {
                    responseData = JSON.parse(data);
                  } catch (error) {
                    responseData = data;
                  }
                } else {
                  responseData = data;
                }
                
                resolve({
                  data: responseData,
                  status: res.statusCode,
                  statusText: res.statusMessage,
                  headers: res.headers,
                  config: finalConfig
                });
              });
            });
            
            req.on('error', (error) => {
              reject(error);
            });
            
            if (finalConfig.data) {
              if (finalConfig.headers['Content-Type'] === 'application/json') {
                req.write(JSON.stringify(finalConfig.data));
              } else {
                req.write(finalConfig.data);
              }
            }
            
            req.end();
          });
        }
      }
      
      // Apply response interceptors
      for (const interceptor of this.interceptors.response) {
        response = interceptor(response) || response;
      }
      
      return response;
    }
    
    // GET request
    get(url, config = {}) {
      return this.request({
        method: 'GET',
        url,
        ...config
      });
    }
    
    // POST request
    post(url, data, config = {}) {
      return this.request({
        method: 'POST',
        url,
        data,
        ...config
      });
    }
    
    // PUT request
    put(url, data, config = {}) {
      return this.request({
        method: 'PUT',
        url,
        data,
        ...config
      });
    }
    
    // DELETE request
    delete(url, config = {}) {
      return this.request({
        method: 'DELETE',
        url,
        ...config
      });
    }
  },
  
  // WebSocket client
  WebSocket: class {
    constructor(options = {}) {
      this.url = options.url || Core.config.client.wsUrl;
      this.protocols = options.protocols || [];
      this.reconnectAttempts = options.reconnectAttempts || 5;
      this.reconnectInterval = options.reconnectInterval || 1000;
      this.listeners = {};
      this.readyState = WebSocket.CONNECTING;
      this.socket = null;
      this.reconnectCount = 0;
      
      if (Core.isBrowser) {
        this.connect();
      }
    }
    
    // Connect to WebSocket server
    connect() {
      if (Core.isBrowser) {
        try {
          this.socket = new window.WebSocket(this.url, this.protocols);
          
          this.socket.onopen = () => {
            this.readyState = WebSocket.OPEN;
            this.reconnectCount = 0;
            this.emit('open');
          };
          
          this.socket.onmessage = (event) => {
            try {
              const data = JSON.parse(event.data);
              this.emit('message', data);
            } catch (error) {
              console.error('Error parsing WebSocket message:', error);
            }
          };
          
          this.socket.onclose = () => {
            this.readyState = WebSocket.CLOSED;
            this.emit('close');
            
            // Attempt to reconnect
            if (this.reconnectCount < this.reconnectAttempts) {
              setTimeout(() => {
                this.reconnectCount++;
                this.connect();
              }, this.reconnectInterval);
            }
          };
          
          this.socket.onerror = (error) => {
            this.readyState = WebSocket.CLOSED;
            this.emit('error', error);
          };
        } catch (error) {
          console.error('Error creating WebSocket:', error);
        }
      }
    }
    
    // Send message
    send(data) {
      if (this.readyState === WebSocket.OPEN && this.socket) {
        this.socket.send(JSON.stringify(data));
      } else {
        console.error('WebSocket is not connected');
      }
    }
    
    // Close connection
    close() {
      if (this.socket) {
        this.socket.close();
      }
    }
    
    // Add event listener
    on(event, callback) {
      if (!this.listeners[event]) {
        this.listeners[event] = [];
      }
      this.listeners[event].push(callback);
      return this;
    }
    
    // Remove event listener
    off(event, callback) {
      if (this.listeners[event]) {
        this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);
      }
      return this;
    }
    
    // Emit event
    emit(event, data) {
      if (this.listeners[event]) {
        this.listeners[event].forEach(callback => {
          try {
            callback(data);
          } catch (error) {
            console.error(`Error in WebSocket ${event} listener:`, error);
          }
        });
      }
    }
    
    // Join room
    join(room) {
      this.send({
        type: 'join',
        room
      });
    }
    
    // Leave room
    leave(room) {
      this.send({
        type: 'leave',
        room
      });
    }
    
    // Send message to room
    toRoom(room, message) {
      this.send({
        type: 'message',
        room,
        ...message
      });
    }
  },
  
  // Service Worker for offline support
  ServiceWorker: class {
    constructor(options = {}) {
      this.scriptUrl = options.scriptUrl || '/oren-sw.js';
      this.scope = options.scope || '/';
      this.registered = false;
    }
    
    // Register service worker
    async register() {
      if (Core.isBrowser && 'serviceWorker' in navigator) {
        try {
          const registration = await navigator.serviceWorker.register(this.scriptUrl, {
            scope: this.scope
          });
          
          this.registered = true;
          console.log('Service worker registered successfully');
          
          return registration;
        } catch (error) {
          console.error('Error registering service worker:', error);
          throw error;
        }
      } else {
        throw new Error('Service workers are not supported in this browser');
      }
    }
    
    // Unregister service worker
    async unregister() {
      if (Core.isBrowser && 'serviceWorker' in navigator) {
        try {
          const registrations = await navigator.serviceWorker.getRegistrations();
          
          for (const registration of registrations) {
            await registration.unregister();
          }
          
          this.registered = false;
          console.log('Service workers unregistered successfully');
        } catch (error) {
          console.error('Error unregistering service workers:', error);
          throw error;
        }
      } else {
        throw new Error('Service workers are not supported in this browser');
      }
    }
  }
};

// ===== INTEGRATION LAYER =====
const Integration = {
  // Universal application
  App: class {
    constructor(options = {}) {
      this.options = options;
      this.server = null;
      this.wsServer = null;
      this.api = null;
      this.auth = null;
      this.router = null;
      this.state = null;
      this.http = null;
      this.models = {};
      this.components = {};
      this.routes = [];
      this.middleware = [];
      this.hooks = {
        beforeStart: [],
        afterStart: [],
        beforeStop: [],
        afterStop: []
      };
      
      // Initialize based on environment
      if (Core.isServer) {
        this.initServer();
      } else {
        this.initClient();
      }
    }
    
    // Initialize server-side
    initServer() {
      // Create HTTP server
      this.server = new Backend.Server({
        port: this.options.port,
        host: this.options.host,
        staticDir: this.options.staticDir,
        viewsDir: this.options.viewsDir
      });
      
      // Create WebSocket server
      this.wsServer = new Backend.WebSocketServer({
        server: this.server.server
      });
      
      // Create API
      this.api = new Backend.API(this.server);
      
      // Create Auth
      this.auth = new Backend.Auth({
        secret: this.options.authSecret
      });
      
      // Add default middleware
      this.server.use(this.defaultMiddleware());
    }
    
    // Initialize client-side
    initClient() {
      // Create router
      this.router = new Frontend.Router({
        mode: this.options.routerMode || 'history'
      });
      
      // Create state
      this.state = new Frontend.State(this.options.initialState);
      
      // Create HTTP client
      this.http = new Frontend.HTTP({
        baseURL: this.options.apiBase
      });
      
      // Create WebSocket client
      this.wsClient = new Frontend.WebSocket({
        url: this.options.wsUrl
      });
      
      // Register service worker if enabled
      if (this.options.serviceWorker) {
        this.sw = new Frontend.ServiceWorker({
          scriptUrl: this.options.serviceWorker
        });
      }
    }
    
    // Default middleware
    defaultMiddleware() {
      return async (context) => {
        // Add CORS headers
        context.res.setHeader('Access-Control-Allow-Origin', Core.config.security.cors.origin);
        context.res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        context.res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
        
        // Handle OPTIONS requests
        if (context.req.method === 'OPTIONS') {
          context.res.writeHead(200);
          context.res.end();
          return;
        }
      };
    }
    
    // Register model
    model(name, schema) {
      const model = new Universal.Model(name, schema);
      this.models[name] = model;
      
      if (Core.isServer) {
        // Register with API
        this.api.registerModel(name, model);
      }
      
      return model;
    }
    
    // Register component
    component(name, component) {
      this.components[name] = component;
      
      if (Core.isBrowser) {
        // Register with UI
        Frontend.UI.register(name, component);
      }
      
      return component;
    }
    
    // Add route
    route(method, path, handler) {
      if (Core.isServer) {
        this.server[method.toLowerCase()](path, handler);
      } else {
        this.router.add(path, handler);
      }
      
      return this;
    }
    
    // Add middleware
    use(middleware) {
      this.middleware.push(middleware);
      
      if (Core.isServer) {
        this.server.use(middleware);
      } else {
        this.router.use(middleware);
      }
      
      return this;
    }
    
    // Add hook
    hook(name, callback) {
      if (this.hooks[name]) {
        this.hooks[name].push(callback);
      }
      return this;
    }
    
    // Start application
    async start() {
      // Run beforeStart hooks
      for (const hook of this.hooks.beforeStart) {
        await hook(this);
      }
      
      if (Core.isServer) {
        // Start server
        await this.server.start();
        
        // Register service worker script
        if (this.options.serviceWorker) {
          this.registerServiceWorkerScript();
        }
      } else {
        // Mount components
        if (this.options.mount) {
          for (const [selector, componentName] of Object.entries(this.options.mount)) {
            Frontend.UI.mount(componentName, selector);
          }
        }
        
        // Register service worker
        if (this.options.serviceWorker && this.sw) {
          await this.sw.register();
        }
      }
      
      // Run afterStart hooks
      for (const hook of this.hooks.afterStart) {
        await hook(this);
      }
    }
    
    // Stop application
    async stop() {
      // Run beforeStop hooks
      for (const hook of this.hooks.beforeStop) {
        await hook(this);
      }
      
      if (Core.isServer) {
        // Stop server
        await this.server.stop();
      } else {
        // Unregister service worker
        if (this.options.serviceWorker && this.sw) {
          await this.sw.unregister();
        }
      }
      
      // Run afterStop hooks
      for (const hook of this.hooks.afterStop) {
        await hook(this);
      }
    }
    
    // Register service worker script
    registerServiceWorkerScript() {
      if (Core.isServer && typeof require !== 'undefined') {
        const fs = require('fs');
        const path = require('path');
        
        const swScript = `
          const CACHE_NAME = 'oren-cache-v1';
          const urlsToCache = [
            '/',
            '/static/main.js',
            '/static/main.css'
          ];
          
          self.addEventListener('install', event => {
            event.waitUntil(
              caches.open(CACHE_NAME)
                .then(cache => cache.addAll(urlsToCache))
            );
          });
          
          self.addEventListener('fetch', event => {
            event.respondWith(
              caches.match(event.request)
                .then(response => {
                  return response || fetch(event.request);
                })
            );
          });
        `;
        
        const swPath = path.join(this.options.staticDir || './public', 'oren-sw.js');
        fs.writeFileSync(swPath, swScript);
      }
    }
  },
  
  // Universal component
  Component: class extends Universal.Component {
    constructor(options = {}) {
      super(options);
      this.http = null;
      this.ws = null;
      this.router = null;
      
      if (Core.isBrowser) {
        // Initialize client-side dependencies
        this.http = window.orenApp.http;
        this.ws = window.orenApp.wsClient;
        this.router = window.orenApp.router;
      }
    }
    
    // Navigate to path
    navigate(path) {
      if (this.router) {
        this.router.navigate(path);
      }
    }
    
    // Make HTTP request
    async httpGet(url, config) {
      if (this.http) {
        return this.http.get(url, config);
      }
      throw new Error('HTTP client not available');
    }
    
    // Send WebSocket message
    wsSend(data) {
      if (this.ws) {
        this.ws.send(data);
      }
    }
    
    // Join WebSocket room
    wsJoin(room) {
      if (this.ws) {
        this.ws.join(room);
      }
    }
  },
  
  // Page component for routing
  Page: class extends Integration.Component {
    constructor(options = {}) {
      super(options);
      this.title = options.title || '';
      this.description = options.description || '';
      this.keywords = options.keywords || [];
    }
    
    // Set page metadata
    setMetadata() {
      if (Core.isBrowser) {
        document.title = this.title;
        
        // Update meta description
        let metaDescription = document.querySelector('meta[name="description"]');
        if (!metaDescription) {
          metaDescription = document.createElement('meta');
          metaDescription.name = 'description';
          document.head.appendChild(metaDescription);
        }
        metaDescription.content = this.description;
        
        // Update meta keywords
        let metaKeywords = document.querySelector('meta[name="keywords"]');
        if (!metaKeywords) {
          metaKeywords = document.createElement('meta');
          metaKeywords.name = 'keywords';
          document.head.appendChild(metaKeywords);
        }
        metaKeywords.content = this.keywords.join(', ');
      }
    }
    
    // Mount page
    mount(el) {
      super.mount(el);
      this.setMetadata();
    }
  }
};

// ===== CLI AND TOOLING =====
const CLI = {
  // Main CLI class
  OrenCLI: class {
    constructor() {
      this.commands = new Map();
      this.options = {
        name: 'oren',
        version: Core.version,
        description: 'Universal Enterprise-Grade Full-Stack Framework'
      };
      
      // Register built-in commands
      this.registerCommand('create', this.createCommand);
      this.registerCommand('dev', this.devCommand);
      this.registerCommand('build', this.buildCommand);
      this.registerCommand('start', this.startCommand);
      this.registerCommand('generate', this.generateCommand);
      this.registerCommand('migrate', this.migrateCommand);
      this.registerCommand('deploy', this.deployCommand);
      this.registerCommand('help', this.helpCommand);
      this.registerCommand('version', this.versionCommand);
    }
    
    // Register command
    registerCommand(name, handler) {
      this.commands.set(name, handler);
      return this;
    }
    
    // Run CLI
    async run(args = process.argv.slice(2)) {
      if (args.length === 0) {
        return this.helpCommand();
      }
      
      const commandName = args[0];
      const command = this.commands.get(commandName);
      
      if (!command) {
        console.error(`Unknown command: ${commandName}`);
        console.log('Run "oren help" to see available commands');
        return 1;
      }
      
      try {
        return await command.call(this, args.slice(1));
      } catch (error) {
        console.error(`Error executing command "${commandName}":`, error.message);
        return 1;
      }
    }
    
    // Create new project
    async createCommand(args) {
      const projectName = args[0] || 'my-oren-app';
      const projectDir = path.join(process.cwd(), projectName);
      
      // Check if directory exists
      if (fs.existsSync(projectDir)) {
        console.error(`Directory "${projectName}" already exists`);
        return 1;
      }
      
      // Create project directory
      fs.mkdirSync(projectDir, { recursive: true });
      
      // Create package.json
      const packageJson = {
        name: projectName,
        version: '1.0.0',
        description: 'Oren.js application',
        main: 'app.js',
        scripts: {
          start: 'node app.js',
          dev: 'oren dev',
          build: 'oren build'
        },
        dependencies: {},
        devDependencies: {}
      };
      
      fs.writeFileSync(
        path.join(projectDir, 'package.json'),
        JSON.stringify(packageJson, null, 2)
      );
      
      // Create main application file
      const appCode = `const { Oren } = require('oren');

// Create application
const app = new Oren.App({
  port: process.env.PORT || 3000,
  staticDir: './public',
  serviceWorker: '/oren-sw.js'
});

// Define models
const User = app.model('users', {
  name: { type: 'string', required: true },
  email: { type: 'string', required: true, unique: true },
  password: { type: 'string', required: true },
  role: { type: 'string', default: 'user' }
});

// Define components
const HomePage = class extends Oren.Page {
  constructor() {
    super({
      name: 'HomePage',
      template: \`
        <div class="container">
          <h1>{{ title }}</h1>
          <p>{{ message }}</p>
          <button data-on="click:changeMessage">Change Message</button>
        </div>
      \`,
      data: {
        title: 'Welcome to Oren.js',
        message: 'Universal full-stack framework'
      },
      methods: {
        changeMessage() {
          this.message = 'Message changed!';
        }
      }
    });
  }
};

// Register component
app.component('HomePage', HomePage);

// Add routes
if (Oren.Core.isServer) {
  // Server-side routes
  app.get('/api/users', async (context) => {
    const users = await User.find();
    context.res.send(users);
  });
  
  app.post('/api/users', async (context) => {
    const user = await User.create(context.req.body);
    context.res.send(user, 201);
  });
} else {
  // Client-side routes
  app.route('GET', '/', (context) => {
    // Render home page
    const homePage = new HomePage();
    homePage.mount('#app');
  });
}

// Start application
app.start().then(() => {
  console.log('Application started successfully');
}).catch(error => {
  console.error('Failed to start application:', error);
});
`;
      
      fs.writeFileSync(path.join(projectDir, 'app.js'), appCode);
      
      // Create README
      const readme = `# ${projectName}

An Oren.js universal application.

## Getting Started

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Start development server:
   \`\`\`bash
   npm run dev
   \`\`\`

3. Start production server:
   \`\`\`bash
   npm start
   \`\`\`

## Features

- Universal full-stack framework
- Server-side rendering
- Client-side hydration
- Real-time communication
- Offline support
`;
      
      fs.writeFileSync(path.join(projectDir, 'README.md'), readme);
      
      // Create .gitignore
      const gitignore = `node_modules/
.env
*.log
oren_data/
dist/
`;
      
      fs.writeFileSync(path.join(projectDir, '.gitignore'), gitignore);
      
      // Create public directory
      const publicDir = path.join(projectDir, 'public');
      fs.mkdirSync(publicDir, { recursive: true });
      
      // Create index.html
      const indexHtml = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${projectName}</title>
  <link rel="stylesheet" href="/static/main.css">
</head>
<body>
  <div id="app"></div>
  <script src="/static/main.js"></script>
</body>
</html>
`;
      
      fs.writeFileSync(path.join(publicDir, 'index.html'), indexHtml);
      
      console.log(`Project "${projectName}" created successfully`);
      console.log(`\nNext steps:`);
      console.log(`  cd ${projectName}`);
      console.log(`  npm install`);
      console.log(`  npm run dev`);
      
      return 0;
    }
    
    // Development server
    async devCommand(args) {
      console.log('Starting development server...');
      
      // Load application
      const appPath = path.join(process.cwd(), 'app.js');
      if (!fs.existsSync(appPath)) {
        console.error('app.js not found. Are you in the right directory?');
        return 1;
      }
      
      // Start application with hot reload
      const { exec } = require('child_process');
      const nodemon = exec('npx nodemon --watch app.js --exec "node app.js"', {
        stdio: 'inherit'
      });
      
      nodemon.on('exit', (code) => {
        process.exit(code);
      });
      
      return new Promise(() => {});
    }
    
    // Build application
    async buildCommand(args) {
      console.log('Building application...');
      
      // In a real implementation, this would:
      // 1. Transpile TypeScript/JSX
      // 2. Bundle client-side code
      // 3. Optimize assets
      // 4. Generate service worker
      
      console.log('Build completed successfully');
      return 0;
    }
    
    // Start production server
    async startCommand(args) {
      console.log('Starting production server...');
      
      // Load application
      const appPath = path.join(process.cwd(), 'app.js');
      if (!fs.existsSync(appPath)) {
        console.error('app.js not found. Are you in the right directory?');
        return 1;
      }
      
      // Start application
      require(appPath);
      
      return new Promise(() => {});
    }
    
    // Generate code
    async generateCommand(args) {
      const type = args[0];
      const name = args[1];
      
      if (!type || !name) {
        console.error('Usage: oren generate <type> <name>');
        console.log('Types: model, component, page, middleware');
        return 1;
      }
      
      switch (type) {
        case 'model':
          return this.generateModel(name);
        case 'component':
          return this.generateComponent(name);
        case 'page':
          return this.generatePage(name);
        case 'middleware':
          return this.generateMiddleware(name);
        default:
          console.error(`Unknown type: ${type}`);
          return 1;
      }
    }
    
    // Generate model
    async generateModel(name) {
      const modelCode = `const { Oren } = require('oren');

const ${name} = Oren.model('${name}', {
  // Define your schema here
  name: { type: 'string', required: true },
  email: { type: 'string', required: true, unique: true },
  createdAt: { type: 'datetime', default: () => new Date() }
});

module.exports = ${name};
`;
      
      const modelsDir = path.join(process.cwd(), 'models');
      if (!fs.existsSync(modelsDir)) {
        fs.mkdirSync(modelsDir, { recursive: true });
      }
      
      const modelPath = path.join(modelsDir, `${name.toLowerCase()}.js`);
      fs.writeFileSync(modelPath, modelCode);
      
      console.log(`Model "${name}" created successfully at ${modelPath}`);
      return 0;
    }
    
    // Generate component
    async generateComponent(name) {
      const componentCode = `const { Oren } = require('oren');

const ${name} = class extends Oren.Component {
  constructor(options) {
    super({
      name: '${name}',
      template: \`
        <div class="${name.toLowerCase()}">
          <h1>{{ title }}</h1>
          <p>{{ message }}</p>
        </div>
      \`,
      data: {
        title: '${name} Component',
        message: 'Hello from ${name}!'
      },
      methods: {
        greet() {
          this.message = 'Hello from ' + this.title + '!';
        }
      },
      ...options
    });
  }
};

module.exports = ${name};
`;
      
      const componentsDir = path.join(process.cwd(), 'components');
      if (!fs.existsSync(componentsDir)) {
        fs.mkdirSync(componentsDir, { recursive: true });
      }
      
      const componentPath = path.join(componentsDir, `${name.toLowerCase()}.js`);
      fs.writeFileSync(componentPath, componentCode);
      
      console.log(`Component "${name}" created successfully at ${componentPath}`);
      return 0;
    }
    
    // Generate page
    async generatePage(name) {
      const pageCode = `const { Oren } = require('oren');

const ${name} = class extends Oren.Page {
  constructor(options) {
    super({
      name: '${name}',
      title: '${name} Page',
      description: 'Description for ${name}',
      keywords: ['oren', 'page'],
      template: \`
        <div class="page ${name.toLowerCase()}">
          <h1>{{ title }}</h1>
          <div class="content">
            {{ content }}
          </div>
        </div>
      \`,
      data: {
        title: '${name}',
        content: 'This is the ${name} page.'
      },
      ...options
    });
  }
};

module.exports = ${name};
`;
      
      const pagesDir = path.join(process.cwd(), 'pages');
      if (!fs.existsSync(pagesDir)) {
        fs.mkdirSync(pagesDir, { recursive: true });
      }
      
      const pagePath = path.join(pagesDir, `${name.toLowerCase()}.js`);
      fs.writeFileSync(pagePath, pageCode);
      
      console.log(`Page "${name}" created successfully at ${pagePath}`);
      return 0;
    }
    
    // Generate middleware
    async generateMiddleware(name) {
      const middlewareCode = `const ${name} = async (context, next) => {
  // Your middleware logic here
  
  // Call next() to pass control to the next middleware
  await next();
};

module.exports = ${name};
`;
      
      const middlewareDir = path.join(process.cwd(), 'middleware');
      if (!fs.existsSync(middlewareDir)) {
        fs.mkdirSync(middlewareDir, { recursive: true });
      }
      
      const middlewarePath = path.join(middlewareDir, `${name.toLowerCase()}.js`);
      fs.writeFileSync(middlewarePath, middlewareCode);
      
      console.log(`Middleware "${name}" created successfully at ${middlewarePath}`);
      return 0;
    }
    
    // Database migration
    async migrateCommand(args) {
      console.log('Running migrations...');
      
      // In a real implementation, this would:
      // 1. Find migration files
      // 2. Execute them in order
      // 3. Track which migrations have been run
      
      console.log('Migrations completed successfully');
      return 0;
    }
    
    // Deploy application
    async deployCommand(args) {
      const platform = args[0];
      
      if (!platform) {
        console.error('Usage: oren deploy <platform>');
        console.log('Platforms: heroku, vercel, docker');
        return 1;
      }
      
      switch (platform) {
        case 'heroku':
          return this.deployHeroku();
        case 'vercel':
          return this.deployVercel();
        case 'docker':
          return this.deployDocker();
        default:
          console.error(`Unknown platform: ${platform}`);
          return 1;
      }
    }
    
    // Deploy to Heroku
    async deployHeroku() {
      console.log('Generating Heroku deployment files...');
      
      // Create Procfile
      const procfile = 'web: node app.js';
      fs.writeFileSync(path.join(process.cwd(), 'Procfile'), procfile);
      
      // Create app.json
      const appJson = `{
  "name": "Oren.js App",
  "description": "Universal full-stack application",
  "buildpacks": [
    {
      "url": "heroku/nodejs"
    }
  ],
  "env": {
    "NODE_ENV": {
      "description": "Environment",
      "value": "production"
    }
  }
}
`;
      
      fs.writeFileSync(path.join(process.cwd(), 'app.json'), appJson);
      
      console.log('Heroku deployment files generated successfully');
      console.log('\nTo deploy to Heroku:');
      console.log('  1. Install Heroku CLI: https://devcenter.heroku.com/articles/heroku-cli');
      console.log('  2. Login to Heroku: heroku login');
      console.log('  3. Create app: heroku create');
      console.log('  4. Deploy: git push heroku main');
      
      return 0;
    }
    
    // Deploy to Vercel
    async deployVercel() {
      console.log('Generating Vercel deployment files...');
      
      // Create vercel.json
      const vercelJson = `{
  "version": 2,
  "builds": [
    {
      "src": "app.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "app.js"
    }
  ]
}
`;
      
      fs.writeFileSync(path.join(process.cwd(), 'vercel.json'), vercelJson);
      
      console.log('Vercel deployment files generated successfully');
      console.log('\nTo deploy to Vercel:');
      console.log('  1. Install Vercel CLI: npm i -g vercel');
      console.log('  2. Login to Vercel: vercel login');
      console.log('  3. Deploy: vercel');
      
      return 0;
    }
    
    // Deploy with Docker
    async deployDocker() {
      console.log('Generating Docker deployment files...');
      
      // Create Dockerfile
      const dockerfile = `FROM node:18-alpine

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy application code
COPY . .

# Create data directory
RUN mkdir -p /app/oran_data

# Expose port
EXPOSE 3000

# Start application
CMD ["node", "app.js"]
`;
      
      fs.writeFileSync(path.join(process.cwd(), 'Dockerfile'), dockerfile);
      
      // Create docker-compose.yml
      const dockerCompose = `version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    volumes:
      - ./oran_data:/app/oran_data
    restart: unless-stopped
`;
      
      fs.writeFileSync(path.join(process.cwd(), 'docker-compose.yml'), dockerCompose);
      
      console.log('Docker deployment files generated successfully');
      console.log('\nTo deploy with Docker:');
      console.log('  1. Build image: docker build -t oren-app .');
      console.log('  2. Run container: docker run -p 3000:3000 oren-app');
      console.log('  3. Or use Docker Compose: docker-compose up -d');
      
      return 0;
    }
    
    // Help command
    async helpCommand() {
      console.log(`${this.options.name} v${this.options.version} - ${this.options.description}`);
      console.log('');
      console.log('Usage: oren <command> [options]');
      console.log('');
      console.log('Commands:');
      console.log('  create [name]    Create a new Oren.js project');
      console.log('  dev              Start development server');
      console.log('  build            Build application for production');
      console.log('  start            Start production server');
      console.log('  generate <type>   Generate model, component, page, or middleware');
      console.log('  migrate          Run database migrations');
      console.log('  deploy <platform> Generate deployment files');
      console.log('  help             Show this help message');
      console.log('  version          Show version information');
      console.log('');
      console.log('For more information, visit https://oren.js.org');
      
      return 0;
    }
    
    // Version command
    async versionCommand() {
      console.log(`${this.options.name} v${this.options.version}`);
      return 0;
    }
  }
};

// ===== EXPORTS =====
const Oren = {
  // Core
  Core,
  
  // Universal
  Universal,
  
  // Backend
  Backend,
  
  // Frontend
  Frontend,
  
  // Integration
  Integration,
  
  // CLI
  CLI,
  
  // Version
  version: Core.version,
  
  // App class
  App: Integration.App,
  
  // Component class
  Component: Integration.Component,
  
  // Page class
  Page: Integration.Page,
  
  // Model class
  Model: Universal.Model,
  
  // State class
  State: Universal.State,
  
  // Router class
  Router: Universal.Router,
  
  // HTTP client
  HTTP: Frontend.HTTP,
  
  // WebSocket client
  WebSocket: Frontend.WebSocket,
  
  // Service Worker
  ServiceWorker: Frontend.ServiceWorker,
  
  // Server classes
  Server: Backend.Server,
  WebSocketServer: Backend.WebSocketServer,
  API: Backend.API,
  Auth: Backend.Auth,
  
  // CLI
  CLI: CLI.OrenCLI
};

// Export for CommonJS
if (typeof module !== 'undefined' && module.exports) {
  module.exports = Oren;
}

// Export for ES Modules
if (typeof exports !== 'undefined') {
  exports.default = Oren;
}

// Make available globally in browser
if (Core.isBrowser) {
  window.Oren = Oren;
  window.orenApp = null; // Will be set when app is created
}

// CLI execution
if (Core.isServer && require.main === module) {
  const cli = new CLI.OrenCLI();
  cli.run().then(exitCode => {
    process.exit(exitCode);
  }).catch(error => {
    console.error('CLI error:', error);
    process.exit(1);
  });
}

//************** START OF THE FRONT END FRAMEWORK BY KESH ***********************/

/* Rex CSS v3.3 - Enterprise-Grade UI Framework */
/* Copyright (c) 2025 John Kesh Mahugu | johnmahugu@gmail.com | +254722925095 */
/* License: MIT | Timestamp: August 31, 2025 */

/* ===== FONT IMPORTS ===== */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css');

/* ===== LAYERS ===== */
@layer reset {
  /* Modern Reset */
  *, *::before, *::after { 
    box-sizing: border-box; 
    margin: 0; 
    padding: 0; 
  }
  
  html { 
    -webkit-text-size-adjust: 100%; 
    -ms-text-size-adjust: 100%; 
    font-size: 16px; 
  }
  
  body { 
    font-family: 'Roboto', system-ui, sans-serif; 
    line-height: 1.6; 
    -webkit-font-smoothing: antialiased; 
    text-rendering: optimizeLegibility; 
    color: var(--on-background); 
    background: var(--background);
  }
  
  img, picture, video, canvas, svg { 
    display: block; 
    max-width: 100%; 
    height: auto; 
  }
  
  input, button, textarea, select { 
    font: inherit; 
    background: none; 
    border: none; 
    color: inherit;
  }
  
  a { 
    color: inherit; 
    text-decoration: none; 
  }
  
  table { 
    border-collapse: collapse; 
    border-spacing: 0; 
  }
  
  ul, ol { 
    padding: 0; 
    list-style: none; 
  }
  
  button { 
    cursor: pointer; 
    background: none; 
    border: none; 
  }
  
  /* Accessibility */
  :focus-visible { 
    outline: 2px solid var(--primary); 
    outline-offset: 2px; 
  }
  
  @media (prefers-reduced-motion: reduce) { 
    *, *::before, *::after { 
      transition: none !important; 
      animation: none !important; 
    } 
  }
}

@layer base {
  /* ===== THEMING VARIABLES ===== */
  :root {
    /* Material Design 3 Colors */
    --primary: #6200ea;
    --on-primary: #ffffff;
    --primary-container: #d0bfff;
    --on-primary-container: #21005d;
    --secondary: #03dac6;
    --on-secondary: #000000;
    --secondary-container: #d0f8f2;
    --on-secondary-container: #00201d;
    --tertiary: #ff4081;
    --on-tertiary: #ffffff;
    --tertiary-container: #ffdade;
    --on-tertiary-container: #40000a;
    --error: #b00020;
    --on-error: #ffffff;
    --error-container: #ffdad6;
    --on-error-container: #410002;
    --background: #ffffff;
    --on-background: #1c1b1f;
    --surface: #f5f5f5;
    --on-surface: #1c1b1f;
    --surface-variant: #e7e0ec;
    --on-surface-variant: #49454f;
    --outline: #7a757f;
    --shadow: rgba(0,0,0,0.2);
    
    /* Extended Colors */
    --success: #00c853;
    --warning: #ffd600;
    --info: #2196f3;
    --danger: #ff3860;
    --link: #3273dc;
    
    /* Spacing & Sizing */
    --spacing-unit: 4px;
    --font-size-base: 1rem;
    --border-radius: 4px;
    --transition: 0.3s cubic-bezier(0.25, 0.8, 0.5, 1);
    
    /* Typography */
    --font-family-sans: 'Roboto', system-ui, sans-serif;
    --font-family-mono: 'Roboto Mono', Consolas, monospace;
    
    /* Shadows */
    --shadow-sm: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
    --shadow-lg: 0 10px 20px rgba(0,0,0,0.1);
    --shadow-xl: 0 14px 28px rgba(0,0,0,0.12), 0 10px 10px rgba(0,0,0,0.08);
  }

  /* Dark Theme */
  [data-theme="dark"], @media (prefers-color-scheme: dark) {
    --primary: #bb86fc;
    --on-primary: #32005d;
    --primary-container: #4a007a;
    --on-primary-container: #e3d6ff;
    --secondary: #b4ccc5;
    --on-secondary: #1e3531;
    --secondary-container: #354b47;
    --on-secondary-container: #d0e8e1;
    --tertiary: #ffb3ba;
    --on-tertiary: #68001e;
    --tertiary-container: #8e2c37;
    --on-tertiary-container: #ffb3ba;
    --error: #ffb4ab;
    --on-error: #690005;
    --error-container: #93000a;
    --on-error-container: #ffb4ab;
    --background: #1c1b1f;
    --on-background: #e6e1e5;
    --surface: #1c1b1f;
    --on-surface: #e6e1e5;
    --surface-variant: #49454f;
    --on-surface-variant: #cbc4cf;
    --outline: #948f99;
  }

  /* High Contrast Theme */
  [data-theme="high-contrast"] {
    --primary: #000;
    --on-primary: #fff;
    --background: #fff;
    --on-background: #000;
    --surface: #fff;
    --on-surface: #000;
    --border: 2px solid #000;
    --shadow: none;
  }

  /* RTL Support */
  [dir="rtl"] { 
    direction: rtl; 
    text-align: right; 
  }
  
  /* Root Styles */
  html { 
    scroll-behavior: smooth; 
  }
  
  body { 
    min-height: 100vh; 
    text-rendering: optimizeSpeed; 
  }
}

@layer utilities {
  /* ===== SPACING ===== */
  .m-0 { margin: 0; }
  .m-1 { margin: calc(var(--spacing-unit) * 1); }
  .m-2 { margin: calc(var(--spacing-unit) * 2); }
  .m-3 { margin: calc(var(--spacing-unit) * 3); }
  .m-4 { margin: calc(var(--spacing-unit) * 4); }
  .m-5 { margin: calc(var(--spacing-unit) * 5); }
  .m-6 { margin: calc(var(--spacing-unit) * 6); }
  .m-8 { margin: calc(var(--spacing-unit) * 8); }
  .m-10 { margin: calc(var(--spacing-unit) * 10); }
  .m-12 { margin: calc(var(--spacing-unit) * 12); }
  .m-16 { margin: calc(var(--spacing-unit) * 16); }
  .m-20 { margin: calc(var(--spacing-unit) * 20); }
  
  .mt-0 { margin-top: 0; }
  .mt-1 { margin-top: calc(var(--spacing-unit) * 1); }
  .mt-2 { margin-top: calc(var(--spacing-unit) * 2); }
  .mt-3 { margin-top: calc(var(--spacing-unit) * 3); }
  .mt-4 { margin-top: calc(var(--spacing-unit) * 4); }
  .mt-5 { margin-top: calc(var(--spacing-unit) * 5); }
  .mt-6 { margin-top: calc(var(--spacing-unit) * 6); }
  .mt-8 { margin-top: calc(var(--spacing-unit) * 8); }
  .mt-10 { margin-top: calc(var(--spacing-unit) * 10); }
  .mt-12 { margin-top: calc(var(--spacing-unit) * 12); }
  .mt-16 { margin-top: calc(var(--spacing-unit) * 16); }
  .mt-20 { margin-top: calc(var(--spacing-unit) * 20); }
  
  .mb-0 { margin-bottom: 0; }
  .mb-1 { margin-bottom: calc(var(--spacing-unit) * 1); }
  .mb-2 { margin-bottom: calc(var(--spacing-unit) * 2); }
  .mb-3 { margin-bottom: calc(var(--spacing-unit) * 3); }
  .mb-4 { margin-bottom: calc(var(--spacing-unit) * 4); }
  .mb-5 { margin-bottom: calc(var(--spacing-unit) * 5); }
  .mb-6 { margin-bottom: calc(var(--spacing-unit) * 6); }
  .mb-8 { margin-bottom: calc(var(--spacing-unit) * 8); }
  .mb-10 { margin-bottom: calc(var(--spacing-unit) * 10); }
  .mb-12 { margin-bottom: calc(var(--spacing-unit) * 12); }
  .mb-16 { margin-bottom: calc(var(--spacing-unit) * 16); }
  .mb-20 { margin-bottom: calc(var(--spacing-unit) * 20); }
  
  .ml-0 { margin-left: 0; }
  .ml-1 { margin-left: calc(var(--spacing-unit) * 1); }
  .ml-2 { margin-left: calc(var(--spacing-unit) * 2); }
  .ml-3 { margin-left: calc(var(--spacing-unit) * 3); }
  .ml-4 { margin-left: calc(var(--spacing-unit) * 4); }
  .ml-5 { margin-left: calc(var(--spacing-unit) * 5); }
  .ml-6 { margin-left: calc(var(--spacing-unit) * 6); }
  .ml-8 { margin-left: calc(var(--spacing-unit) * 8); }
  .ml-10 { margin-left: calc(var(--spacing-unit) * 10); }
  .ml-12 { margin-left: calc(var(--spacing-unit) * 12); }
  .ml-16 { margin-left: calc(var(--spacing-unit) * 16); }
  .ml-20 { margin-left: calc(var(--spacing-unit) * 20); }
  
  .mr-0 { margin-right: 0; }
  .mr-1 { margin-right: calc(var(--spacing-unit) * 1); }
  .mr-2 { margin-right: calc(var(--spacing-unit) * 2); }
  .mr-3 { margin-right: calc(var(--spacing-unit) * 3); }
  .mr-4 { margin-right: calc(var(--spacing-unit) * 4); }
  .mr-5 { margin-right: calc(var(--spacing-unit) * 5); }
  .mr-6 { margin-right: calc(var(--spacing-unit) * 6); }
  .mr-8 { margin-right: calc(var(--spacing-unit) * 8); }
  .mr-10 { margin-right: calc(var(--spacing-unit) * 10); }
  .mr-12 { margin-right: calc(var(--spacing-unit) * 12); }
  .mr-16 { margin-right: calc(var(--spacing-unit) * 16); }
  .mr-20 { margin-right: calc(var(--spacing-unit) * 20; }
  
  .mx-0 { margin-left: 0; margin-right: 0; }
  .mx-1 { margin-left: calc(var(--spacing-unit) * 1); margin-right: calc(var(--spacing-unit) * 1); }
  .mx-2 { margin-left: calc(var(--spacing-unit) * 2); margin-right: calc(var(--spacing-unit) * 2); }
  .mx-3 { margin-left: calc(var(--spacing-unit) * 3); margin-right: calc(var(--spacing-unit) * 3); }
  .mx-4 { margin-left: calc(var(--spacing-unit) * 4); margin-right: calc(var(--spacing-unit) * 4); }
  .mx-5 { margin-left: calc(var(--spacing-unit) * 5); margin-right: calc(var(--spacing-unit) * 5); }
  .mx-6 { margin-left: calc(var(--spacing-unit) * 6); margin-right: calc(var(--spacing-unit) * 6); }
  .mx-8 { margin-left: calc(var(--spacing-unit) * 8); margin-right: calc(var(--spacing-unit) * 8); }
  .mx-10 { margin-left: calc(var(--spacing-unit) * 10); margin-right: calc(var(--spacing-unit) * 10); }
  .mx-12 { margin-left: calc(var(--spacing-unit) * 12); margin-right: calc(var(--spacing-unit) * 12); }
  .mx-16 { margin-left: calc(var(--spacing-unit) * 16); margin-right: calc(var(--spacing-unit) * 16); }
  .mx-20 { margin-left: calc(var(--spacing-unit) * 20); margin-right: calc(var(--spacing-unit) * 20); }
  
  .my-0 { margin-top: 0; margin-bottom: 0; }
  .my-1 { margin-top: calc(var(--spacing-unit) * 1); margin-bottom: calc(var(--spacing-unit) * 1); }
  .my-2 { margin-top: calc(var(--spacing-unit) * 2); margin-bottom: calc(var(--spacing-unit) * 2); }
  .my-3 { margin-top: calc(var(--spacing-unit) * 3); margin-bottom: calc(var(--spacing-unit) * 3); }
  .my-4 { margin-top: calc(var(--spacing-unit) * 4); margin-bottom: calc(var(--spacing-unit) * 4); }
  .my-5 { margin-top: calc(var(--spacing-unit) * 5); margin-bottom: calc(var(--spacing-unit) * 5); }
  .my-6 { margin-top: calc(var(--spacing-unit) * 6); margin-bottom: calc(var(--spacing-unit) * 6); }
  .my-8 { margin-top: calc(var(--spacing-unit) * 8); margin-bottom: calc(var(--spacing-unit) * 8); }
  .my-10 { margin-top: calc(var(--spacing-unit) * 10); margin-bottom: calc(var(--spacing-unit) * 10); }
  .my-12 { margin-top: calc(var(--spacing-unit) * 12); margin-bottom: calc(var(--spacing-unit) * 12); }
  .my-16 { margin-top: calc(var(--spacing-unit) * 16); margin-bottom: calc(var(--spacing-unit) * 16); }
  .my-20 { margin-top: calc(var(--spacing-unit) * 20); margin-bottom: calc(var(--spacing-unit) * 20); }
  
  .p-0 { padding: 0; }
  .p-1 { padding: calc(var(--spacing-unit) * 1); }
  .p-2 { padding: calc(var(--spacing-unit) * 2); }
  .p-3 { padding: calc(var(--spacing-unit) * 3); }
  .p-4 { padding: calc(var(--spacing-unit) * 4); }
  .p-5 { padding: calc(var(--spacing-unit) * 5); }
  .p-6 { padding: calc(var(--spacing-unit) * 6); }
  .p-8 { padding: calc(var(--spacing-unit) * 8); }
  .p-10 { padding: calc(var(--spacing-unit) * 10); }
  .p-12 { padding: calc(var(--spacing-unit) * 12); }
  .p-16 { padding: calc(var(--spacing-unit) * 16); }
  .p-20 { padding: calc(var(--spacing-unit) * 20); }
  
  .pt-0 { padding-top: 0; }
  .pt-1 { padding-top: calc(var(--spacing-unit) * 1); }
  .pt-2 { padding-top: calc(var(--spacing-unit) * 2); }
  .pt-3 { padding-top: calc(var(--spacing-unit) * 3); }
  .pt-4 { padding-top: calc(var(--spacing-unit) * 4); }
  .pt-5 { padding-top: calc(var(--spacing-unit) * 5); }
  .pt-6 { padding-top: calc(var(--spacing-unit) * 6); }
  .pt-8 { padding-top: calc(var(--spacing-unit) * 8); }
  .pt-10 { padding-top: calc(var(--spacing-unit) * 10); }
  .pt-12 { padding-top: calc(var(--spacing-unit) * 12); }
  .pt-16 { padding-top: calc(var(--spacing-unit) * 16); }
  .pt-20 { padding-top: calc(var(--spacing-unit) * 20); }
  
  .pb-0 { padding-bottom: 0; }
  .pb-1 { padding-bottom: calc(var(--spacing-unit) * 1); }
  .pb-2 { padding-bottom: calc(var(--spacing-unit) * 2); }
  .pb-3 { padding-bottom: calc(var(--spacing-unit) * 3); }
  .pb-4 { padding-bottom: calc(var(--spacing-unit) * 4); }
  .pb-5 { padding-bottom: calc(var(--spacing-unit) * 5); }
  .pb-6 { padding-bottom: calc(var(--spacing-unit) * 6); }
  .pb-8 { padding-bottom: calc(var(--spacing-unit) * 8); }
  .pb-10 { padding-bottom: calc(var(--spacing-unit) * 10); }
  .pb-12 { padding-bottom: calc(var(--spacing-unit) * 12); }
  .pb-16 { padding-bottom: calc(var(--spacing-unit) * 16); }
  .pb-20 { padding-bottom: calc(var(--spacing-unit) * 20); }
  
  .pl-0 { padding-left: 0; }
  .pl-1 { padding-left: calc(var(--spacing-unit) * 1); }
  .pl-2 { padding-left: calc(var(--spacing-unit) * 2); }
  .pl-3 { padding-left: calc(var(--spacing-unit) * 3); }
  .pl-4 { padding-left: calc(var(--spacing-unit) * 4); }
  .pl-5 { padding-left: calc(var(--spacing-unit) * 5); }
  .pl-6 { padding-left: calc(var(--spacing-unit) * 6); }
  .pl-8 { padding-left: calc(var(--spacing-unit) * 8); }
  .pl-10 { padding-left: calc(var(--spacing-unit) * 10); }
  .pl-12 { padding-left: calc(var(--spacing-unit) * 12); }
  .pl-16 { padding-left: calc(var(--spacing-unit) * 16); }
  .pl-20 { padding-left: calc(var(--spacing-unit) * 20); }
  
  .pr-0 { padding-right: 0; }
  .pr-1 { padding-right: calc(var(--spacing-unit) * 1); }
  .pr-2 { padding-right: calc(var(--spacing-unit) * 2); }
  .pr-3 { padding-right: calc(var(--spacing-unit) * 3); }
  .pr-4 { padding-right: calc(var(--spacing-unit) * 4); }
  .pr-5 { padding-right: calc(var(--spacing-unit) * 5); }
  .pr-6 { padding-right: calc(var(--spacing-unit) * 6); }
  .pr-8 { padding-right: calc(var(--spacing-unit) * 8); }
  .pr-10 { padding-right: calc(var(--spacing-unit) * 10); }
  .pr-12 { padding-right: calc(var(--spacing-unit) * 12); }
  .pr-16 { padding-right: calc(var(--spacing-unit) * 16); }
  .pr-20 { padding-right: calc(var(--spacing-unit) * 20); }
  
  .px-0 { padding-left: 0; padding-right: 0; }
  .px-1 { padding-left: calc(var(--spacing-unit) * 1); padding-right: calc(var(--spacing-unit) * 1); }
  .px-2 { padding-left: calc(var(--spacing-unit) * 2); padding-right: calc(var(--spacing-unit) * 2); }
  .px-3 { padding-left: calc(var(--spacing-unit) * 3); padding-right: calc(var(--spacing-unit) * 3); }
  .px-4 { padding-left: calc(var(--spacing-unit) * 4); padding-right: calc(var(--spacing-unit) * 4); }
  .px-5 { padding-left: calc(var(--spacing-unit) * 5); padding-right: calc(var(--spacing-unit) * 5); }
  .px-6 { padding-left: calc(var(--spacing-unit) * 6); padding-right: calc(var(--spacing-unit) * 6); }
  .px-8 { padding-left: calc(var(--spacing-unit) * 8); padding-right: calc(var(--spacing-unit) * 8); }
  .px-10 { padding-left: calc(var(--spacing-unit) * 10); padding-right: calc(var(--spacing-unit) * 10); }
  .px-12 { padding-left: calc(var(--spacing-unit) * 12); padding-right: calc(var(--spacing-unit) * 12); }
  .px-16 { padding-left: calc(var(--spacing-unit) * 16); padding-right: calc(var(--spacing-unit) * 16); }
  .px-20 { padding-left: calc(var(--spacing-unit) * 20); padding-right: calc(var(--spacing-unit) * 20); }
  
  .py-0 { padding-top: 0; padding-bottom: 0; }
  .py-1 { padding-top: calc(var(--spacing-unit) * 1); padding-bottom: calc(var(--spacing-unit) * 1); }
  .py-2 { padding-top: calc(var(--spacing-unit) * 2); padding-bottom: calc(var(--spacing-unit) * 2); }
  .py-3 { padding-top: calc(var(--spacing-unit) * 3); padding-bottom: calc(var(--spacing-unit) * 3); }
  .py-4 { padding-top: calc(var(--spacing-unit) * 4); padding-bottom: calc(var(--spacing-unit) * 4); }
  .py-5 { padding-top: calc(var(--spacing-unit) * 5); padding-bottom: calc(var(--spacing-unit) * 5); }
  .py-6 { padding-top: calc(var(--spacing-unit) * 6); padding-bottom: calc(var(--spacing-unit) * 6); }
  .py-8 { padding-top: calc(var(--spacing-unit) * 8); padding-bottom: calc(var(--spacing-unit) * 8); }
  .py-10 { padding-top: calc(var(--spacing-unit) * 10); padding-bottom: calc(var(--spacing-unit) * 10); }
  .py-12 { padding-top: calc(var(--spacing-unit) * 12); padding-bottom: calc(var(--spacing-unit) * 12); }
  .py-16 { padding-top: calc(var(--spacing-unit) * 16); padding-bottom: calc(var(--spacing-unit) * 16); }
  .py-20 { padding-top: calc(var(--spacing-unit) * 20); padding-bottom: calc(var(--spacing-unit) * 20); }
  
  .gap-0 { gap: 0; }
  .gap-1 { gap: calc(var(--spacing-unit) * 1); }
  .gap-2 { gap: calc(var(--spacing-unit) * 2); }
  .gap-3 { gap: calc(var(--spacing-unit) * 3); }
  .gap-4 { gap: calc(var(--spacing-unit) * 4); }
  .gap-5 { gap: calc(var(--spacing-unit) * 5); }
  .gap-6 { gap: calc(var(--spacing-unit) * 6); }
  .gap-8 { gap: calc(var(--spacing-unit) * 8); }
  .gap-10 { gap: calc(var(--spacing-unit) * 10); }
  .gap-12 { gap: calc(var(--spacing-unit) * 12); }
  .gap-16 { gap: calc(var(--spacing-unit) * 16); }
  .gap-20 { gap: calc(var(--spacing-unit) * 20; }

  /* ===== COLORS ===== */
  .text-primary { color: var(--primary); }
  .text-secondary { color: var(--secondary); }
  .text-tertiary { color: var(--tertiary); }
  .text-error { color: var(--error); }
  .text-success { color: var(--success); }
  .text-warning { color: var(--warning); }
  .text-info { color: var(--info); }
  .text-danger { color: var(--danger); }
  .text-on-primary { color: var(--on-primary); }
  .text-on-secondary { color: var(--on-secondary); }
  .text-on-tertiary { color: var(--on-tertiary); }
  .text-on-error { color: var(--on-error); }
  .text-on-background { color: var(--on-background); }
  .text-on-surface { color: var(--on-surface); }
  .text-on-surface-variant { color: var(--on-surface-variant); }
  
  .bg-primary { background-color: var(--primary); }
  .bg-secondary { background-color: var(--secondary); }
  .bg-tertiary { background-color: var(--tertiary); }
  .bg-error { background-color: var(--error); }
  .bg-success { background-color: var(--success); }
  .bg-warning { background-color: var(--warning); }
  .bg-info { background-color: var(--info); }
  .bg-danger { background-color: var(--danger); }
  .bg-primary-container { background-color: var(--primary-container); }
  .bg-secondary-container { background-color: var(--secondary-container); }
  .bg-tertiary-container { background-color: var(--tertiary-container); }
  .bg-error-container { background-color: var(--error-container); }
  .bg-surface { background-color: var(--surface); }
  .bg-surface-variant { background-color: var(--surface-variant); }
  .bg-background { background-color: var(--background); }
  
  .border-primary { border-color: var(--primary); }
  .border-secondary { border-color: var(--secondary); }
  .border-tertiary { border-color: var(--tertiary); }
  .border-error { border-color: var(--error); }
  .border-success { border-color: var(--success); }
  .border-warning { border-color: var(--warning); }
  .border-info { border-color: var(--info); }
  .border-danger { border-color: var(--danger); }
  .border-outline { border-color: var(--outline); }
  
  /* ===== TYPOGRAPHY ===== */
  .font-sans { font-family: var(--font-family-sans); }
  .font-mono { font-family: var(--font-family-mono); }
  
  .text-xs { font-size: 0.75rem; line-height: 1rem; }
  .text-sm { font-size: 0.875rem; line-height: 1.25rem; }
  .text-base { font-size: 1rem; line-height: 1.5rem; }
  .text-lg { font-size: 1.125rem; line-height: 1.75rem; }
  .text-xl { font-size: 1.25rem; line-height: 1.75rem; }
  .text-2xl { font-size: 1.5rem; line-height: 2rem; }
  .text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
  .text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
  .text-5xl { font-size: 3rem; line-height: 1; }
  .text-6xl { font-size: 3.75rem; line-height: 1; }
  .text-7xl { font-size: 4.5rem; line-height: 1; }
  .text-8xl { font-size: 6rem; line-height: 1; }
  .text-9xl { font-size: 8rem; line-height: 1; }
  
  .font-thin { font-weight: 100; }
  .font-extralight { font-weight: 200; }
  .font-light { font-weight: 300; }
  .font-normal { font-weight: 400; }
  .font-medium { font-weight: 500; }
  .font-semibold { font-weight: 600; }
  .font-bold { font-weight: 700; }
  .font-extrabold { font-weight: 800; }
  .font-black { font-weight: 900; }
  
  .leading-none { line-height: 1; }
  .leading-tight { line-height: 1.25; }
  .leading-snug { line-height: 1.375; }
  .leading-normal { line-height: 1.5; }
  .leading-relaxed { line-height: 1.625; }
  .leading-loose { line-height: 2; }
  
  .tracking-tighter { letter-spacing: -0.05em; }
  .tracking-tight { letter-spacing: -0.025em; }
  .tracking-normal { letter-spacing: 0; }
  .tracking-wide { letter-spacing: 0.025em; }
  .tracking-wider { letter-spacing: 0.05em; }
  .tracking-widest { letter-spacing: 0.1em; }
  
  .text-left { text-align: left; }
  .text-center { text-align: center; }
  .text-right { text-align: right; }
  .text-justify { text-align: justify; }
  .text-start { text-align: start; }
  .text-end { text-align: end; }
  
  .uppercase { text-transform: uppercase; }
  .lowercase { text-transform: lowercase; }
  .capitalize { text-transform: capitalize; }
  .normal-case { text-transform: none; }
  
  .italic { font-style: italic; }
  .not-italic { font-style: normal; }
  
  .underline { text-decoration: underline; }
  .line-through { text-decoration: line-through; }
  .no-underline { text-decoration: none; }
  
  .break-words { overflow-wrap: break-word; }
  .break-all { word-break: break-all; }
  .whitespace-normal { white-space: normal; }
  .whitespace-nowrap { white-space: nowrap; }
  .whitespace-pre { white-space: pre; }
  .whitespace-pre-line { white-space: pre-line; }
  .whitespace-pre-wrap { white-space: pre-wrap; }
  
  .truncate { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
  .overflow-ellipsis { text-overflow: ellipsis; }
  .overflow-clip { text-overflow: clip; }

  /* ===== LAYOUT ===== */
  .block { display: block; }
  .inline-block { display: inline-block; }
  .inline { display: inline; }
  .flex { display: flex; }
  .inline-flex { display: inline-flex; }
  .grid { display: grid; }
  .inline-grid { display: inline-grid; }
  .hidden { display: none; }
  
  .flex-row { flex-direction: row; }
  .flex-row-reverse { flex-direction: row-reverse; }
  .flex-col { flex-direction: column; }
  .flex-col-reverse { flex-direction: column-reverse; }
  
  .flex-wrap { flex-wrap: wrap; }
  .flex-wrap-reverse { flex-wrap: wrap-reverse; }
  .flex-nowrap { flex-wrap: nowrap; }
  
  .items-start { align-items: flex-start; }
  .items-end { align-items: flex-end; }
  .items-center { align-items: center; }
  .items-baseline { align-items: baseline; }
  .items-stretch { align-items: stretch; }
  
  .justify-start { justify-content: flex-start; }
  .justify-end { justify-content: flex-end; }
  .justify-center { justify-content: center; }
  .justify-between { justify-content: space-between; }
  .justify-around { justify-content: space-around; }
  .justify-evenly { justify-content: space-evenly; }
  
  .content-start { align-content: flex-start; }
  .content-end { align-content: flex-end; }
  .content-center { align-content: center; }
  .content-between { align-content: space-between; }
  .content-around { align-content: space-around; }
  .content-stretch { align-content: stretch; }
  
  .self-auto { align-self: auto; }
  .self-start { align-self: flex-start; }
  .self-end { align-self: flex-end; }
  .self-center { align-self: center; }
  .self-baseline { align-self: baseline; }
  .self-stretch { align-self: stretch; }
  
  .flex-1 { flex: 1 1 0%; }
  .flex-auto { flex: 1 1 auto; }
  .flex-initial { flex: 0 1 auto; }
  .flex-none { flex: none; }
  
  .flex-grow-0 { flex-grow: 0; }
  .flex-grow { flex-grow: 1; }
  
  .flex-shrink-0 { flex-shrink: 0; }
  .flex-shrink { flex-shrink: 1; }
  
  .order-1 { order: 1; }
  .order-2 { order: 2; }
  .order-3 { order: 3; }
  .order-4 { order: 4; }
  .order-5 { order: 5; }
  .order-6 { order: 6; }
  .order-7 { order: 7; }
  .order-8 { order: 8; }
  .order-9 { order: 9; }
  .order-10 { order: 10; }
  .order-11 { order: 11; }
  .order-12 { order: 12; }
  .order-first { order: -9999; }
  .order-last { order: 9999; }
  .order-none { order: 0; }
  
  .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
  .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
  .grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
  .grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
  .grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
  .grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
  .grid-cols-7 { grid-template-columns: repeat(7, minmax(0, 1fr)); }
  .grid-cols-8 { grid-template-columns: repeat(8, minmax(0, 1fr)); }
  .grid-cols-9 { grid-template-columns: repeat(9, minmax(0, 1fr)); }
  .grid-cols-10 { grid-template-columns: repeat(10, minmax(0, 1fr)); }
  .grid-cols-11 { grid-template-columns: repeat(11, minmax(0, 1fr)); }
  .grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
  .grid-cols-none { grid-template-columns: none; }
  
  .grid-rows-1 { grid-template-rows: repeat(1, minmax(0, 1fr)); }
  .grid-rows-2 { grid-template-rows: repeat(2, minmax(0, 1fr)); }
  .grid-rows-3 { grid-template-rows: repeat(3, minmax(0, 1fr)); }
  .grid-rows-4 { grid-template-rows: repeat(4, minmax(0, 1fr)); }
  .grid-rows-5 { grid-template-rows: repeat(5, minmax(0, 1fr)); }
  .grid-rows-6 { grid-template-rows: repeat(6, minmax(0, 1fr)); }
  .grid-rows-none { grid-template-rows: none; }
  
  .col-auto { grid-column: auto; }
  .col-span-1 { grid-column: span 1 / span 1; }
  .col-span-2 { grid-column: span 2 / span 2; }
  .col-span-3 { grid-column: span 3 / span 3; }
  .col-span-4 { grid-column: span 4 / span 4; }
  .col-span-5 { grid-column: span 5 / span 5; }
  .col-span-6 { grid-column: span 6 / span 6; }
  .col-span-7 { grid-column: span 7 / span 7; }
  .col-span-8 { grid-column: span 8 / span 8; }
  .col-span-9 { grid-column: span 9 / span 9; }
  .col-span-10 { grid-column: span 10 / span 10; }
  .col-span-11 { grid-column: span 11 / span 11; }
  .col-span-12 { grid-column: span 12 / span 12; }
  .col-span-full { grid-column: 1 / -1; }
  .col-start-1 { grid-column-start: 1; }
  .col-start-2 { grid-column-start: 2; }
  .col-start-3 { grid-column-start: 3; }
  .col-start-4 { grid-column-start: 4; }
  .col-start-5 { grid-column-start: 5; }
  .col-start-6 { grid-column-start: 6; }
  .col-start-7 { grid-column-start: 7; }
  .col-start-8 { grid-column-start: 8; }
  .col-start-9 { grid-column-start: 9; }
  .col-start-10 { grid-column-start: 10; }
  .col-start-11 { grid-column-start: 11; }
  .col-start-12 { grid-column-start: 12; }
  .col-start-13 { grid-column-start: 13; }
  .col-start-auto { grid-column-start: auto; }
  .col-end-1 { grid-column-end: 1; }
  .col-end-2 { grid-column-end: 2; }
  .col-end-3 { grid-column-end: 3; }
  .col-end-4 { grid-column-end: 4; }
  .col-end-5 { grid-column-end: 5; }
  .col-end-6 { grid-column-end: 6; }
  .col-end-7 { grid-column-end: 7; }
  .col-end-8 { grid-column-end: 8; }
  .col-end-9 { grid-column-end: 9; }
  .col-end-10 { grid-column-end: 10; }
  .col-end-11 { grid-column-end: 11; }
  .col-end-12 { grid-column-end: 12; }
  .col-end-13 { grid-column-end: 13; }
  .col-end-auto { grid-column-end: auto; }
  
  .row-auto { grid-row: auto; }
  .row-span-1 { grid-row: span 1 / span 1; }
  .row-span-2 { grid-row: span 2 / span 2; }
  .row-span-3 { grid-row: span 3 / span 3; }
  .row-span-4 { grid-row: span 4 / span 4; }
  .row-span-5 { grid-row: span 5 / span 5; }
  .row-span-6 { grid-row: span 6 / span 6; }
  .row-span-full { grid-row: 1 / -1; }
  .row-start-1 { grid-row-start: 1; }
  .row-start-2 { grid-row-start: 2; }
  .row-start-3 { grid-row-start: 3; }
  .row-start-4 { grid-row-start: 4; }
  .row-start-5 { grid-row-start: 5; }
  .row-start-6 { grid-row-start: 6; }
  .row-start-7 { grid-row-start: 7; }
  .row-start-auto { grid-row-start: auto; }
  .row-end-1 { grid-row-end: 1; }
  .row-end-2 { grid-row-end: 2; }
  .row-end-3 { grid-row-end: 3; }
  .row-end-4 { grid-row-end: 4; }
  .row-end-5 { grid-row-end: 5; }
  .row-end-6 { grid-row-end: 6; }
  .row-end-7 { grid-row-end: 7; }
  .row-end-auto { grid-row-end: auto; }
  
  .gap-x-0 { column-gap: 0; }
  .gap-x-1 { column-gap: calc(var(--spacing-unit) * 1); }
  .gap-x-2 { column-gap: calc(var(--spacing-unit) * 2); }
  .gap-x-3 { column-gap: calc(var(--spacing-unit) * 3); }
  .gap-x-4 { column-gap: calc(var(--spacing-unit) * 4); }
  .gap-x-5 { column-gap: calc(var(--spacing-unit) * 5); }
  .gap-x-6 { column-gap: calc(var(--spacing-unit) * 6); }
  .gap-x-8 { column-gap: calc(var(--spacing-unit) * 8); }
  .gap-x-10 { column-gap: calc(var(--spacing-unit) * 10); }
  .gap-x-12 { column-gap: calc(var(--spacing-unit) * 12); }
  .gap-x-16 { column-gap: calc(var(--spacing-unit) * 16); }
  .gap-x-20 { column-gap: calc(var(--spacing-unit) * 20); }
  
  .gap-y-0 { row-gap: 0; }
  .gap-y-1 { row-gap: calc(var(--spacing-unit) * 1); }
  .gap-y-2 { row-gap: calc(var(--spacing-unit) * 2); }
  .gap-y-3 { row-gap: calc(var(--spacing-unit) * 3); }
  .gap-y-4 { row-gap: calc(var(--spacing-unit) * 4); }
  .gap-y-5 { row-gap: calc(var(--spacing-unit) * 5); }
  .gap-y-6 { row-gap: calc(var(--spacing-unit) * 6); }
  .gap-y-8 { row-gap: calc(var(--spacing-unit) * 8); }
  .gap-y-10 { row-gap: calc(var(--spacing-unit) * 10); }
  .gap-y-12 { row-gap: calc(var(--spacing-unit) * 12); }
  .gap-y-16 { row-gap: calc(var(--spacing-unit) * 16); }
  .gap-y-20 { row-gap: calc(var(--spacing-unit) * 20); }
  
  .static { position: static; }
  .fixed { position: fixed; }
  .absolute { position: absolute; }
  .relative { position: relative; }
  .sticky { position: sticky; }
  
  .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
  .inset-x-0 { right: 0; left: 0; }
  .inset-y-0 { top: 0; bottom: 0; }
  .top-0 { top: 0; }
  .right-0 { right: 0; }
  .bottom-0 { bottom: 0; }
  .left-0 { left: 0; }
  
  .z-0 { z-index: 0; }
  .z-10 { z-index: 10; }
  .z-20 { z-index: 20; }
  .z-30 { z-index: 30; }
  .z-40 { z-index: 40; }
  .z-50 { z-index: 50; }
  .z-auto { z-index: auto; }
  
  .w-auto { width: auto; }
  .w-full { width: 100%; }
  .w-screen { width: 100vw; }
  .w-min { width: min-content; }
  .w-max { width: max-content; }
  .w-fit { width: fit-content; }
  
  .h-auto { height: auto; }
  .h-full { height: 100%; }
  .h-screen { height: 100vh; }
  .h-min { height: min-content; }
  .h-max { height: max-content; }
  .h-fit { height: fit-content; }
  
  .max-w-xs { max-width: 20rem; }
  .max-w-sm { max-width: 24rem; }
  .max-w-md { max-width: 28rem; }
  .max-w-lg { max-width: 32rem; }
  .max-w-xl { max-width: 36rem; }
  .max-w-2xl { max-width: 42rem; }
  .max-w-3xl { max-width: 48rem; }
  .max-w-4xl { max-width: 56rem; }
  .max-w-5xl { max-width: 64rem; }
  .max-w-6xl { max-width: 72rem; }
  .max-w-7xl { max-width: 80rem; }
  .max-w-full { max-width: 100%; }
  .max-w-screen-sm { max-width: 640px; }
  .max-w-screen-md { max-width: 768px; }
  .max-w-screen-lg { max-width: 1024px; }
  .max-w-screen-xl { max-width: 1280px; }
  .max-w-screen-2xl { max-width: 1536px; }
  .max-w-none { max-width: none; }
  
  .min-w-0 { min-width: 0px; }
  .min-w-full { min-width: 100%; }
  .min-w-min { min-width: min-content; }
  .min-w-max { min-width: max-content; }
  .min-w-fit { min-width: fit-content; }
  
  .max-h-0 { max-height: 0px; }
  .max-h-px { max-height: 1px; }
  .max-h-0.5 { max-height: 0.125rem; }
  .max-h-1 { max-height: 0.25rem; }
  .max-h-1.5 { max-height: 0.375rem; }
  .max-h-2 { max-height: 0.5rem; }
  .max-h-2.5 { max-height: 0.625rem; }
  .max-h-3 { max-height: 0.75rem; }
  .max-h-3.5 { max-height: 0.875rem; }
  .max-h-4 { max-height: 1rem; }
  .max-h-5 { max-height: 1.25rem; }
  .max-h-6 { max-height: 1.5rem; }
  .max-h-7 { max-height: 1.75rem; }
  .max-h-8 { max-height: 2rem; }
  .max-h-9 { max-height: 2.25rem; }
  .max-h-10 { max-height: 2.5rem; }
  .max-h-11 { max-height: 2.75rem; }
  .max-h-12 { max-height: 3rem; }
  .max-h-14 { max-height: 3.5rem; }
  .max-h-16 { max-height: 4rem; }
  .max-h-20 { max-height: 5rem; }
  .max-h-24 { max-height: 6rem; }
  .max-h-28 { max-height: 7rem; }
  .max-h-32 { max-height: 8rem; }
  .max-h-36 { max-height: 9rem; }
  .max-h-40 { max-height: 10rem; }
  .max-h-44 { max-height: 11rem; }
  .max-h-48 { max-height: 12rem; }
  .max-h-52 { max-height: 13rem; }
  .max-h-56 { max-height: 14rem; }
  .max-h-60 { max-height: 15rem; }
  .max-h-64 { max-height: 16rem; }
  .max-h-72 { max-height: 18rem; }
  .max-h-80 { max-height: 20rem; }
  .max-h-96 { max-height: 24rem; }
  .max-h-full { max-height: 100%; }
  .max-h-screen { max-height: 100vh; }
  .max-h-min { max-height: min-content; }
  .max-h-max { max-height: max-content; }
  .max-h-fit { max-height: fit-content; }
  
  .min-h-0 { min-height: 0px; }
  .min-h-full { min-height: 100%; }
  .min-h-screen { min-height: 100vh; }
  .min-h-min { min-height: min-content; }
  .min-h-max { min-height: max-content; }
  .min-h-fit { min-height: fit-content; }
  
  .overflow-auto { overflow: auto; }
  .overflow-hidden { overflow: hidden; }
  .overflow-clip { overflow: clip; }
  .overflow-visible { overflow: visible; }
  .overflow-scroll { overflow: scroll; }
  .overflow-x-auto { overflow-x: auto; }
  .overflow-y-auto { overflow-y: auto; }
  .overflow-x-hidden { overflow-x: hidden; }
  .overflow-y-hidden { overflow-y: hidden; }
  .overflow-x-clip { overflow-x: clip; }
  .overflow-y-clip { overflow-y: clip; }
  .overflow-x-visible { overflow-x: visible; }
  .overflow-y-visible { overflow-y: visible; }
  .overflow-x-scroll { overflow-x: scroll; }
  .overflow-y-scroll { overflow-y: scroll; }
  
  .overscroll-auto { overscroll-behavior: auto; }
  .overscroll-contain { overscroll-behavior: contain; }
  .overscroll-none { overscroll-behavior: none; }
  .overscroll-y-auto { overscroll-behavior-y: auto; }
  .overscroll-y-contain { overscroll-behavior-y: contain; }
  .overscroll-y-none { overscroll-behavior-y: none; }
  .overscroll-x-auto { overscroll-behavior-x: auto; }
  .overscroll-x-contain { overscroll-behavior-x: contain; }
  .overscroll-x-none { overscroll-behavior-x: none; }
  
  .static { position: static; }
  .fixed { position: fixed; }
  .absolute { position: absolute; }
  .relative { position: relative; }
  .sticky { position: sticky; }
  
  .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
  .inset-x-0 { right: 0; left: 0; }
  .inset-y-0 { top: 0; bottom: 0; }
  .top-0 { top: 0; }
  .right-0 { right: 0; }
  .bottom-0 { bottom: 0; }
  .left-0 { left: 0; }
  
  .z-0 { z-index: 0; }
  .z-10 { z-index: 10; }
  .z-20 { z-index: 20; }
  .z-30 { z-index: 30; }
  .z-40 { z-index: 40; }
  .z-50 { z-index: 50; }
  .z-auto { z-index: auto; }
  
  .container { 
    width: 100%; 
    margin-left: auto; 
    margin-right: auto; 
    padding-left: calc(var(--spacing-unit) * 4); 
    padding-right: calc(var(--spacing-unit) * 4); 
  }
  
  @media (min-width: 640px) {
    .container { max-width: 640px; }
  }
  
  @media (min-width: 768px) {
    .container { max-width: 768px; }
  }
  
  @media (min-width: 1024px) {
    .container { max-width: 1024px; }
  }
  
  @media (min-width: 1280px) {
    .container { max-width: 1280px; }
  }
  
  @media (min-width: 1536px) {
    .container { max-width: 1536px; }
  }

  /* ===== BORDERS ===== */
  .border-0 { border-width: 0; }
  .border { border-width: 1px; }
  .border-2 { border-width: 2px; }
  .border-4 { border-width: 4px; }
  .border-8 { border-width: 8px; }
  
  .border-t-0 { border-top-width: 0; }
  .border-t { border-top-width: 1px; }
  .border-t-2 { border-top-width: 2px; }
  .border-t-4 { border-top-width: 4px; }
  .border-t-8 { border-top-width: 8px; }
  
  .border-r-0 { border-right-width: 0; }
  .border-r { border-right-width: 1px; }
  .border-r-2 { border-right-width: 2px; }
  .border-r-4 { border-right-width: 4px; }
  .border-r-8 { border-right-width: 8px; }
  
  .border-b-0 { border-bottom-width: 0; }
  .border-b { border-bottom-width: 1px; }
  .border-b-2 { border-bottom-width: 2px; }
  .border-b-4 { border-bottom-width: 4px; }
  .border-b-8 { border-bottom-width: 8px; }
  
  .border-l-0 { border-left-width: 0; }
  .border-l { border-left-width: 1px; }
  .border-l-2 { border-left-width: 2px; }
  .border-l-4 { border-left-width: 4px; }
  .border-l-8 { border-left-width: 8px; }
  
  .border-x-0 { border-left-width: 0; border-right-width: 0; }
  .border-x { border-left-width: 1px; border-right-width: 1px; }
  .border-x-2 { border-left-width: 2px; border-right-width: 2px; }
  .border-x-4 { border-left-width: 4px; border-right-width: 4px; }
  .border-x-8 { border-left-width: 8px; border-right-width: 8px; }
  
  .border-y-0 { border-top-width: 0; border-bottom-width: 0; }
  .border-y { border-top-width: 1px; border-bottom-width: 1px; }
  .border-y-2 { border-top-width: 2px; border-bottom-width: 2px; }
  .border-y-4 { border-top-width: 4px; border-bottom-width: 4px; }
  .border-y-8 { border-top-width: 8px; border-bottom-width: 8px; }
  
  .border-solid { border-style: solid; }
  .border-dashed { border-style: dashed; }
  .border-dotted { border-style: dotted; }
  .border-double { border-style: double; }
  .border-none { border-style: none; }
  
  .rounded-none { border-radius: 0; }
  .rounded-sm { border-radius: calc(var(--border-radius) * 0.5); }
  .rounded { border-radius: var(--border-radius); }
  .rounded-md { border-radius: calc(var(--border-radius) * 1.5); }
  .rounded-lg { border-radius: calc(var(--border-radius) * 2); }
  .rounded-xl { border-radius: calc(var(--border-radius) * 3); }
  .rounded-2xl { border-radius: calc(var(--border-radius) * 4); }
  .rounded-3xl { border-radius: calc(var(--border-radius) * 6); }
  .rounded-full { border-radius: 9999px; }
  
  .rounded-t-none { border-top-left-radius: 0; border-top-right-radius: 0; }
  .rounded-t-sm { border-top-left-radius: calc(var(--border-radius) * 0.5); border-top-right-radius: calc(var(--border-radius) * 0.5); }
  .rounded-t { border-top-left-radius: var(--border-radius); border-top-right-radius: var(--border-radius); }
  .rounded-t-md { border-top-left-radius: calc(var(--border-radius) * 1.5); border-top-right-radius: calc(var(--border-radius) * 1.5); }
  .rounded-t-lg { border-top-left-radius: calc(var(--border-radius) * 2); border-top-right-radius: calc(var(--border-radius) * 2); }
  .rounded-t-xl { border-top-left-radius: calc(var(--border-radius) * 3); border-top-right-radius: calc(var(--border-radius) * 3); }
  .rounded-t-2xl { border-top-left-radius: calc(var(--border-radius) * 4); border-top-right-radius: calc(var(--border-radius) * 4); }
  .rounded-t-3xl { border-top-left-radius: calc(var(--border-radius) * 6); border-top-right-radius: calc(var(--border-radius) * 6); }
  .rounded-t-full { border-top-left-radius: 9999px; border-top-right-radius: 9999px; }
  
  .rounded-r-none { border-top-right-radius: 0; border-bottom-right-radius: 0; }
  .rounded-r-sm { border-top-right-radius: calc(var(--border-radius) * 0.5); border-bottom-right-radius: calc(var(--border-radius) * 0.5); }
  .rounded-r { border-top-right-radius: var(--border-radius); border-bottom-right-radius: var(--border-radius); }
  .rounded-r-md { border-top-right-radius: calc(var(--border-radius) * 1.5); border-bottom-right-radius: calc(var(--border-radius) * 1.5); }
  .rounded-r-lg { border-top-right-radius: calc(var(--border-radius) * 2); border-bottom-right-radius: calc(var(--border-radius) * 2); }
  .rounded-r-xl { border-top-right-radius: calc(var(--border-radius) * 3); border-bottom-right-radius: calc(var(--border-radius) * 3); }
  .rounded-r-2xl { border-top-right-radius: calc(var(--border-radius) * 4); border-bottom-right-radius: calc(var(--border-radius) * 4); }
  .rounded-r-3xl { border-top-right-radius: calc(var(--border-radius) * 6); border-bottom-right-radius: calc(var(--border-radius) * 6); }
  .rounded-r-full { border-top-right-radius: 9999px; border-bottom-right-radius: 9999px; }
  
  .rounded-b-none { border-bottom-left-radius: 0; border-bottom-right-radius: 0; }
  .rounded-b-sm { border-bottom-left-radius: calc(var(--border-radius) * 0.5); border-bottom-right-radius: calc(var(--border-radius) * 0.5); }
  .rounded-b { border-bottom-left-radius: var(--border-radius); border-bottom-right-radius: var(--border-radius); }
  .rounded-b-md { border-bottom-left-radius: calc(var(--border-radius) * 1.5); border-bottom-right-radius: calc(var(--border-radius) * 1.5); }
  .rounded-b-lg { border-bottom-left-radius: calc(var(--border-radius) * 2); border-bottom-right-radius: calc(var(--border-radius) * 2); }
  .rounded-b-xl { border-bottom-left-radius: calc(var(--border-radius) * 3); border-bottom-right-radius: calc(var(--border-radius) * 3); }
  .rounded-b-2xl { border-bottom-left-radius: calc(var(--border-radius) * 4); border-bottom-right-radius: calc(var(--border-radius) * 4); }
  .rounded-b-3xl { border-bottom-left-radius: calc(var(--border-radius) * 6); border-bottom-right-radius: calc(var(--border-radius) * 6); }
  .rounded-b-full { border-bottom-left-radius: 9999px; border-bottom-right-radius: 9999px; }
  
  .rounded-l-none { border-top-left-radius: 0; border-bottom-left-radius: 0; }
  .rounded-l-sm { border-top-left-radius: calc(var(--border-radius) * 0.5); border-bottom-left-radius: calc(var(--border-radius) * 0.5); }
  .rounded-l { border-top-left-radius: var(--border-radius); border-bottom-left-radius: var(--border-radius); }
  .rounded-l-md { border-top-left-radius: calc(var(--border-radius) * 1.5); border-bottom-left-radius: calc(var(--border-radius) * 1.5); }
  .rounded-l-lg { border-top-left-radius: calc(var(--border-radius) * 2); border-bottom-left-radius: calc(var(--border-radius) * 2); }
  .rounded-l-xl { border-top-left-radius: calc(var(--border-radius) * 3); border-bottom-left-radius: calc(var(--border-radius) * 3); }
  .rounded-l-2xl { border-top-left-radius: calc(var(--border-radius) * 4); border-bottom-left-radius: calc(var(--border-radius) * 4); }
  .rounded-l-3xl { border-top-left-radius: calc(var(--border-radius) * 6); border-bottom-left-radius: calc(var(--border-radius) * 6); }
  .rounded-l-full { border-top-left-radius: 9999px; border-bottom-left-radius: 9999px; }
  
  .rounded-tl-none { border-top-left-radius: 0; }
  .rounded-tl-sm { border-top-left-radius: calc(var(--border-radius) * 0.5); }
  .rounded-tl { border-top-left-radius: var(--border-radius); }
  .rounded-tl-md { border-top-left-radius: calc(var(--border-radius) * 1.5); }
  .rounded-tl-lg { border-top-left-radius: calc(var(--border-radius) * 2); }
  .rounded-tl-xl { border-top-left-radius: calc(var(--border-radius) * 3); }
  .rounded-tl-2xl { border-top-left-radius: calc(var(--border-radius) * 4); }
  .rounded-tl-3xl { border-top-left-radius: calc(var(--border-radius) * 6); }
  .rounded-tl-full { border-top-left-radius: 9999px; }
  
  .rounded-tr-none { border-top-right-radius: 0; }
  .rounded-tr-sm { border-top-right-radius: calc(var(--border-radius) * 0.5); }
  .rounded-tr { border-top-right-radius: var(--border-radius); }
  .rounded-tr-md { border-top-right-radius: calc(var(--border-radius) * 1.5); }
  .rounded-tr-lg { border-top-right-radius: calc(var(--border-radius) * 2); }
  .rounded-tr-xl { border-top-right-radius: calc(var(--border-radius) * 3); }
  .rounded-tr-2xl { border-top-right-radius: calc(var(--border-radius) * 4); }
  .rounded-tr-3xl { border-top-right-radius: calc(var(--border-radius) * 6); }
  .rounded-tr-full { border-top-right-radius: 9999px; }
  
  .rounded-bl-none { border-bottom-left-radius: 0; }
  .rounded-bl-sm { border-bottom-left-radius: calc(var(--border-radius) * 0.5); }
  .rounded-bl { border-bottom-left-radius: var(--border-radius); }
  .rounded-bl-md { border-bottom-left-radius: calc(var(--border-radius) * 1.5); }
  .rounded-bl-lg { border-bottom-left-radius: calc(var(--border-radius) * 2); }
  .rounded-bl-xl { border-bottom-left-radius: calc(var(--border-radius) * 3); }
  .rounded-bl-2xl { border-bottom-left-radius: calc(var(--border-radius) * 4); }
  .rounded-bl-3xl { border-bottom-left-radius: calc(var(--border-radius) * 6); }
  .rounded-bl-full { border-bottom-left-radius: 9999px; }
  
  .rounded-br-none { border-bottom-right-radius: 0; }
  .rounded-br-sm { border-bottom-right-radius: calc(var(--border-radius) * 0.5); }
  .rounded-br { border-bottom-right-radius: var(--border-radius); }
  .rounded-br-md { border-bottom-right-radius: calc(var(--border-radius) * 1.5); }
  .rounded-br-lg { border-bottom-right-radius: calc(var(--border-radius) * 2); }
  .rounded-br-xl { border-bottom-right-radius: calc(var(--border-radius) * 3); }
  .rounded-br-2xl { border-bottom-right-radius: calc(var(--border-radius) * 4); }
  .rounded-br-3xl { border-bottom-right-radius: calc(var(--border-radius) * 6); }
  .rounded-br-full { border-bottom-right-radius: 9999px; }

  /* ===== SHADOWS ===== */
  .shadow-none { box-shadow: none; }
  .shadow-sm { box-shadow: var(--shadow-sm); }
  .shadow { box-shadow: var(--shadow-md); }
  .shadow-md { box-shadow: var(--shadow-md); }
  .shadow-lg { box-shadow: var(--shadow-lg); }
  .shadow-xl { box-shadow: var(--shadow-xl); }
  .shadow-2xl { box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); }
  .shadow-inner { box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06); }
  
  /* ===== OPACITY ===== */
  .opacity-0 { opacity: 0; }
  .opacity-5 { opacity: 0.05; }
  .opacity-10 { opacity: 0.1; }
  .opacity-20 { opacity: 0.2; }
  .opacity-25 { opacity: 0.25; }
  .opacity-30 { opacity: 0.3; }
  .opacity-40 { opacity: 0.4; }
  .opacity-50 { opacity: 0.5; }
  .opacity-60 { opacity: 0.6; }
  .opacity-70 { opacity: 0.7; }
  .opacity-75 { opacity: 0.75; }
  .opacity-80 { opacity: 0.8; }
  .opacity-90 { opacity: 0.9; }
  .opacity-95 { opacity: 0.95; }
  .opacity-100 { opacity: 1; }

  /* ===== TRANSITIONS ===== */
  .transition-none { transition-property: none; }
  .transition-all { transition-property: all; transition-timing-function: var(--transition); transition-duration: 300ms; }
  .transition { transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter; transition-timing-function: var(--transition); transition-duration: 300ms; }
  .transition-colors { transition-property: color, background-color, border-color, text-decoration-color, fill, stroke; transition-timing-function: var(--transition); transition-duration: 300ms; }
  .transition-opacity { transition-property: opacity; transition-timing-function: var(--transition); transition-duration: 300ms; }
  .transition-shadow { transition-property: box-shadow; transition-timing-function: var(--transition); transition-duration: 300ms; }
  .transition-transform { transition-property: transform; transition-timing-function: var(--transition); transition-duration: 300ms; }
  
  .duration-75 { transition-duration: 75ms; }
  .duration-100 { transition-duration: 100ms; }
  .duration-150 { transition-duration: 150ms; }
  .duration-200 { transition-duration: 200ms; }
  .duration-300 { transition-duration: 300ms; }
  .duration-500 { transition-duration: 500ms; }
  .duration-700 { transition-duration: 700ms; }
  .duration-1000 { transition-duration: 1000ms; }
  
  .ease-linear { transition-timing-function: linear; }
  .ease-in { transition-timing-function: cubic-bezier(0.4, 0, 1, 1); }
  .ease-out { transition-timing-function: cubic-bezier(0, 0, 0.2, 1); }
  .ease-in-out { transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

  /* ===== TRANSFORMS ===== */
  .transform { transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }
  .transform-gpu { transform: translate3d(var(--tw-translate-x), var(--tw-translate-y), 0) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }
  .transform-none { transform: none; }
  
  .scale-0 { --tw-scale-x: 0; --tw-scale-y: 0; }
  .scale-50 { --tw-scale-x: 0.5; --tw-scale-y: 0.5; }
  .scale-75 { --tw-scale-x: 0.75; --tw-scale-y: 0.75; }
  .scale-90 { --tw-scale-x: 0.9; --tw-scale-y: 0.9; }
  .scale-95 { --tw-scale-x: 0.95; --tw-scale-y: 0.95; }
  .scale-100 { --tw-scale-x: 1; --tw-scale-y: 1; }
  .scale-105 { --tw-scale-x: 1.05; --tw-scale-y: 1.05; }
  .scale-110 { --tw-scale-x: 1.1; --tw-scale-y: 1.1; }
  .scale-125 { --tw-scale-x: 1.25; --tw-scale-y: 1.25; }
  .scale-150 { --tw-scale-x: 1.5; --tw-scale-y: 1.5; }
  
  .scale-x-0 { --tw-scale-x: 0; }
  .scale-x-50 { --tw-scale-x: 0.5; }
  .scale-x-75 { --tw-scale-x: 0.75; }
  .scale-x-90 { --tw-scale-x: 0.9; }
  .scale-x-95 { --tw-scale-x: 0.95; }
  .scale-x-100 { --tw-scale-x: 1; }
  .scale-x-105 { --tw-scale-x: 1.05; }
  .scale-x-110 { --tw-scale-x: 1.1; }
  .scale-x-125 { --tw-scale-x: 1.25; }
  .scale-x-150 { --tw-scale-x: 1.5; }
  
  .scale-y-0 { --tw-scale-y: 0; }
  .scale-y-50 { --tw-scale-y: 0.5; }
  .scale-y-75 { --tw-scale-y: 0.75; }
  .scale-y-90 { --tw-scale-y: 0.9; }
  .scale-y-95 { --tw-scale-y: 0.95; }
  .scale-y-100 { --tw-scale-y: 1; }
  .scale-y-105 { --tw-scale-y: 1.05; }
  .scale-y-110 { --tw-scale-y: 1.1; }
  .scale-y-125 { --tw-scale-y: 1.25; }
  .scale-y-150 { --tw-scale-y: 1.5; }
  
  .rotate-0 { --tw-rotate: 0deg; }
  .rotate-1 { --tw-rotate: 1deg; }
  .rotate-2 { --tw-rotate: 2deg; }
  .rotate-3 { --tw-rotate: 3deg; }
  .rotate-6 { --tw-rotate: 6deg; }
  .rotate-12 { --tw-rotate: 12deg; }
  .rotate-45 { --tw-rotate: 45deg; }
  .rotate-90 { --tw-rotate: 90deg; }
  .rotate-180 { --tw-rotate: 180deg; }
  
  .translate-x-0 { --tw-translate-x: 0px; }
  .translate-x-px { --tw-translate-x: 1px; }
  .translate-x-0.5 { --tw-translate-x: 0.125rem; }
  .translate-x-1 { --tw-translate-x: 0.25rem; }
  .translate-x-1.5 { --tw-translate-x: 0.375rem; }
  .translate-x-2 { --tw-translate-x: 0.5rem; }
  .translate-x-2.5 { --tw-translate-x: 0.625rem; }
  .translate-x-3 { --tw-translate-x: 0.75rem; }
  .translate-x-3.5 { --tw-translate-x: 0.875rem; }
  .translate-x-4 { --tw-translate-x: 1rem; }
  .translate-x-5 { --tw-translate-x: 1.25rem; }
  .translate-x-6 { --tw-translate-x: 1.5rem; }
  .translate-x-7 { --tw-translate-x: 1.75rem; }
  .translate-x-8 { --tw-translate-x: 2rem; }
  .translate-x-9 { --tw-translate-x: 2.25rem; }
  .translate-x-10 { --tw-translate-x: 2.5rem; }
  .translate-x-11 { --tw-translate-x: 2.75rem; }
  .translate-x-12 { --tw-translate-x: 3rem; }
  .translate-x-14 { --tw-translate-x: 3.5rem; }
  .translate-x-16 { --tw-translate-x: 4rem; }
  .translate-x-20 { --tw-translate-x: 5rem; }
  .translate-x-24 { --tw-translate-x: 6rem; }
  .translate-x-28 { --tw-translate-x: 7rem; }
  .translate-x-32 { --tw-translate-x: 8rem; }
  .translate-x-36 { --tw-translate-x: 9rem; }
  .translate-x-40 { --tw-translate-x: 10rem; }
  .translate-x-44 { --tw-translate-x: 11rem; }
  .translate-x-48 { --tw-translate-x: 12rem; }
  .translate-x-52 { --tw-translate-x: 13rem; }
  .translate-x-56 { --tw-translate-x: 14rem; }
  .translate-x-60 { --tw-translate-x: 15rem; }
  .translate-x-64 { --tw-translate-x: 16rem; }
  .translate-x-72 { --tw-translate-x: 18rem; }
  .translate-x-80 { --tw-translate-x: 20rem; }
  .translate-x-96 { --tw-translate-x: 24rem; }
  .translate-x-1/2 { --tw-translate-x: 50%; }
  .translate-x-1/3 { --tw-translate-x: 33.333333%; }
  .translate-x-2/3 { --tw-translate-x: 66.666667%; }
  .translate-x-1/4 { --tw-translate-x: 25%; }
  .translate-x-2/4 { --tw-translate-x: 50%; }
  .translate-x-3/4 { --tw-translate-x: 75%; }
  .translate-x-full { --tw-translate-x: 100%; }
  .translate-x-screen { --tw-translate-x: 100vw; }
  .translate-x-min { --tw-translate-x: min-content; }
  .translate-x-max { --tw-translate-x: max-content; }
  .translate-x-fit { --tw-translate-x: fit-content; }
  
  .-translate-x-0 { --tw-translate-x: 0px; }
  .-translate-x-px { --tw-translate-x: -1px; }
  .-translate-x-0.5 { --tw-translate-x: -0.125rem; }
  .-translate-x-1 { --tw-translate-x: -0.25rem; }
  .-translate-x-1.5 { --tw-translate-x: -0.375rem; }
  .-translate-x-2 { --tw-translate-x: -0.5rem; }
  .-translate-x-2.5 { --tw-translate-x: -0.625rem; }
  .-translate-x-3 { --tw-translate-x: -0.75rem; }
  .-translate-x-3.5 { --tw-translate-x: -0.875rem; }
  .-translate-x-4 { --tw-translate-x: -1rem; }
  .-translate-x-5 { --tw-translate-x: -1.25rem; }
  .-translate-x-6 { --tw-translate-x: -1.5rem; }
  .-translate-x-7 { --tw-translate-x: -1.75rem; }
  .-translate-x-8 { --tw-translate-x: -2rem; }
  .-translate-x-9 { --tw-translate-x: -2.25rem; }
  .-translate-x-10 { --tw-translate-x: -2.5rem; }
  .-translate-x-11 { --tw-translate-x: -2.75rem; }
  .-translate-x-12 { --tw-translate-x: -3rem; }
  .-translate-x-14 { --tw-translate-x: -3.5rem; }
  .-translate-x-16 { --tw-translate-x: -4rem; }
  .-translate-x-20 { --tw-translate-x: -5rem; }
  .-translate-x-24 { --tw-translate-x: -6rem; }
  .-translate-x-28 { --tw-translate-x: -7rem; }
  .-translate-x-32 { --tw-translate-x: -8rem; }
  .-translate-x-36 { --tw-translate-x: -9rem; }
  .-translate-x-40 { --tw-translate-x: -10rem; }
  .-translate-x-44 { --tw-translate-x: -11rem; }
  .-translate-x-48 { --tw-translate-x: -12rem; }
  .-translate-x-52 { --tw-translate-x: -13rem; }
  .-translate-x-56 { --tw-translate-x: -14rem; }
  .-translate-x-60 { --tw-translate-x: -15rem; }
  .-translate-x-64 { --tw-translate-x: -16rem; }
  .-translate-x-72 { --tw-translate-x: -18rem; }
  .-translate-x-80 { --tw-translate-x: -20rem; }
  .-translate-x-96 { --tw-translate-x: -24rem; }
  .-translate-x-1/2 { --tw-translate-x: -50%; }
  .-translate-x-1/3 { --tw-translate-x: -33.333333%; }
  .-translate-x-2/3 { --tw-translate-x: -66.666667%; }
  .-translate-x-1/4 { --tw-translate-x: -25%; }
  .-translate-x-2/4 { --tw-translate-x: -50%; }
  .-translate-x-3/4 { --tw-translate-x: -75%; }
  .-translate-x-full { --tw-translate-x: -100%; }
  .-translate-x-screen { --tw-translate-x: -100vw; }
  .-translate-x-min { --tw-translate-x: min-content; }
  .-translate-x-max { --tw-translate-x: max-content; }
  .-translate-x-fit { --tw-translate-x: fit-content; }
  
  .translate-y-0 { --tw-translate-y: 0px; }
  .translate-y-px { --tw-translate-y: 1px; }
  .translate-y-0.5 { --tw-translate-y: 0.125rem; }
  .translate-y-1 { --tw-translate-y: 0.25rem; }
  .translate-y-1.5 { --tw-translate-y: 0.375rem; }
  .translate-y-2 { --tw-translate-y: 0.5rem; }
  .translate-y-2.5 { --tw-translate-y: 0.625rem; }
  .translate-y-3 { --tw-translate-y: 0.75rem; }
  .translate-y-3.5 { --tw-translate-y: 0.875rem; }
  .translate-y-4 { --tw-translate-y: 1rem; }
  .translate-y-5 { --tw-translate-y: 1.25rem; }
  .translate-y-6 { --tw-translate-y: 1.5rem; }
  .translate-y-7 { --tw-translate-y: 1.75rem; }
  .translate-y-8 { --tw-translate-y: 2rem; }
  .translate-y-9 { --tw-translate-y: 2.25rem; }
  .translate-y-10 { --tw-translate-y: 2.5rem; }
  .translate-y-11 { --tw-translate-y: 2.75rem; }
  .translate-y-12 { --tw-translate-y: 3rem; }
  .translate-y-14 { --tw-translate-y: 3.5rem; }
  .translate-y-16 { --tw-translate-y: 4rem; }
  .translate-y-20 { --tw-translate-y: 5rem; }
  .translate-y-24 { --tw-translate-y: 6rem; }
  .translate-y-28 { --tw-translate-y: 7rem; }
  .translate-y-32 { --tw-translate-y: 8rem; }
  .translate-y-36 { --tw-translate-y: 9rem; }
  .translate-y-40 { --tw-translate-y: 10rem; }
  .translate-y-44 { --tw-translate-y: 11rem; }
  .translate-y-48 { --tw-translate-y: 12rem; }
  .translate-y-52 { --tw-translate-y: 13rem; }
  .translate-y-56 { --tw-translate-y: 14rem; }
  .translate-y-60 { --tw-translate-y: 15rem; }
  .translate-y-64 { --tw-translate-y: 16rem; }
  .translate-y-72 { --tw-translate-y: 18rem; }
  .translate-y-80 { --tw-translate-y: 20rem; }
  .translate-y-96 { --tw-translate-y: 24rem; }
  .translate-y-1/2 { --tw-translate-y: 50%; }
  .translate-y-1/3 { --tw-translate-y: 33.333333%; }
  .translate-y-2/3 { --tw-translate-y: 66.666667%; }
  .translate-y-1/4 { --tw-translate-y: 25%; }
  .translate-y-2/4 { --tw-translate-y: 50%; }
  .translate-y-3/4 { --tw-translate-y: 75%; }
  .translate-y-full { --tw-translate-y: 100%; }
  .translate-y-screen { --tw-translate-y: 100vh; }
  .translate-y-min { --tw-translate-y: min-content; }
  .translate-y-max { --tw-translate-y: max-content; }
  .translate-y-fit { --tw-translate-y: fit-content; }
  
  .-translate-y-0 { --tw-translate-y: 0px; }
  .-translate-y-px { --tw-translate-y: -1px; }
  .-translate-y-0.5 { --tw-translate-y: -0.125rem; }
  .-translate-y-1 { --tw-translate-y: -0.25rem; }
  .-translate-y-1.5 { --tw-translate-y: -0.375rem; }
  .-translate-y-2 { --tw-translate-y: -0.5rem; }
  .-translate-y-2.5 { --tw-translate-y: -0.625rem; }
  .-translate-y-3 { --tw-translate-y: -0.75rem; }
  .-translate-y-3.5 { --tw-translate-y: -0.875rem; }
  .-translate-y-4 { --tw-translate-y: -1rem; }
  .-translate-y-5 { --tw-translate-y: -1.25rem; }
  .-translate-y-6 { --tw-translate-y: -1.5rem; }
  .-translate-y-7 { --tw-translate-y: -1.75rem; }
  .-translate-y-8 { --tw-translate-y: -2rem; }
  .-translate-y-9 { --tw-translate-y: -2.25rem; }
  .-translate-y-10 { --tw-translate-y: -2.5rem; }
  .-translate-y-11 { --tw-translate-y: -2.75rem; }
  .-translate-y-12 { --tw-translate-y: -3rem; }
  .-translate-y-14 { --tw-translate-y: -3.5rem; }
  .-translate-y-16 { --tw-translate-y: -4rem; }
  .-translate-y-20 { --tw-translate-y: -5rem; }
  .-translate-y-24 { --tw-translate-y: -6rem; }
  .-translate-y-28 { --tw-translate-y: -7rem; }
  .-translate-y-32 { --tw-translate-y: -8rem; }
  .-translate-y-36 { --tw-translate-y: -9rem; }
  .-translate-y-40 { --tw-translate-y: -10rem; }
  .-translate-y-44 { --tw-translate-y: -11rem; }
  .-translate-y-48 { --tw-translate-y: -12rem; }
  .-translate-y-52 { --tw-translate-y: -13rem; }
  .-translate-y-56 { --tw-translate-y: -14rem; }
  .-translate-y-60 { --tw-translate-y: -15rem; }
  .-translate-y-64 { --tw-translate-y: -16rem; }
  .-translate-y-72 { --tw-translate-y: -18rem; }
  .-translate-y-80 { --tw-translate-y: -20rem; }
  .-translate-y-96 { --tw-translate-y: -24rem; }
  .-translate-y-1/2 { --tw-translate-y: -50%; }
  .-translate-y-1/3 { --tw-translate-y: -33.333333%; }
  .-translate-y-2/3 { --tw-translate-y: -66.666667%; }
  .-translate-y-1/4 { --tw-translate-y: -25%; }
  .-translate-y-2/4 { --tw-translate-y: -50%; }
  .-translate-y-3/4 { --tw-translate-y: -75%; }
  .-translate-y-full { --tw-translate-y: -100%; }
  .-translate-y-screen { --tw-translate-y: -100vh; }
  .-translate-y-min { --tw-translate-y: min-content; }
  .-translate-y-max { --tw-translate-y: max-content; }
  .-translate-y-fit { --tw-translate-y: fit-content; }

  /* ===== INTERACTIVITY ===== */
  .cursor-auto { cursor: auto; }
  .cursor-default { cursor: default; }
  .cursor-pointer { cursor: pointer; }
  .cursor-wait { cursor: wait; }
  .cursor-text { cursor: text; }
  .cursor-move { cursor: move; }
  .cursor-help { cursor: help; }
  .cursor-not-allowed { cursor: not-allowed; }
  .cursor-none { cursor: none; }
  .cursor-context-menu { cursor: context-menu; }
  .cursor-progress { cursor: progress; }
  .cursor-cell { cursor: cell; }
  .cursor-crosshair { cursor: crosshair; }
  .cursor-vertical-text { cursor: vertical-text; }
  .cursor-alias { cursor: alias; }
  .cursor-copy { cursor: copy; }
  .cursor-no-drop { cursor: no-drop; }
  .cursor-grab { cursor: grab; }
  .cursor-grabbing { cursor: grabbing; }
  .cursor-zoom-in { cursor: zoom-in; }
  .cursor-zoom-out { cursor: zoom-out; }
  
  .select-none { user-select: none; }
  .select-text { user-select: text; }
  .select-all { user-select: all; }
  .select-auto { user-select: auto; }
  
  .resize-none { resize: none; }
  .resize-y { resize: vertical; }
  .resize-x { resize: horizontal; }
  .resize { resize: both; }
  
  .snap-none { scroll-snap-type: none; }
  .snap-x { scroll-snap-type: x var(--tw-scroll-snap-strictness); }
  .snap-y { scroll-snap-type: y var(--tw-scroll-snap-strictness); }
  .snap-both { scroll-snap-type: both var(--tw-scroll-snap-strictness); }
  .snap-mandatory { --tw-scroll-snap-strictness: mandatory; }
  .snap-proximity { --tw-scroll-snap-strictness: proximity; }
  .snap-start { scroll-snap-align: start; }
  .snap-end { scroll-snap-align: end; }
  .snap-center { scroll-snap-align: center; }
  .snap-align-none { scroll-snap-align: none; }
  
  .scroll-auto { scroll-behavior: auto; }
  .scroll-smooth { scroll-behavior: smooth; }
  
  .touch-auto { touch-action: auto; }
  .touch-none { touch-action: none; }
  .touch-pan-x { touch-action: pan-x; }
  .touch-pan-left { touch-action: pan-left; }
  .touch-pan-right { touch-action: pan-right; }
  .touch-pan-y { touch-action: pan-y; }
  .touch-pan-up { touch-action: pan-up; }
  .touch-pan-down { touch-action: pan-down; }
  .touch-pinch-zoom { touch-action: pinch-zoom; }
  .touch-manipulation { touch-action: manipulation; }
  
  .appearance-none { appearance: none; }

  /* ===== MODERN UTILITIES ===== */
  .aspect-auto { aspect-ratio: auto; }
  .aspect-square { aspect-ratio: 1 / 1; }
  .aspect-video { aspect-ratio: 16 / 9; }
  
  .container { container-type: inline-size; }
  
  @container (min-width: 640px) {
    .container-sm\:text-lg { font-size: 1.125rem; line-height: 1.75rem; }
  }
  
  @container (min-width: 768px) {
    .container-md\:text-xl { font-size: 1.25rem; line-height: 1.75rem; }
  }
  
  @container (min-width: 1024px) {
    .container-lg\:text-2xl { font-size: 1.5rem; line-height: 2rem; }
  }
  
  .grid-flow-row { grid-auto-flow: row; }
  .grid-flow-col { grid-auto-flow: column; }
  .grid-flow-dense { grid-auto-flow: dense; }
  .grid-flow-row-dense { grid-auto-flow: row dense; }
  .grid-flow-col-dense { grid-auto-flow: column dense; }
  
  .auto-cols-auto { grid-auto-columns: auto; }
  .auto-cols-min { grid-auto-columns: min-content; }
  .auto-cols-max { grid-auto-columns: max-content; }
  .auto-cols-fr { grid-auto-columns: minmax(0, 1fr); }
  
  .auto-rows-auto { grid-auto-rows: auto; }
  .auto-rows-min { grid-auto-rows: min-content; }
  .auto-rows-max { grid-auto-rows: max-content; }
  .auto-rows-fr { grid-auto-rows: minmax(0, 1fr); }
  
  .grid-cols-subgrid { grid-template-columns: subgrid; }
  .grid-rows-subgrid { grid-template-rows: subgrid; }
  
  .float-right { float: right; }
  .float-left { float: left; }
  .float-none { float: none; }
  
  .clear-left { clear: left; }
  .clear-right { clear: right; }
  .clear-both { clear: both; }
  .clear-none { clear: none; }
  
  .isolate { isolation: isolate; }
  .isolation-auto { isolation: auto; }
  
  .object-contain { object-fit: contain; }
  .object-cover { object-fit: cover; }
  .object-fill { object-fit: fill; }
  .object-none { object-fit: none; }
  .object-scale-down { object-fit: scale-down; }
  
  .object-bottom { object-position: bottom; }
  .object-center { object-position: center; }
  .object-left { object-position: left; }
  .object-left-bottom { object-position: left bottom; }
  .object-left-top { object-position: left top; }
  .object-right { object-position: right; }
  .object-right-bottom { object-position: right bottom; }
  .object-right-top { object-position: right top; }
  .object-top { object-position: top; }
  
  .overflow-ellipsis { text-overflow: ellipsis; }
  .overflow-clip { text-overflow: clip; }
  
  .decoration-slice { box-decoration-break: slice; }
  .decoration-clone { box-decoration-break: clone; }
  
  .box-decoration-slice { box-decoration-break: slice; }
  .box-decoration-clone { box-decoration-break: clone; }
  
  .bg-fixed { background-attachment: fixed; }
  .bg-local { background-attachment: local; }
  .bg-scroll { background-attachment: scroll; }
  
  .bg-clip-border { background-clip: border-box; }
  .bg-clip-padding { background-clip: padding-box; }
  .bg-clip-content { background-clip: content-box; }
  .bg-clip-text { background-clip: text; }
  
  .bg-origin-border { background-origin: border-box; }
  .bg-origin-padding { background-origin: padding-box; }
  .bg-origin-content { background-origin: content-box; }
  
  .fill-current { fill: currentColor; }
  .stroke-current { stroke: currentColor; }
  
  .sr-only { 
    position: absolute; 
    width: 1px; 
    height: 1px; 
    padding: 0; 
    margin: -1px; 
    overflow: hidden; 
    clip: rect(0, 0, 0, 0); 
    white-space: nowrap; 
    border-width: 0; 
  }
  
  .not-sr-only { 
    position: static; 
    width: auto; 
    height: auto; 
    padding: 0; 
    margin: 0; 
    overflow: visible; 
    clip: auto; 
    white-space: normal; 
  }
  
  .pointer-events-none { pointer-events: none; }
  .pointer-events-auto { pointer-events: auto; }
  
  .visible { visibility: visible; }
  .invisible { visibility: hidden; }
  
  .static { position: static; }
  .fixed { position: fixed; }
  .absolute { position: absolute; }
  .relative { position: relative; }
  .sticky { position: sticky; }
  
  .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
  .inset-x-0 { right: 0; left: 0; }
  .inset-y-0 { top: 0; bottom: 0; }
  .top-0 { top: 0; }
  .right-0 { right: 0; }
  .bottom-0 { bottom: 0; }
  .left-0 { left: 0; }
  
  .z-0 { z-index: 0; }
  .z-10 { z-index: 10; }
  .z-20 { z-index: 20; }
  .z-30 { z-index: 30; }
  .z-40 { z-index: 40; }
  .z-50 { z-index: 50; }
  .z-auto { z-index: auto; }
  
  .order-first { order: -9999; }
  .order-last { order: 9999; }
  .order-none { order: 0; }
  .order-1 { order: 1; }
  .order-2 { order: 2; }
  .order-3 { order: 3; }
  .order-4 { order: 4; }
  .order-5 { order: 5; }
  .order-6 { order: 6; }
  .order-7 { order: 7; }
  .order-8 { order: 8; }
  .order-9 { order: 9; }
  .order-10 { order: 10; }
  .order-11 { order: 11; }
  .order-12 { order: 12; }
  
  .grid-flow-row { grid-auto-flow: row; }
  .grid-flow-col { grid-auto-flow: column; }
  .grid-flow-dense { grid-auto-flow: dense; }
  .grid-flow-row-dense { grid-auto-flow: row dense; }
  .grid-flow-col-dense { grid-auto-flow: column dense; }
  
  .auto-cols-auto { grid-auto-columns: auto; }
  .auto-cols-min { grid-auto-columns: min-content; }
  .auto-cols-max { grid-auto-columns: max-content; }
  .auto-cols-fr { grid-auto-columns: minmax(0, 1fr); }
  
  .auto-rows-auto { grid-auto-rows: auto; }
  .auto-rows-min { grid-auto-rows: min-content; }
  .auto-rows-max { grid-auto-rows: max-content; }
  .auto-rows-fr { grid-auto-rows: minmax(0, 1fr); }
  
  .grid-cols-subgrid { grid-template-columns: subgrid; }
  .grid-rows-subgrid { grid-template-rows: subgrid; }
  
  .float-right { float: right; }
  .float-left { float: left; }
  .float-none { float: none; }
  
  .clear-left { clear: left; }
  .clear-right { clear: right; }
  .clear-both { clear: both; }
  .clear-none { clear: none; }
  
  .isolate { isolation: isolate; }
  .isolation-auto { isolation: auto; }
  
  .object-contain { object-fit: contain; }
  .object-cover { object-fit: cover; }
  .object-fill { object-fit: fill; }
  .object-none { object-fit: none; }
  .object-scale-down { object-fit: scale-down; }
  
  .object-bottom { object-position: bottom; }
  .object-center { object-position: center; }
  .object-left { object-position: left; }
  .object-left-bottom { object-position: left bottom; }
  .object-left-top { object-position: left top; }
  .object-right { object-position: right; }
  .object-right-bottom { object-position: right bottom; }
  .object-right-top { object-position: right top; }
  .object-top { object-position: top; }
  
  .overflow-ellipsis { text-overflow: ellipsis; }
  .overflow-clip { text-overflow: clip; }
  
  .decoration-slice { box-decoration-break: slice; }
  .decoration-clone { box-decoration-break: clone; }
  
  .box-decoration-slice { box-decoration-break: slice; }
  .box-decoration-clone { box-decoration-break: clone; }
  
  .bg-fixed { background-attachment: fixed; }
  .bg-local { background-attachment: local; }
  .bg-scroll { background-attachment: scroll; }
  
  .bg-clip-border { background-clip: border-box; }
  .bg-clip-padding { background-clip: padding-box; }
  .bg-clip-content { background-clip: content-box; }
  .bg-clip-text { background-clip: text; }
  
  .bg-origin-border { background-origin: border-box; }
  .bg-origin-padding { background-origin: padding-box; }
  .bg-origin-content { background-origin: content-box; }
  
  .fill-current { fill: currentColor; }
  .stroke-current { stroke: currentColor; }
  
  .sr-only { 
    position: absolute; 
    width: 1px; 
    height: 1px; 
    padding: 0; 
    margin: -1px; 
    overflow: hidden; 
    clip: rect(0, 0, 0, 0); 
    white-space: nowrap; 
    border-width: 0; 
  }
  
  .not-sr-only { 
    position: static; 
    width: auto; 
    height: auto; 
    padding: 0; 
    margin: 0; 
    overflow: visible; 
    clip: auto; 
    white-space: normal; 
  }
  
  .pointer-events-none { pointer-events: none; }
  .pointer-events-auto { pointer-events: auto; }
  
  .visible { visibility: visible; }
  .invisible { visibility: hidden; }
  
  .static { position: static; }
  .fixed { position: fixed; }
  .absolute { position: absolute; }
  .relative { position: relative; }
  .sticky { position: sticky; }
  
  .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
  .inset-x-0 { right: 0; left: 0; }
  .inset-y-0 { top: 0; bottom: 0; }
  .top-0 { top: 0; }
  .right-0 { right: 0; }
  .bottom-0 { bottom: 0; }
  .left-0 { left: 0; }
  
  .z-0 { z-index: 0; }
  .z-10 { z-index: 10; }
  .z-20 { z-index: 20; }
  .z-30 { z-index: 30; }
  .z-40 { z-index: 40; }
  .z-50 { z-index: 50; }
  .z-auto { z-index: auto; }
  
  .order-first { order: -9999; }
  .order-last { order: 9999; }
  .order-none { order: 0; }
  .order-1 { order: 1; }
  .order-2 { order: 2; }
  .order-3 { order: 3; }
  .order-4 { order: 4; }
  .order-5 { order: 5; }
  .order-6 { order: 6; }
  .order-7 { order: 7; }
  .order-8 { order: 8; }
  .order-9 { order: 9; }
  .order-10 { order: 10; }
  .order-11 { order: 11; }
  .order-12 { order: 12; }
}

@layer components {
  /* ===== BUTTONS ===== */
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
    border-radius: var(--border-radius);
    font-weight: 500;
    font-size: 1rem;
    line-height: 1.5;
    text-align: center;
    text-decoration: none;
    cursor: pointer;
    user-select: none;
    transition: var(--transition);
    background-color: var(--primary);
    color: var(--on-primary);
    border: 1px solid transparent;
    position: relative;
    overflow: hidden;
  }
  
  .btn:hover {
    background-color: color-mix(in srgb, var(--primary), #000 10%);
    box-shadow: var(--shadow-md);
  }
  
  .btn:active {
    background-color: color-mix(in srgb, var(--primary), #000 20%);
  }
  
  .btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary), transparent 70%);
  }
  
  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }
  
  .btn-sm {
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 3);
    font-size: 0.875rem;
  }
  
  .btn-lg {
    padding: calc(var(--spacing-unit) * 4) calc(var(--spacing-unit) * 6);
    font-size: 1.125rem;
  }
  
  .btn-xl {
    padding: calc(var(--spacing-unit) * 5) calc(var(--spacing-unit) * 8);
    font-size: 1.25rem;
  }
  
  .btn-icon {
    padding: calc(var(--spacing-unit) * 3);
    border-radius: 50%;
  }
  
  .btn-icon-sm {
    padding: calc(var(--spacing-unit) * 2);
    border-radius: 50%;
  }
  
  .btn-icon-lg {
    padding: calc(var(--spacing-unit) * 4);
    border-radius: 50%;
  }
  
  .btn-outlined {
    background-color: transparent;
    color: var(--primary);
    border-color: var(--primary);
  }
  
  .btn-outlined:hover {
    background-color: color-mix(in srgb, var(--primary), transparent 90%);
  }
  
  .btn-text {
    background-color: transparent;
    color: var(--primary);
    border: none;
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 3);
  }
  
  .btn-text:hover {
    background-color: color-mix(in srgb, var(--primary), transparent 90%);
  }
  
  .btn-primary {
    background-color: var(--primary);
    color: var(--on-primary);
  }
  
  .btn-secondary {
    background-color: var(--secondary);
    color: var(--on-secondary);
  }
  
  .btn-tertiary {
    background-color: var(--tertiary);
    color: var(--on-tertiary);
  }
  
  .btn-error {
    background-color: var(--error);
    color: var(--on-error);
  }
  
  .btn-success {
    background-color: var(--success);
    color: white;
  }
  
  .btn-warning {
    background-color: var(--warning);
    color: black;
  }
  
  .btn-info {
    background-color: var(--info);
    color: white;
  }
  
  .btn-danger {
    background-color: var(--danger);
    color: white;
  }
  
  .btn-ghost {
    background-color: transparent;
    color: var(--on-surface);
    border: none;
  }
  
  .btn-ghost:hover {
    background-color: color-mix(in srgb, var(--on-surface), transparent 10%);
  }
  
  .btn-link {
    background-color: transparent;
    color: var(--link);
    border: none;
    text-decoration: underline;
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 3);
  }
  
  .btn-link:hover {
    background-color: transparent;
    text-decoration: none;
  }
  
  .btn-group {
    display: inline-flex;
    border-radius: var(--border-radius);
    overflow: hidden;
  }
  
  .btn-group .btn {
    border-radius: 0;
    border-right: 1px solid color-mix(in srgb, var(--primary), transparent 50%);
  }
  
  .btn-group .btn:first-child {
    border-top-left-radius: var(--border-radius);
    border-bottom-left-radius: var(--border-radius);
  }
  
  .btn-group .btn:last-child {
    border-top-right-radius: var(--border-radius);
    border-bottom-right-radius: var(--border-radius);
    border-right: none;
  }
  
  .btn-block {
    display: flex;
    width: 100%;
  }
  
  /* Ripple Effect */
  .ripple {
    position: relative;
    overflow: hidden;
  }
  
  .ripple::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.5);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%);
    transform-origin: 50% 50%;
  }
  
  .ripple:focus:not(:active)::after {
    animation: ripple 1s ease-out;
  }
  
  @keyframes ripple {
    0% {
      transform: scale(0, 0);
      opacity: 1;
    }
    20% {
      transform: scale(25, 25);
      opacity: 1;
    }
    100% {
      opacity: 0;
      transform: scale(40, 40);
    }
  }

  /* ===== CARDS ===== */
  .card {
    background-color: var(--surface);
    border-radius: calc(var(--border-radius) * 2);
    box-shadow: var(--shadow-sm);
    overflow: hidden;
    transition: var(--transition);
    display: flex;
    flex-direction: column;
  }
  
  .card:hover {
    box-shadow: var(--shadow-md);
  }
  
  .card-header {
    padding: calc(var(--spacing-unit) * 4) calc(var(--spacing-unit) * 4) 0;
  }
  
  .card-body {
    padding: calc(var(--spacing-unit) * 4);
    flex: 1 1 auto;
  }
  
  .card-footer {
    padding: 0 calc(var(--spacing-unit) * 4) calc(var(--spacing-unit) * 4);
  }
  
  .card-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: calc(var(--spacing-unit) * 2);
    color: var(--on-surface);
  }
  
  .card-subtitle {
    font-size: 1rem;
    font-weight: 400;
    color: var(--on-surface-variant);
    margin-bottom: calc(var(--spacing-unit) * 3);
  }
  
  .card-text {
    color: var(--on-surface-variant);
    margin-bottom: calc(var(--spacing-unit) * 3);
  }
  
  .card-img-top {
    width: 100%;
    height: auto;
    border-top-left-radius: calc(var(--border-radius) * 2);
    border-top-right-radius: calc(var(--border-radius) * 2);
  }
  
  .card-img-bottom {
    width: 100%;
    height: auto;
    border-bottom-left-radius: calc(var(--border-radius) * 2);
    border-bottom-right-radius: calc(var(--border-radius) * 2);
  }
  
  .card-link {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
  }
  
  .card-link:hover {
    text-decoration: underline;
  }
  
  .card-group {
    display: flex;
    gap: calc(var(--spacing-unit) * 4);
  }
  
  .card-deck {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: calc(var(--spacing-unit) * 4);
  }
  
  .card-elevated {
    box-shadow: var(--shadow-md);
  }
  
  .card-elevated:hover {
    box-shadow: var(--shadow-lg);
  }
  
  .card-bordered {
    border: 1px solid var(--outline);
  }
  
  .card-fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    border-radius: 0;
    max-width: none;
    margin: 0;
  }

  /* ===== FORMS ===== */
  .form-control {
    display: block;
    width: 100%;
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
    font-size: 1rem;
    line-height: 1.5;
    color: var(--on-surface);
    background-color: var(--surface);
    background-clip: padding-box;
    border: 1px solid var(--outline);
    border-radius: var(--border-radius);
    transition: var(--transition);
  }
  
  .form-control:focus {
    color: var(--on-surface);
    background-color: var(--surface);
    border-color: var(--primary);
    outline: 0;
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary), transparent 70%);
  }
  
  .form-control::placeholder {
    color: var(--on-surface-variant);
    opacity: 0.6;
  }
  
  .form-control:disabled {
    background-color: var(--surface-variant);
    opacity: 0.6;
  }
  
  .form-control-sm {
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 3);
    font-size: 0.875rem;
  }
  
  .form-control-lg {
    padding: calc(var(--spacing-unit) * 4) calc(var(--spacing-unit) * 5);
    font-size: 1.125rem;
  }
  
  .form-control-plaintext {
    display: block;
    width: 100%;
    padding: calc(var(--spacing-unit) * 3) 0;
    margin-bottom: 0;
    font-size: 1rem;
    line-height: 1.5;
    color: var(--on-surface);
    background-color: transparent;
    border: solid transparent;
    border-width: 1px 0;
  }
  
  .form-control-plaintext:focus {
    outline: 0;
  }
  
  .form-control-plaintext.form-control-sm, .form-control-plaintext.form-control-lg {
    padding-right: 0;
    padding-left: 0;
  }
  
  .form-select {
    display: block;
    width: 100%;
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4) calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 8);
    font-size: 1rem;
    line-height: 1.5;
    color: var(--on-surface);
    background-color: var(--surface);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(var(--spacing-unit) * 3) center;
    background-size: 16px 12px;
    border: 1px solid var(--outline);
    border-radius: var(--border-radius);
    transition: var(--transition);
    appearance: none;
  }
  
  .form-select:focus {
    border-color: var(--primary);
    outline: 0;
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary), transparent 70%);
  }
  
  .form-select[multiple], .form-select[size]:not([size="1"]) {
    padding-right: calc(var(--spacing-unit) * 4);
    background-image: none;
  }
  
  .form-select-sm {
    padding-top: calc(var(--spacing-unit) * 2);
    padding-bottom: calc(var(--spacing-unit) * 2);
    padding-left: calc(var(--spacing-unit) * 3);
    font-size: 0.875rem;
  }
  
  .form-select-lg {
    padding-top: calc(var(--spacing-unit) * 4);
    padding-bottom: calc(var(--spacing-unit) * 4);
    padding-left: calc(var(--spacing-unit) * 5);
    font-size: 1.125rem;
  }
  
  .form-check {
    display: block;
    min-height: 1.5rem;
    padding-left: 1.5em;
    margin-bottom: 0.125rem;
  }
  
  .form-check-input {
    width: 1em;
    height: 1em;
    margin-top: 0.25em;
    vertical-align: top;
    background-color: var(--surface);
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    border: 1px solid var(--outline);
    appearance: none;
    color-adjust: exact;
    transition: var(--transition);
  }
  
  .form-check-input[type="checkbox"] {
    border-radius: 0.25em;
  }
  
  .form-check-input[type="radio"] {
    border-radius: 50%;
  }
  
  .form-check-input:active {
    filter: brightness(90%);
  }
  
  .form-check-input:focus {
    border-color: var(--primary);
    outline: 0;
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary), transparent 70%);
  }
  
  .form-check-input:checked {
    background-color: var(--primary);
    border-color: var(--primary);
  }
  
  .form-check-input:checked[type="checkbox"] {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10l3 3l6-6'/%3e%3c/svg%3e");
  }
  
  .form-check-input:checked[type="radio"] {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='2' fill='%23fff'/%3e%3c/svg%3e");
  }
  
  .form-check-input[type="checkbox"]:indeterminate {
    background-color: var(--primary);
    border-color: var(--primary);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/%3e%3c/svg%3e");
  }
  
  .form-check-input:disabled {
    pointer-events: none;
    filter: none;
    opacity: 0.5;
  }
  
  .form-check-input[disabled] ~ .form-check-label, .form-check-input:disabled ~ .form-check-label {
    opacity: 0.5;
  }
  
  .form-switch {
    padding-left: 2.5em;
  }
  
  .form-switch .form-check-input {
    width: 2em;
    margin-left: -2.5em;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e");
    background-position: left center;
    border-radius: 2em;
    transition: var(--transition);
  }
  
  .form-switch .form-check-input:focus {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e");
  }
  
  .form-switch .form-check-input:checked {
    background-position: right center;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
  }
  
  .form-check-label {
    margin-left: 0.5em;
    cursor: pointer;
  }
  
  .form-range {
    width: 100%;
    height: 1.5rem;
    padding: 0;
    background-color: transparent;
    appearance: none;
  }
  
  .form-range:focus {
    outline: 0;
  }
  
  .form-range:focus::-webkit-slider-thumb {
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary), transparent 70%);
  }
  
  .form-range:focus::-moz-range-thumb {
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary), transparent 70%);
  }
  
  .form-range::-moz-focus-outer {
    border: 0;
  }
  
  .form-range::-webkit-slider-thumb {
    width: 1rem;
    height: 1rem;
    margin-top: -0.25rem;
    background-color: var(--primary);
    border: 0;
    border-radius: 1rem;
    transition: var(--transition);
    appearance: none;
  }
  
  .form-range::-webkit-slider-thumb:active {
    background-color: color-mix(in srgb, var(--primary), #000 20%);
  }
  
  .form-range::-webkit-slider-runnable-track {
    width: 100%;
    height: 0.5rem;
    color: transparent;
    cursor: pointer;
    background-color: var(--surface-variant);
    border-radius: 1rem;
  }
  
  .form-range::-moz-range-thumb {
    width: 1rem;
    height: 1rem;
    background-color: var(--primary);
    border: 0;
    border-radius: 1rem;
    transition: var(--transition);
    appearance: none;
  }
  
  .form-range::-moz-range-thumb:active {
    background-color: color-mix(in srgb, var(--primary), #000 20%);
  }
  
  .form-range::-moz-range-track {
    width: 100%;
    height: 0.5rem;
    color: transparent;
    cursor: pointer;
    background-color: var(--surface-variant);
    border-radius: 1rem;
  }
  
  .form-range:disabled {
    pointer-events: none;
  }
  
  .form-range:disabled::-webkit-slider-thumb {
    background-color: var(--surface-variant);
  }
  
  .form-range:disabled::-moz-range-thumb {
    background-color: var(--surface-variant);
  }
  
  .form-floating {
    position: relative;
  }
  
  .form-floating > .form-control,
  .form-floating > .form-select {
    height: calc(3.5rem + 2px);
    line-height: 1.25;
  }
  
  .form-floating > label {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    padding: 1rem 0.75rem;
    pointer-events: none;
    border: 1px solid transparent;
    transform-origin: 0 0;
    transition: var(--transition);
  }
  
  .form-floating > .form-control {
    padding: 1rem 0.75rem;
  }
  
  .form-floating > .form-control::-moz-placeholder {
    color: transparent;
  }
  
  .form-floating > .form-control::placeholder {
    color: transparent;
  }
  
  .form-floating > .form-control:focus, .form-floating > .form-control:not(:placeholder-shown) {
    padding-top: 1.625rem;
    padding-bottom: 0.625rem;
  }
  
  .form-floating > .form-control:-webkit-autofill {
    padding-top: 1.625rem;
    padding-bottom: 0.625rem;
  }
  
  .form-floating > .form-select {
    padding-top: 1.625rem;
    padding-bottom: 0.625rem;
  }
  
  .form-floating > .form-control:focus ~ label,
  .form-floating > .form-control:not(:placeholder-shown) ~ label,
  .form-floating > .form-select ~ label {
    opacity: 0.65;
    transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
  }
  
  .form-floating > .form-control:-webkit-autofill ~ label {
    opacity: 0.65;
    transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
  }
  
  .input-group {
    position: relative;
    display: flex;
    flex-wrap: wrap;
    align-items: stretch;
    width: 100%;
  }
  
  .input-group > .form-control,
  .input-group > .form-select {
    position: relative;
    flex: 1 1 auto;
    width: 1%;
    min-width: 0;
  }
  
  .input-group > .form-control:focus,
  .input-group > .form-select:focus {
    z-index: 3;
  }
  
  .input-group .btn {
    position: relative;
    z-index: 2;
  }
  
  .input-group .btn:focus {
    z-index: 3;
  }
  
  .input-group-text {
    display: flex;
    align-items: center;
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: var(--on-surface);
    text-align: center;
    white-space: nowrap;
    background-color: var(--surface-variant);
    border: 1px solid var(--outline);
    border-radius: var(--border-radius);
  }
  
  .input-group-lg > .form-control,
  .input-group-lg > .form-select,
  .input-group-lg > .input-group-text,
  .input-group-lg > .btn {
    padding: calc(var(--spacing-unit) * 4) calc(var(--spacing-unit) * 5);
    font-size: 1.125rem;
    border-radius: calc(var(--border-radius) * 1.5);
  }
  
  .input-group-sm > .form-control,
  .input-group-sm > .form-select,
  .input-group-sm > .input-group-text,
  .input-group-sm > .btn {
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 3);
    font-size: 0.875rem;
    border-radius: calc(var(--border-radius) * 0.5);
  }
  
  .input-group-lg > .form-select,
  .input-group-sm > .form-select {
    padding-right: calc(var(--spacing-unit) * 8);
  }
  
  .input-group:not(.has-validation) > :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu),
  .input-group:not(.has-validation) > .dropdown-toggle:nth-last-child(n+3) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
  
  .input-group.has-validation > :nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu),
  .input-group.has-validation > .dropdown-toggle:nth-last-child(n+4) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
  
  .input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) {
    margin-left: -1px;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  /* ===== NAVIGATION ===== */
  .navbar {
    position: relative;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 4);
    background-color: var(--surface);
    box-shadow: var(--shadow-sm);
  }
  
  .navbar-brand {
    padding-top: calc(var(--spacing-unit) * 1.5);
    padding-bottom: calc(var(--spacing-unit) * 1.5);
    margin-right: calc(var(--spacing-unit) * 2);
    font-size: 1.25rem;
    text-decoration: none;
    white-space: nowrap;
    color: var(--on-surface);
  }
  
  .navbar-brand:hover, .navbar-brand:focus {
    text-decoration: none;
  }
  
  .navbar-nav {
    display: flex;
    flex-direction: column;
    padding-left: 0;
    margin-bottom: 0;
    list-style: none;
  }
  
  .navbar-nav .nav-link {
    padding-right: 0;
    padding-left: 0;
  }
  
  .navbar-nav .dropdown-menu {
    position: static;
    float: none;
  }
  
  .navbar-text {
    padding-top: calc(var(--spacing-unit) * 1.5);
    padding-bottom: calc(var(--spacing-unit) * 1.5);
  }
  
  .navbar-collapse {
    flex-basis: 100%;
    flex-grow: 1;
    align-items: center;
  }
  
  .navbar-toggler {
    padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 2);
    font-size: 1.25rem;
    line-height: 1;
    background-color: transparent;
    border: 1px solid transparent;
    border-radius: var(--border-radius);
    transition: var(--transition);
  }
  
  .navbar-toggler:hover {
    text-decoration: none;
  }
  
  .navbar-toggler:focus {
    text-decoration: none;
    outline: 0;
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary), transparent 70%);
  }
  
  .navbar-toggler-icon {
    display: inline-block;
    width: 1.5em;
    height: 1.5em;
    vertical-align: middle;
    background-repeat: no-repeat;
    background-position: center;
    background-size: 100%;
  }
  
  .navbar-nav-scroll {
    max-height: 75vh;
    overflow-y: auto;
  }
  
  @media (min-width: 576px) {
    .navbar-expand-sm {
      flex-wrap: nowrap;
      justify-content: flex-start;
    }
    
    .navbar-expand-sm .navbar-nav {
      flex-direction: row;
    }
    
    .navbar-expand-sm .navbar-nav .dropdown-menu {
      position: absolute;
    }
    
    .navbar-expand-sm .navbar-nav .nav-link {
      padding-right: calc(var(--spacing-unit) * 2);
      padding-left: calc(var(--spacing-unit) * 2);
    }
    
    .navbar-expand-sm .navbar-nav-scroll {
      overflow: visible;
    }
    
    .navbar-expand-sm .navbar-collapse {
      display: flex !important;
      flex-basis: auto;
    }
    
    .navbar-expand-sm .navbar-toggler {
      display: none;
    }
  }
  
  @media (min-width: 768px) {
    .navbar-expand-md {
      flex-wrap: nowrap;
      justify-content: flex-start;
    }
    
    .navbar-expand-md .navbar-nav {
      flex-direction: row;
    }
    
    .navbar-expand-md .navbar-nav .dropdown-menu {
      position: absolute;
    }
    
    .navbar-expand-md .navbar-nav .nav-link {
      padding-right: calc(var(--spacing-unit) * 2);
      padding-left: calc(var(--spacing-unit) * 2);
    }
    
    .navbar-expand-md .navbar-nav-scroll {
      overflow: visible;
    }
    
    .navbar-expand-md .navbar-collapse {
      display: flex !important;
      flex-basis: auto;
    }
    
    .navbar-expand-md .navbar-toggler {
      display: none;
    }
  }
  
  @media (min-width: 992px) {
    .navbar-expand-lg {
      flex-wrap: nowrap;
      justify-content: flex-start;
    }
    
    .navbar-expand-lg .navbar-nav {
      flex-direction: row;
    }
    
    .navbar-expand-lg .navbar-nav .dropdown-menu {
      position: absolute;
    }
    
    .navbar-expand-lg .navbar-nav .nav-link {
      padding-right: calc(var(--spacing-unit) * 2);
      padding-left: calc(var(--spacing-unit) * 2);
    }
    
    .navbar-expand-lg .navbar-nav-scroll {
      overflow: visible;
    }
    
    .navbar-expand-lg .navbar-collapse {
      display: flex !important;
      flex-basis: auto;
    }
    
    .navbar-expand-lg .navbar-toggler {
      display: none;
    }
  }
  
  @media (min-width: 1200px) {
    .navbar-expand-xl {
      flex-wrap: nowrap;
      justify-content: flex-start;
    }
    
    .navbar-expand-xl .navbar-nav {
      flex-direction: row;
    }
    
    .navbar-expand-xl .navbar-nav .dropdown-menu {
      position: absolute;
    }
    
    .navbar-expand-xl .navbar-nav .nav-link {
      padding-right: calc(var(--spacing-unit) * 2);
      padding-left: calc(var(--spacing-unit) * 2);
    }
    
    .navbar-expand-xl .navbar-nav-scroll {
      overflow: visible;
    }
    
    .navbar-expand-xl .navbar-collapse {
      display: flex !important;
      flex-basis: auto;
    }
    
    .navbar-expand-xl .navbar-toggler {
      display: none;
    }
  }
  
  @media (min-width: 1400px) {
    .navbar-expand-xxl {
      flex-wrap: nowrap;
      justify-content: flex-start;
    }
    
    .navbar-expand-xxl .navbar-nav {
      flex-direction: row;
    }
    
    .navbar-expand-xxl .navbar-nav .dropdown-menu {
      position: absolute;
    }
    
    .navbar-expand-xxl .navbar-nav .nav-link {
      padding-right: calc(var(--spacing-unit) * 2);
      padding-left: calc(var(--spacing-unit) * 2);
    }
    
    .navbar-expand-xxl .navbar-nav-scroll {
      overflow: visible;
    }
    
    .navbar-expand-xxl .navbar-collapse {
      display: flex !important;
      flex-basis: auto;
    }
    
    .navbar-expand-xxl .navbar-toggler {
      display: none;
    }
  }
  
  .navbar-expand {
    flex-wrap: nowrap;
    justify-content: flex-start;
  }
  
  .navbar-expand .navbar-nav {
    flex-direction: row;
  }
  
  .navbar-expand .navbar-nav .dropdown-menu {
    position: absolute;
  }
  
  .navbar-expand .navbar-nav .nav-link {
    padding-right: calc(var(--spacing-unit) * 2);
    padding-left: calc(var(--spacing-unit) * 2);
  }
  
  .navbar-expand .navbar-nav-scroll {
    overflow: visible;
  }
  
  .navbar-expand .navbar-collapse {
    display: flex !important;
    flex-basis: auto;
  }
  
  .navbar-expand .navbar-toggler {
    display: none;
  }
  
  .navbar-light .navbar-brand {
    color: var(--on-surface);
  }
  
  .navbar-light .navbar-brand:hover, .navbar-light .navbar-brand:focus {
    color: var(--on-surface);
  }
  
  .navbar-light .navbar-nav .nav-link {
    color: var(--on-surface);
  }
  
  .navbar-light .navbar-nav .nav-link:hover, .navbar-light .navbar-nav .nav-link:focus {
    color: var(--primary);
  }
  
  .navbar-light .navbar-nav .nav-link.disabled {
    color: rgba(0, 0, 0, 0.3);
  }
  
  .navbar-light .navbar-nav .show > .nav-link,
  .navbar-light .navbar-nav .nav-link.active {
    color: var(--primary);
  }
  
  .navbar-light .navbar-toggler {
    color: var(--on-surface);
    border-color: rgba(0, 0, 0, 0.1);
  }
  
  .navbar-light .navbar-toggler-icon {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%280, 0, 0, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
  }
  
  .navbar-light .navbar-text {
    color: var(--on-surface);
  }
  
  .navbar-light .navbar-text a,
  .navbar-light .navbar-text a:hover,
  .navbar-light .navbar-text a:focus {
    color: var(--primary);
  }
  
  .navbar-dark .navbar-brand {
    color: #fff;
  }
  
  .navbar-dark .navbar-brand:hover, .navbar-dark .navbar-brand:focus {
    color: #fff;
  }
  
  .navbar-dark .navbar-nav .nav-link {
    color: rgba(255, 255, 255, 0.8);
  }
  
  .navbar-dark .navbar-nav .nav-link:hover, .navbar-dark .navbar-nav .nav-link:focus {
    color: #fff;
  }
  
  .navbar-dark .navbar-nav .nav-link.disabled {
    color: rgba(255, 255, 255, 0.25);
  }
  
  .navbar-dark .navbar-nav .show > .nav-link,
  .navbar-dark .navbar-nav .nav-link.active {
    color: #fff;
  }
  
  .navbar-dark .navbar-toggler {
    color: rgba(255, 255, 255, 0.8);
    border-color: rgba(255, 255, 255, 0.1);
  }
  
  .navbar-dark .navbar-toggler-icon {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.8%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
  }
  
  .navbar-dark .navbar-text {
    color: rgba(255, 255, 255, 0.8);
  }
  
  .navbar-dark .navbar-text a,
  .navbar-dark .navbar-text a:hover,
  .navbar-dark .navbar-text a:focus {
    color: #fff;
  }
  
  .nav {
    display: flex;
    flex-wrap: wrap;
    padding-left: 0;
    margin-bottom: 0;
    list-style: none;
  }
  
  .nav-link {
    display: block;
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 4);
    font-size: 1rem;
    font-weight: 500;
    color: var(--on-surface);
    text-decoration: none;
    transition: var(--transition);
  }
  
  .nav-link:hover, .nav-link:focus {
    text-decoration: none;
    color: var(--primary);
  }
  
  .nav-link.disabled {
    color: var(--on-surface-variant);
    pointer-events: none;
    cursor: default;
  }
  
  .nav-tabs {
    border-bottom: 1px solid var(--outline);
  }
  
  .nav-tabs .nav-link {
    margin-bottom: -1px;
    background: none;
    border: 1px solid transparent;
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
  }
  
  .nav-tabs .nav-link:hover, .nav-tabs .nav-link:focus {
    border-color: var(--surface-variant) var(--surface-variant) var(--outline);
    isolation: isolate;
  }
  
  .nav-tabs .nav-link.disabled {
    color: var(--on-surface-variant);
    background-color: transparent;
    border-color: transparent;
  }
  
  .nav-tabs .nav-link.active,
  .nav-tabs .nav-item.show .nav-link {
    color: var(--primary);
    background-color: var(--surface);
    border-color: var(--outline) var(--outline) var(--surface);
  }
  
  .nav-tabs .dropdown-menu {
    margin-top: -1px;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }
  
  .nav-pills .nav-link {
    background: none;
    border: 0;
    border-radius: var(--border-radius);
  }
  
  .nav-pills .nav-link.active,
  .nav-pills .show > .nav-link {
    color: var(--on-primary);
    background-color: var(--primary);
  }
  
  .nav-fill > .nav-link,
  .nav-fill .nav-item {
    flex: 1 1 auto;
    text-align: center;
  }
  
  .nav-justified > .nav-link,
  .nav-justified .nav-item {
    flex-basis: 0;
    flex-grow: 1;
    text-align: center;
  }
  
  .nav-fill .nav-item .nav-link,
  .nav-justified .nav-item .nav-link {
    width: 100%;
  }
  
  .tab-content > .tab-pane {
    display: none;
  }
  
  .tab-content > .active {
    display: block;
  }
  
  .navbar-nav .nav-link {
    padding-right: 0;
    padding-left: 0;
  }
  
  .navbar-nav .dropdown-menu {
    position: static;
  }
  
  .breadcrumb {
    display: flex;
    flex-wrap: wrap;
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 4);
    margin-bottom: 1rem;
    list-style: none;
    background-color: var(--surface-variant);
    border-radius: var(--border-radius);
  }
  
  .breadcrumb-item + .breadcrumb-item {
    padding-left: calc(var(--spacing-unit) * 2);
  }
  
  .breadcrumb-item + .breadcrumb-item::before {
    float: left;
    padding-right: calc(var(--spacing-unit) * 2);
    color: var(--on-surface-variant);
    content: var(--breadcrumb-divider, "/") /* rtl: var(--breadcrumb-divider, "/") */;
  }
  
  .breadcrumb-item.active {
    color: var(--on-surface-variant);
  }
  
  .pagination {
    display: flex;
    padding-left: 0;
    list-style: none;
    border-radius: var(--border-radius);
  }
  
  .page-link {
    position: relative;
    display: block;
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 3);
    margin-left: -1px;
    line-height: 1.25;
    color: var(--primary);
    background-color: var(--surface);
    border: 1px solid var(--outline);
  }
  
  .page-link:hover {
    z-index: 2;
    color: var(--primary);
    text-decoration: none;
    background-color: var(--surface-variant);
    border-color: var(--outline);
  }
  
  .page-link:focus {
    z-index: 3;
    outline: 0;
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary), transparent 70%);
  }
  
  .page-item:first-child .page-link {
    margin-left: 0;
    border-top-left-radius: var(--border-radius);
    border-bottom-left-radius: var(--border-radius);
  }
  
  .page-item:last-child .page-link {
    border-top-right-radius: var(--border-radius);
    border-bottom-right-radius: var(--border-radius);
  }
  
  .page-item.active .page-link {
    z-index: 3;
    color: var(--on-primary);
    background-color: var(--primary);
    border-color: var(--primary);
  }
  
  .page-item.disabled .page-link {
    color: var(--on-surface-variant);
    pointer-events: none;
    cursor: auto;
    background-color: var(--surface);
    border-color: var(--outline);
  }
  
  .pagination-lg .page-link {
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
    font-size: 1.125rem;
    line-height: 1.5;
  }
  
  .pagination-lg .page-item:first-child .page-link {
    border-top-left-radius: calc(var(--border-radius) * 1.5);
    border-bottom-left-radius: calc(var(--border-radius) * 1.5);
  }
  
  .pagination-lg .page-item:last-child .page-link {
    border-top-right-radius: calc(var(--border-radius) * 1.5);
    border-bottom-right-radius: calc(var(--border-radius) * 1.5);
  }
  
  .pagination-sm .page-link {
    padding: calc(var(--spacing-unit) * 1) calc(var(--spacing-unit) * 2);
    font-size: 0.875rem;
    line-height: 1.5;
  }
  
  .pagination-sm .page-item:first-child .page-link {
    border-top-left-radius: calc(var(--border-radius) * 0.5);
    border-bottom-left-radius: calc(var(--border-radius) * 0.5);
  }
  
  .pagination-sm .page-item:last-child .page-link {
    border-top-right-radius: calc(var(--border-radius) * 0.5);
    border-bottom-right-radius: calc(var(--border-radius) * 0.5);
  }

  /* ===== MODALS ===== */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1050;
    display: none;
    width: 100%;
    height: 100%;
    overflow-x: hidden;
    overflow-y: auto;
    outline: 0;
    background-color: rgba(0, 0, 0, 0.5);
  }
  
  .modal-dialog {
    position: relative;
    width: auto;
    margin: calc(var(--spacing-unit) * 10);
    pointer-events: none;
  }
  
  .modal.fade .modal-dialog {
    transition: transform 0.3s ease-out;
    transform: translate(0, -50px);
  }
  
  .modal.show .modal-dialog {
    transform: none;
  }
  
  .modal.modal-static .modal-dialog {
    transform: scale(1.02);
  }
  
  .modal-dialog-scrollable {
    height: calc(100% - calc(var(--spacing-unit) * 10));
  }
  
  .modal-dialog-scrollable .modal-content {
    max-height: 100%;
    overflow: hidden;
  }
  
  .modal-dialog-scrollable .modal-body {
    overflow-y: auto;
  }
  
  .modal-dialog-centered {
    display: flex;
    align-items: center;
    min-height: calc(100% - calc(var(--spacing-unit) * 10));
  }
  
  .modal-content {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    pointer-events: auto;
    background-color: var(--surface);
    background-clip: padding-box;
    border: 1px solid var(--outline);
    border-radius: calc(var(--border-radius) * 2);
    outline: 0;
    box-shadow: var(--shadow-lg);
  }
  
  .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1040;
    width: 100vw;
    height: 100vh;
    background-color: #000;
  }
  
  .modal-backdrop.fade {
    opacity: 0;
  }
  
  .modal-backdrop.show {
    opacity: 0.5;
  }
  
  .modal-header {
    display: flex;
    flex-shrink: 0;
    align-items: center;
    justify-content: space-between;
    padding: calc(var(--spacing-unit) * 4);
    border-bottom: 1px solid var(--outline);
    border-top-left-radius: calc(calc(var(--border-radius) * 2) - 1px);
    border-top-right-radius: calc(calc(var(--border-radius) * 2) - 1px);
  }
  
  .modal-header .btn-close {
    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 2);
    margin: calc(calc(var(--spacing-unit) * -2)) calc(calc(var(--spacing-unit) * -2)) calc(calc(var(--spacing-unit) * -2)) auto;
  }
  
  .modal-title {
    margin-bottom: 0;
    line-height: 1.5;
  }
  
  .modal-body {
    position: relative;
    flex: 1 1 auto;
    padding: calc(var(--spacing-unit) * 4);
  }
  
  .modal-footer {
    display: flex;
    flex-wrap: wrap;
    flex-shrink: 0;
    align-items: center;
    justify-content: flex-end;
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
    border-top: 1px solid var(--outline);
    border-bottom-right-radius: calc(calc(var(--border-radius) * 2) - 1px);
    border-bottom-left-radius: calc(calc(var(--border-radius) * 2) - 1px);
  }
  
  .modal-footer > * {
    margin: calc(var(--spacing-unit) * 1);
  }
  
  @media (min-width: 576px) {
    .modal-dialog {
      max-width: 500px;
      margin: calc(var(--spacing-unit) * 10) auto;
    }
    
    .modal-dialog-scrollable {
      height: calc(100% - calc(var(--spacing-unit) * 10));
    }
    
    .modal-dialog-centered {
      min-height: calc(100% - calc(var(--spacing-unit) * 10));
    }
    
    .modal-sm {
      max-width: 300px;
    }
  }
  
  @media (min-width: 992px) {
    .modal-lg,
    .modal-xl {
      max-width: 800px;
    }
  }
  
  @media (min-width: 1200px) {
    .modal-xl {
      max-width: 1140px;
    }
  }
  
  .modal-fullscreen {
    width: 100vw;
    max-width: none;
    height: 100%;
    margin: 0;
  }
  
  .modal-fullscreen .modal-content {
    height: 100%;
    border: 0;
    border-radius: 0;
  }
  
  .modal-fullscreen .modal-header {
    border-radius: 0;
  }
  
  .modal-fullscreen .modal-body {
    overflow-y: auto;
  }
  
  .modal-fullscreen .modal-footer {
    border-radius: 0;
  }
  
  @media (max-width: 575.98px) {
    .modal-fullscreen-sm-down {
      width: 100vw;
      max-width: none;
      height: 100%;
      margin: 0;
    }
    
    .modal-fullscreen-sm-down .modal-content {
      height: 100%;
      border: 0;
      border-radius: 0;
    }
    
    .modal-fullscreen-sm-down .modal-header {
      border-radius: 0;
    }
    
    .modal-fullscreen-sm-down .modal-body {
      overflow-y: auto;
    }
    
    .modal-fullscreen-sm-down .modal-footer {
      border-radius: 0;
    }
  }
  
  @media (max-width: 767.98px) {
    .modal-fullscreen-md-down {
      width: 100vw;
      max-width: none;
      height: 100%;
      margin: 0;
    }
    
    .modal-fullscreen-md-down .modal-content {
      height: 100%;
      border: 0;
      border-radius: 0;
    }
    
    .modal-fullscreen-md-down .modal-header {
      border-radius: 0;
    }
    
    .modal-fullscreen-md-down .modal-body {
      overflow-y: auto;
    }
    
    .modal-fullscreen-md-down .modal-footer {
      border-radius: 0;
    }
  }
  
  @media (max-width: 991.98px) {
    .modal-fullscreen-lg-down {
      width: 100vw;
      max-width: none;
      height: 100%;
      margin: 0;
    }
    
    .modal-fullscreen-lg-down .modal-content {
      height: 100%;
      border: 0;
      border-radius: 0;
    }
    
    .modal-fullscreen-lg-down .modal-header {
      border-radius: 0;
    }
    
    .modal-fullscreen-lg-down .modal-body {
      overflow-y: auto;
    }
    
    .modal-fullscreen-lg-down .modal-footer {
      border-radius: 0;
    }
  }
  
  @media (max-width: 1199.98px) {
    .modal-fullscreen-xl-down {
      width: 100vw;
      max-width: none;
      height: 100%;
      margin: 0;
    }
    
    .modal-fullscreen-xl-down .modal-content {
      height: 100%;
      border: 0;
      border-radius: 0;
    }
    
    .modal-fullscreen-xl-down .modal-header {
      border-radius: 0;
    }
    
    .modal-fullscreen-xl-down .modal-body {
      overflow-y: auto;
    }
    
    .modal-fullscreen-xl-down .modal-footer {
      border-radius: 0;
    }
  }
  
  @media (max-width: 1399.98px) {
    .modal-fullscreen-xxl-down {
      width: 100vw;
      max-width: none;
      height: 100%;
      margin: 0;
    }
    
    .modal-fullscreen-xxl-down .modal-content {
      height: 100%;
      border: 0;
      border-radius: 0;
    }
    
    .modal-fullscreen-xxl-down .modal-header {
      border-radius: 0;
    }
    
    .modal-fullscreen-xxl-down .modal-body {
      overflow-y: auto;
    }
    
    .modal-fullscreen-xxl-down .modal-footer {
      border-radius: 0;
    }
  }

  /* ===== ALERTS ===== */
  .alert {
    position: relative;
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
    margin-bottom: calc(var(--spacing-unit) * 4);
    border: 1px solid transparent;
    border-radius: var(--border-radius);
  }
  
  .alert-heading {
    color: inherit;
  }
  
  .alert-link {
    font-weight: 700;
  }
  
  .alert-dismissible {
    padding-right: calc(var(--spacing-unit) * 12);
  }
  
  .alert-dismissible .btn-close {
    position: absolute;
    top: 0;
    right: 0;
    z-index: 2;
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
    color: inherit;
  }
  
  .alert-primary {
    color: var(--on-primary);
    background-color: var(--primary-container);
    border-color: var(--primary);
  }
  
  .alert-primary .alert-link {
    color: var(--on-primary);
  }
  
  .alert-secondary {
    color: var(--on-secondary);
    background-color: var(--secondary-container);
    border-color: var(--secondary);
  }
  
  .alert-secondary .alert-link {
    color: var(--on-secondary);
  }
  
  .alert-success {
    color: white;
    background-color: color-mix(in srgb, var(--success), transparent 80%);
    border-color: var(--success);
  }
  
  .alert-success .alert-link {
    color: white;
  }
  
  .alert-info {
    color: white;
    background-color: color-mix(in srgb, var(--info), transparent 80%);
    border-color: var(--info);
  }
  
  .alert-info .alert-link {
    color: white;
  }
  
  .alert-warning {
    color: black;
    background-color: color-mix(in srgb, var(--warning), transparent 80%);
    border-color: var(--warning);
  }
  
  .alert-warning .alert-link {
    color: black;
  }
  
  .alert-danger {
    color: white;
    background-color: color-mix(in srgb, var(--danger), transparent 80%);
    border-color: var(--danger);
  }
  
  .alert-danger .alert-link {
    color: white;
  }
  
  .alert-light {
    color: #000;
    background-color: #f8f9fa;
    border-color: #f8f9fa;
  }
  
  .alert-light .alert-link {
    color: #000;
  }
  
  .alert-dark {
    color: #fff;
    background-color: #212529;
    border-color: #212529;
  }
  
  .alert-dark .alert-link {
    color: #fff;
  }

  /* ===== BADGES ===== */
  .badge {
    display: inline-block;
    padding: calc(var(--spacing-unit) * 1) calc(var(--spacing-unit) * 3);
    font-size: 0.75em;
    font-weight: 700;
    line-height: 1;
    color: #fff;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: var(--border-radius);
  }
  
  .badge:empty {
    display: none;
  }
  
  .btn .badge {
    position: relative;
    top: -1px;
  }
  
  .badge-primary {
    color: var(--on-primary);
    background-color: var(--primary);
  }
  
  .badge-secondary {
    color: var(--on-secondary);
    background-color: var(--secondary);
  }
  
  .badge-success {
    color: white;
    background-color: var(--success);
  }
  
  .badge-info {
    color: white;
    background-color: var(--info);
  }
  
  .badge-warning {
    color: black;
    background-color: var(--warning);
  }
  
  .badge-danger {
    color: white;
    background-color: var(--danger);
  }
  
  .badge-light {
    color: #000;
    background-color: #f8f9fa;
  }
  
  .badge-dark {
    color: #fff;
    background-color: #212529;
  }
  
  .rounded-pill {
    padding-right: calc(var(--spacing-unit) * 4);
    padding-left: calc(var(--spacing-unit) * 4);
    border-radius: 50rem;
  }

  /* ===== PROGRESS ===== */
  .progress {
    display: flex;
    height: 1rem;
    overflow: hidden;
    font-size: 0.75rem;
    background-color: var(--surface-variant);
    border-radius: var(--border-radius);
  }
  
  .progress-bar {
    display: flex;
    flex-direction: column;
    justify-content: center;
    overflow: hidden;
    color: #fff;
    text-align: center;
    white-space: nowrap;
    background-color: var(--primary);
    transition: width 0.6s ease;
  }
  
  @media (prefers-reduced-motion: reduce) {
    .progress-bar {
      transition: none;
    }
  }
  
  .progress-bar-striped {
    background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
    background-size: 1rem 1rem;
  }
  
  .progress-bar-animated {
    animation: progress-bar-stripes 1s linear infinite;
  }
  
  @keyframes progress-bar-stripes {
    0% {
      background-position: 1rem 0;
    }
    100% {
      background-position: 0 0;
    }
  }

  /* ===== LIST GROUP ===== */
  .list-group {
    display: flex;
    flex-direction: column;
    padding-left: 0;
    margin-bottom: 0;
    border-radius: var(--border-radius);
  }
  
  .list-group-item {
    position: relative;
    display: block;
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
    color: var(--on-surface);
    text-decoration: none;
    background-color: var(--surface);
    border: 1px solid var(--outline);
  }
  
  .list-group-item:first-child {
    border-top-left-radius: inherit;
    border-top-right-radius: inherit;
  }
  
  .list-group-item:last-child {
    border-bottom-right-radius: inherit;
    border-bottom-left-radius: inherit;
  }
  
  .list-group-item.disabled, .list-group-item:disabled {
    color: var(--on-surface-variant);
    pointer-events: none;
    background-color: var(--surface);
  }
  
  .list-group-item.active {
    z-index: 2;
    color: var(--on-primary);
    background-color: var(--primary);
    border-color: var(--primary);
  }
  
  .list-group-item + .list-group-item {
    border-top-width: 0;
  }
  
  .list-group-item + .list-group-item.active {
    margin-top: -1px;
    border-top-width: 1px;
  }
  
  .list-group-horizontal {
    flex-direction: row;
  }
  
  .list-group-horizontal > .list-group-item:first-child {
    border-bottom-left-radius: var(--border-radius);
    border-top-right-radius: 0;
  }
  
  .list-group-horizontal > .list-group-item:last-child {
    border-top-right-radius: var(--border-radius);
    border-bottom-left-radius: 0;
  }
  
  .list-group-horizontal > .list-group-item.active {
    margin-top: 0;
  }
  
  .list-group-horizontal > .list-group-item + .list-group-item {
    border-top-width: 1px;
    border-left-width: 0;
  }
  
  .list-group-horizontal > .list-group-item + .list-group-item.active {
    margin-left: -1px;
    border-left-width: 1px;
  }
  
  @media (min-width: 576px) {
    .list-group-horizontal-sm {
      flex-direction: row;
    }
    
    .list-group-horizontal-sm > .list-group-item:first-child {
      border-bottom-left-radius: var(--border-radius);
      border-top-right-radius: 0;
    }
    
    .list-group-horizontal-sm > .list-group-item:last-child {
      border-top-right-radius: var(--border-radius);
      border-bottom-left-radius: 0;
    }
    
    .list-group-horizontal-sm > .list-group-item.active {
      margin-top: 0;
    }
    
    .list-group-horizontal-sm > .list-group-item + .list-group-item {
      border-top-width: 1px;
      border-left-width: 0;
    }
    
    .list-group-horizontal-sm > .list-group-item + .list-group-item.active {
      margin-left: -1px;
      border-left-width: 1px;
    }
  }
  
  @media (min-width: 768px) {
    .list-group-horizontal-md {
      flex-direction: row;
    }
    
    .list-group-horizontal-md > .list-group-item:first-child {
      border-bottom-left-radius: var(--border-radius);
      border-top-right-radius: 0;
    }
    
    .list-group-horizontal-md > .list-group-item:last-child {
      border-top-right-radius: var(--border-radius);
      border-bottom-left-radius: 0;
    }
    
    .list-group-horizontal-md > .list-group-item.active {
      margin-top: 0;
    }
    
    .list-group-horizontal-md > .list-group-item + .list-group-item {
      border-top-width: 1px;
      border-left-width: 0;
    }
    
    .list-group-horizontal-md > .list-group-item + .list-group-item.active {
      margin-left: -1px;
      border-left-width: 1px;
    }
  }
  
  @media (min-width: 992px) {
    .list-group-horizontal-lg {
      flex-direction: row;
    }
    
    .list-group-horizontal-lg > .list-group-item:first-child {
      border-bottom-left-radius: var(--border-radius);
      border-top-right-radius: 0;
    }
    
    .list-group-horizontal-lg > .list-group-item:last-child {
      border-top-right-radius: var(--border-radius);
      border-bottom-left-radius: 0;
    }
    
    .list-group-horizontal-lg > .list-group-item.active {
      margin-top: 0;
    }
    
    .list-group-horizontal-lg > .list-group-item + .list-group-item {
      border-top-width: 1px;
      border-left-width: 0;
    }
    
    .list-group-horizontal-lg > .list-group-item + .list-group-item.active {
      margin-left: -1px;
      border-left-width: 1px;
    }
  }
  
  @media (min-width: 1200px) {
    .list-group-horizontal-xl {
      flex-direction: row;
    }
    
    .list-group-horizontal-xl > .list-group-item:first-child {
      border-bottom-left-radius: var(--border-radius);
      border-top-right-radius: 0;
    }
    
    .list-group-horizontal-xl > .list-group-item:last-child {
      border-top-right-radius: var(--border-radius);
      border-bottom-left-radius: 0;
    }
    
    .list-group-horizontal-xl > .list-group-item.active {
      margin-top: 0;
    }
    
    .list-group-horizontal-xl > .list-group-item + .list-group-item {
      border-top-width: 1px;
      border-left-width: 0;
    }
    
    .list-group-horizontal-xl > .list-group-item + .list-group-item.active {
      margin-left: -1px;
      border-left-width: 1px;
    }
  }
  
  @media (min-width: 1400px) {
    .list-group-horizontal-xxl {
      flex-direction: row;
    }
    
    .list-group-horizontal-xxl > .list-group-item:first-child {
      border-bottom-left-radius: var(--border-radius);
      border-top-right-radius: 0;
    }
    
    .list-group-horizontal-xxl > .list-group-item:last-child {
      border-top-right-radius: var(--border-radius);
      border-bottom-left-radius: 0;
    }
    
    .list-group-horizontal-xxl > .list-group-item.active {
      margin-top: 0;
    }
    
    .list-group-horizontal-xxl > .list-group-item + .list-group-item {
      border-top-width: 1px;
      border-left-width: 0;
    }
    
    .list-group-horizontal-xxl > .list-group-item + .list-group-item.active {
      margin-left: -1px;
      border-left-width: 1px;
    }
  }
  
  .list-group-flush {
    border-radius: 0;
  }
  
  .list-group-flush > .list-group-item {
    border-width: 0 0 1px;
  }
  
  .list-group-flush > .list-group-item:last-child {
    border-bottom-width: 0;
  }
  
  .list-group-item-primary {
    color: var(--on-primary);
    background-color: var(--primary-container);
  }
  
  .list-group-item-primary.list-group-item-action:hover, .list-group-item-primary.list-group-item-action:focus {
    color: var(--on-primary);
    background-color: color-mix(in srgb, var(--primary-container), #000 10%);
  }
  
  .list-group-item-secondary {
    color: var(--on-secondary);
    background-color: var(--secondary-container);
  }
  
  .list-group-item-secondary.list-group-item-action:hover, .list-group-item-secondary.list-group-item-action:focus {
    color: var(--on-secondary);
    background-color: color-mix(in srgb, var(--secondary-container), #000 10%);
  }
  
  .list-group-item-success {
    color: white;
    background-color: color-mix(in srgb, var(--success), transparent 80%);
  }
  
  .list-group-item-success.list-group-item-action:hover, .list-group-item-success.list-group-item-action:focus {
    color: white;
    background-color: color-mix(in srgb, var(--success), transparent 70%);
  }
  
  .list-group-item-info {
    color: white;
    background-color: color-mix(in srgb, var(--info), transparent 80%);
  }
  
  .list-group-item-info.list-group-item-action:hover, .list-group-item-info.list-group-item-action:focus {
    color: white;
    background-color: color-mix(in srgb, var(--info), transparent 70%);
  }
  
  .list-group-item-warning {
    color: black;
    background-color: color-mix(in srgb, var(--warning), transparent 80%);
  }
  
  .list-group-item-warning.list-group-item-action:hover, .list-group-item-warning.list-group-item-action:focus {
    color: black;
    background-color: color-mix(in srgb, var(--warning), transparent 70%);
  }
  
  .list-group-item-danger {
    color: white;
    background-color: color-mix(in srgb, var(--danger), transparent 80%);
  }
  
  .list-group-item-danger.list-group-item-action:hover, .list-group-item-danger.list-group-item-action:focus {
    color: white;
    background-color: color-mix(in srgb, var(--danger), transparent 70%);
  }
  
  .list-group-item-light {
    color: #000;
    background-color: #f8f9fa;
  }
  
  .list-group-item-light.list-group-item-action:hover, .list-group-item-light.list-group-item-action:focus {
    color: #000;
    background-color: #e2e6ea;
  }
  
  .list-group-item-dark {
    color: #fff;
    background-color: #212529;
  }
  
  .list-group-item-dark.list-group-item-action:hover, .list-group-item-dark.list-group-item-action:focus {
    color: #fff;
    background-color: #1d2124;
  }

  /* ===== TOASTS ===== */
  .toast-container {
    position: absolute;
    z-index: 1055;
    width: max-content;
    max-width: 100%;
    pointer-events: none;
  }
  
  .toast-container > :not(:last-child) {
    margin-bottom: calc(var(--spacing-unit) * 4);
  }
  
  .toast {
    max-width: 350px;
    font-size: 0.875rem;
    background-color: var(--surface);
    background-clip: padding-box;
    border: 1px solid var(--outline);
    box-shadow: var(--shadow-lg);
    opacity: 0;
    border-radius: var(--border-radius);
  }
  
  .toast:not(.showing):not(.show) {
    opacity: 0;
  }
  
  .toast.hide {
    display: none;
  }
  
  .toast-container {
    position: fixed;
    z-index: 1055;
  }
  
  .toast-container > div {
    position: relative;
    width: auto;
    max-width: 100%;
    pointer-events: auto;
  }
  
  .toast-header {
    display: flex;
    align-items: center;
    padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 4);
    color: var(--on-surface);
    background-color: var(--surface);
    background-clip: padding-box;
    border-bottom: 1px solid var(--outline);
    border-top-left-radius: calc(calc(var(--border-radius) * 2) - 1px);
    border-top-right-radius: calc(calc(var(--border-radius) * 2) - 1px);
  }
  
  .toast-header .btn-close {
    margin-right: calc(var(--spacing-unit) * -2);
    margin-left: calc(var(--spacing-unit) * 2);
  }
  
  .toast-body {
    padding: calc(var(--spacing-unit) * 4);
    word-wrap: break-word;
  }

  /* ===== SPINNERS ===== */
  .spinner-border {
    display: inline-block;
    width: 2rem;
    height: 2rem;
    vertical-align: text-bottom;
    border: 0.25em solid currentColor;
    border-right-color: transparent;
    border-radius: 50%;
    animation: spinner-border 0.75s linear infinite;
  }
  
  .spinner-border-sm {
    width: 1rem;
    height: 1rem;
    border-width: 0.2em;
  }
  
  @keyframes spinner-border {
    to {
      transform: rotate(360deg);
    }
  }
  
  .spinner-grow {
    display: inline-block;
    width: 2rem;
    height: 2rem;
    vertical-align: text-bottom;
    background-color: currentColor;
    border-radius: 50%;
    opacity: 0;
    animation: spinner-grow 0.75s linear infinite;
  }
  
  .spinner-grow-sm {
    width: 1rem;
    height: 1rem;
  }
  
  @keyframes spinner-grow {
    0% {
      transform: scale(0);
    }
    50% {
      opacity: 1;
      transform: none;
    }
    100% {
      opacity: 0;
      transform: scale(1);
    }
  }
  
  @media (prefers-reduced-motion: reduce) {
    .spinner-border,
    .spinner-grow {
      animation-duration: 1.5s;
    }
  }

  /* ===== ALIGNMENT ===== */
  .align-baseline {
    vertical-align: baseline !important;
  }
  
  .align-top {
    vertical-align: top !important;
  }
  
  .align-middle {
    vertical-align: middle !important;
  }
  
  .align-bottom {
    vertical-align: bottom !important;
  }
  
  .align-text-bottom {
    vertical-align: text-bottom !important;
  }
  
  .align-text-top {
    vertical-align: text-top !important;
  }

  /* ===== BACKGROUNDS ===== */
  .bg-body {
    background-color: var(--background) !important;
  }
  
  .bg-white {
    background-color: #fff !important;
  }
  
  .bg-transparent {
    background-color: transparent !important;
  }

  /* ===== BORDERS ===== */
  .border {
    border: 1px solid var(--outline) !important;
  }
  
  .border-0 {
    border: 0 !important;
  }
  
  .border-top {
    border-top: 1px solid var(--outline) !important;
  }
  
  .border-top-0 {
    border-top: 0 !important;
  }
  
  .border-end {
    border-right: 1px solid var(--outline) !important;
  }
  
  .border-end-0 {
    border-right: 0 !important;
  }
  
  .border-bottom {
    border-bottom: 1px solid var(--outline) !important;
  }
  
  .border-bottom-0 {
    border-bottom: 0 !important;
  }
  
  .border-start {
    border-left: 1px solid var(--outline) !important;
  }
  
  .border-start-0 {
    border-left: 0 !important;
  }
  
  .border-primary {
    border-color: var(--primary) !important;
  }
  
  .border-secondary {
    border-color: var(--secondary) !important;
  }
  
  .border-success {
    border-color: var(--success) !important;
  }
  
  .border-info {
    border-color: var(--info) !important;
  }
  
  .border-warning {
    border-color: var(--warning) !important;
  }
  
  .border-danger {
    border-color: var(--danger) !important;
  }
  
  .border-light {
    border-color: #f8f9fa !important;
  }
  
  .border-dark {
    border-color: #212529 !important;
  }
  
  .border-white {
    border-color: #fff !important;
  }
  
  .border-1 {
    border-width: 1px !important;
  }
  
  .border-2 {
    border-width: 2px !important;
  }
  
  .border-3 {
    border-width: 3px !important;
  }
  
  .border-4 {
    border-width: 4px !important;
  }
  
  .border-5 {
    border-width: 5px !important;
  }
  
  .w-25 {
    width: 25% !important;
  }
  
  .w-50 {
    width: 50% !important;
  }
  
  .w-75 {
    width: 75% !important;
  }
  
  .w-100 {
    width: 100% !important;
  }
  
  .w-auto {
    width: auto !important;
  }
  
  .mw-100 {
    max-width: 100% !important;
  }
  
  .vw-100 {
    width: 100vw !important;
  }
  
  .min-vw-100 {
    min-width: 100vw !important;
  }
  
  .h-25 {
    height: 25% !important;
  }
  
  .h-50 {
    height: 50% !important;
  }
  
  .h-75 {
    height: 75% !important;
  }
  
  .h-100 {
    height: 100% !important;
  }
  
  .h-auto {
    height: auto !important;
  }
  
  .mh-100 {
    max-height: 100% !important;
  }
  
  .vh-100 {
    height: 100vh !important;
  }
  
  .min-vh-100 {
    min-height: 100vh !important;
  }
  
  .flex-fill {
    flex: 1 1 auto !important;
  }
  
  .flex-row {
    flex-direction: row !important;
  }
  
  .flex-column {
    flex-direction: column !important;
  }
  
  .flex-row-reverse {
    flex-direction: row-reverse !important;
  }
  
  .flex-column-reverse {
    flex-direction: column-reverse !important;
  }
  
  .flex-grow-0 {
    flex-grow: 0 !important;
  }
  
  .flex-grow-1 {
    flex-grow: 1 !important;
  }
  
  .flex-shrink-0 {
    flex-shrink: 0 !important;
  }
  
  .flex-shrink-1 {
    flex-shrink: 1 !important;
  }
  
  .flex-wrap {
    flex-wrap: wrap !important;
  }
  
  .flex-nowrap {
    flex-wrap: nowrap !important;
  }
  
  .flex-wrap-reverse {
    flex-wrap: wrap-reverse !important;
  }
  
  .gap-0 {
    gap: 0 !important;
  }
  
  .gap-1 {
    gap: 0.25rem !important;
  }
  
  .gap-2 {
    gap: 0.5rem !important;
  }
  
  .gap-3 {
    gap: 1rem !important;
  }
  
  .gap-4 {
    gap: 1.5rem !important;
  }
  
  .gap-5 {
    gap: 3rem !important;
  }
  
  .justify-content-start {
    justify-content: flex-start !important;
  }
  
  .justify-content-end {
    justify-content: flex-end !important;
  }
  
  .justify-content-center {
    justify-content: center !important;
  }
  
  .justify-content-between {
    justify-content: space-between !important;
  }
  
  .justify-content-around {
    justify-content: space-around !important;
  }
  
  .justify-content-evenly {
    justify-content: space-evenly !important;
  }
  
  .align-items-start {
    align-items: flex-start !important;
  }
  
  .align-items-end {
    align-items: flex-end !important;
  }
  
  .align-items-center {
    align-items: center !important;
  }
  
  .align-items-baseline {
    align-items: baseline !important;
  }
  
  .align-items-stretch {
    align-items: stretch !important;
  }
  
  .align-content-start {
    align-content: flex-start !important;
  }
  
  .align-content-end {
    align-content: flex-end !important;
  }
  
  .align-content-center {
    align-content: center !important;
  }
  
  .align-content-between {
    align-content: space-between !important;
  }
  
  .align-content-around {
    align-content: space-around !important;
  }
  
  .align-content-stretch {
    align-content: stretch !important;
  }
  
  .align-self-auto {
    align-self: auto !important;
  }
  
  .align-self-start {
    align-self: flex-start !important;
  }
  
  .align-self-end {
    align-self: flex-end !important;
  }
  
  .align-self-center {
    align-self: center !important;
  }
  
  .align-self-baseline {
    align-self: baseline !important;
  }
  
  .align-self-stretch {
    align-self: stretch !important;
  }
  
  .order-first {
    order: -1 !important;
  }
  
  .order-0 {
    order: 0 !important;
  }
  
  .order-1 {
    order: 1 !important;
  }
  
  .order-2 {
    order: 2 !important;
  }
  
  .order-3 {
    order: 3 !important;
  }
  
  .order-4 {
    order: 4 !important;
  }
  
  .order-5 {
    order: 5 !important;
  }
  
  .order-last {
    order: 6 !important;
  }
  
  .m-0 {
    margin: 0 !important;
  }
  
  .m-1 {
    margin: 0.25rem !important;
  }
  
  .m-2 {
    margin: 0.5rem !important;
  }
  
  .m-3 {
    margin: 1rem !important;
  }
  
  .m-4 {
    margin: 1.5rem !important;
  }
  
  .m-5 {
    margin: 3rem !important;
  }
  
  .m-auto {
    margin: auto !important;
  }
  
  .mx-0 {
    margin-right: 0 !important;
    margin-left: 0 !important;
  }
  
  .mx-1 {
    margin-right: 0.25rem !important;
    margin-left: 0.25rem !important;
  }
  
  .mx-2 {
    margin-right: 0.5rem !important;
    margin-left: 0.5rem !important;
  }
  
  .mx-3 {
    margin-right: 1rem !important;
    margin-left: 1rem !important;
  }
  
  .mx-4 {
    margin-right: 1.5rem !important;
    margin-left: 1.5rem !important;
  }
  
  .mx-5 {
    margin-right: 3rem !important;
    margin-left: 3rem !important;
  }
  
  .mx-auto {
    margin-right: auto !important;
    margin-left: auto !important;
  }
  
  .my-0 {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
  }
  
  .my-1 {
    margin-top: 0.25rem !important;
    margin-bottom: 0.25rem !important;
  }
  
  .my-2 {
    margin-top: 0.5rem !important;
    margin-bottom: 0.5rem !important;
  }
  
  .my-3 {
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
  }
  
  .my-4 {
    margin-top: 1.5rem !important;
    margin-bottom: 1.5rem !important;
  }
  
  .my-5 {
    margin-top: 3rem !important;
    margin-bottom: 3rem !important;
  }
  
  .my-auto {
    margin-top: auto !important;
    margin-bottom: auto !important;
  }
  
  .mt-0 {
    margin-top: 0 !important;
  }
  
  .mt-1 {
    margin-top: 0.25rem !important;
  }
  
  .mt-2 {
    margin-top: 0.5rem !important;
  }
  
  .mt-3 {
    margin-top: 1rem !important;
  }
  
  .mt-4 {
    margin-top: 1.5rem !important;
  }
  
  .mt-5 {
    margin-top: 3rem !important;
  }
  
  .mt-auto {
    margin-top: auto !important;
  }
  
  .me-0 {
    margin-right: 0 !important;
  }
  
  .me-1 {
    margin-right: 0.25rem !important;
  }
  
  .me-2 {
    margin-right: 0.5rem !important;
  }
  
  .me-3 {
    margin-right: 1rem !important;
  }
  
  .me-4 {
    margin-right: 1.5rem !important;
  }
  
  .me-5 {
    margin-right: 3rem !important;
  }
  
  .me-auto {
    margin-right: auto !important;
  }
  
  .mb-0 {
    margin-bottom: 0 !important;
  }
  
  .mb-1 {
    margin-bottom: 0.25rem !important;
  }
  
  .mb-2 {
    margin-bottom: 0.5rem !important;
  }
  
  .mb-3 {
    margin-bottom: 1rem !important;
  }
  
  .mb-4 {
    margin-bottom: 1.5rem !important;
  }
  
  .mb-5 {
    margin-bottom: 3rem !important;
  }
  
  .mb-auto {
    margin-bottom: auto !important;
  }
  
  .ms-0 {
    margin-left: 0 !important;
  }
  
  .ms-1 {
    margin-left: 0.25rem !important;
  }
  
  .ms-2 {
    margin-left: 0.5rem !important;
  }
  
  .ms-3 {
    margin-left: 1rem !important;
  }
  
  .ms-4 {
    margin-left: 1.5rem !important;
  }
  
  .ms-5 {
    margin-left: 3rem !important;
  }
  
  .ms-auto {
    margin-left: auto !important;
  }
  
  .p-0 {
    padding: 0 !important;
  }
  
  .p-1 {
    padding: 0.25rem !important;
  }
  
  .p-2 {
    padding: 0.5rem !important;
  }
  
  .p-3 {
    padding: 1rem !important;
  }
  
  .p-4 {
    padding: 1.5rem !important;
  }
  
  .p-5 {
    padding: 3rem !important;
  }
  
  .px-0 {
    padding-right: 0 !important;
    padding-left: 0 !important;
  }
  
  .px-1 {
    padding-right: 0.25rem !important;
    padding-left: 0.25rem !important;
  }
  
  .px-2 {
    padding-right: 0.5rem !important;
    padding-left: 0.5rem !important;
  }
  
  .px-3 {
    padding-right: 1rem !important;
    padding-left: 1rem !important;
  }
  
  .px-4 {
    padding-right: 1.5rem !important;
    padding-left: 1.5rem !important;
  }
  
  .px-5 {
    padding-right: 3rem !important;
    padding-left: 3rem !important;
  }
  
  .py-0 {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }
  
  .py-1 {
    padding-top: 0.25rem !important;
    padding-bottom: 0.25rem !important;
  }
  
  .py-2 {
    padding-top: 0.5rem !important;
    padding-bottom: 0.5rem !important;
  }
  
  .py-3 {
    padding-top: 1rem !important;
    padding-bottom: 1rem !important;
  }
  
  .py-4 {
    padding-top: 1.5rem !important;
    padding-bottom: 1.5rem !important;
  }
  
  .py-5 {
    padding-top: 3rem !important;
    padding-bottom: 3rem !important;
  }
  
  .pt-0 {
    padding-top: 0 !important;
  }
  
  .pt-1 {
    padding-top: 0.25rem !important;
  }
  
  .pt-2 {
    padding-top: 0.5rem !important;
  }
  
  .pt-3 {
    padding-top: 1rem !important;
  }
  
  .pt-4 {
    padding-top: 1.5rem !important;
  }
  
  .pt-5 {
    padding-top: 3rem !important;
  }
  
  .pe-0 {
    padding-right: 0 !important;
  }
  
  .pe-1 {
    padding-right: 0.25rem !important;
  }
  
  .pe-2 {
    padding-right: 0.5rem !important;
  }
  
  .pe-3 {
    padding-right: 1rem !important;
  }
  
  .pe-4 {
    padding-right: 1.5rem !important;
  }
  
  .pe-5 {
    padding-right: 3rem !important;
  }
  
  .pb-0 {
    padding-bottom: 0 !important;
  }
  
  .pb-1 {
    padding-bottom: 0.25rem !important;
  }
  
  .pb-2 {
    padding-bottom: 0.5rem !important;
  }
  
  .pb-3 {
    padding-bottom: 1rem !important;
  }
  
  .pb-4 {
    padding-bottom: 1.5rem !important;
  }
  
  .pb-5 {
    padding-bottom: 3rem !important;
  }
  
  .ps-0 {
    padding-left: 0 !important;
  }
  
  .ps-1 {
    padding-left: 0.25rem !important;
  }
  
  .ps-2 {
    padding-left: 0.5rem !important;
  }
  
  .ps-3 {
    padding-left: 1rem !important;
  }
  
  .ps-4 {
    padding-left: 1.5rem !important;
  }
  
  .ps-5 {
    padding-left: 3rem !important;
  }
  
  .font-monospace {
    font-family: var(--font-family-mono) !important;
  }
  
  .fs-1 {
    font-size: calc(1.375rem + 1.5vw) !important;
  }
  
  .fs-2 {
    font-size: calc(1.325rem + 0.9vw) !important;
  }
  
  .fs-3 {
    font-size: calc(1.3rem + 0.6vw) !important;
  }
  
  .fs-4 {
    font-size: calc(1.275rem + 0.3vw) !important;
  }
  
  .fs-5 {
    font-size: 1.25rem !important;
  }
  
  .fs-6 {
    font-size: 1rem !important;
  }
  
  .fst-italic {
    font-style: italic !important;
  }
  
  .fst-normal {
    font-style: normal !important;
  }
  
  .fw-light {
    font-weight: 300 !important;
  }
  
  .fw-lighter {
    font-weight: lighter !important;
  }
  
  .fw-normal {
    font-weight: 400 !important;
  }
  
  .fw-bold {
    font-weight: 700 !important;
  }
  
  .fw-bolder {
    font-weight: bolder !important;
  }
  
  .lh-1 {
    line-height: 1 !important;
  }
  
  .lh-sm {
    line-height: 1.25 !important;
  }
  
  .lh-base {
    line-height: 1.5 !important;
  }
  
  .lh-lg {
    line-height: 2 !important;
  }
  
  .text-start {
    text-align: left !important;
  }
  
  .text-end {
    text-align: right !important;
  }
  
  .text-center {
    text-align: center !important;
  }
  
  .text-decoration-none {
    text-decoration: none !important;
  }
  
  .text-decoration-underline {
    text-decoration: underline !important;
  }
  
  .text-decoration-line-through {
    text-decoration: line-through !important;
  }
  
  .text-lowercase {
    text-transform: lowercase !important;
  }
  
  .text-uppercase {
    text-transform: uppercase !important;
  }
  
  .text-capitalize {
    text-transform: capitalize !important;
  }
  
  .text-wrap {
    white-space: normal !important;
  }
  
  .text-nowrap {
    white-space: nowrap !important;
  }
  
  .text-break {
    word-wrap: break-word !important;
    word-break: break-word !important;
  }
  
  .text-primary {
    color: var(--primary) !important;
  }
  
  .text-secondary {
    color: var(--secondary) !important;
  }
  
  .text-success {
    color: var(--success) !important;
  }
  
  .text-info {
    color: var(--info) !important;
  }
  
  .text-warning {
    color: var(--warning) !important;
  }
  
  .text-danger {
    color: var(--danger) !important;
  }
  
  .text-light {
    color: #f8f9fa !important;
  }
  
  .text-dark {
    color: #212529 !important;
  }
  
  .text-white {
    color: #fff !important;
  }
  
  .text-body {
    color: var(--on-background) !important;
  }
  
  .text-muted {
    color: var(--on-surface-variant) !important;
  }
  
  .text-black-50 {
    color: rgba(0, 0, 0, 0.5) !important;
  }
  
  .text-white-50 {
    color: rgba(255, 255, 255, 0.5) !important;
  }
  
  .text-reset {
    color: inherit !important;
  }
  
  .text-opacity-25 {
    --bs-text-opacity: 0.25;
  }
  
  .text-opacity-50 {
    --bs-text-opacity: 0.5;
  }
  
  .text-opacity-75 {
    --bs-text-opacity: 0.75;
  }
  
  .text-opacity-100 {
    --bs-text-opacity: 1;
  }
  
  .bg-primary {
    background-color: var(--primary) !important;
  }
  
  .bg-secondary {
    background-color: var(--secondary) !important;
  }
  
  .bg-success {
    background-color: var(--success) !important;
  }
  
  .bg-info {
    background-color: var(--info) !important;
  }
  
  .bg-warning {
    background-color: var(--warning) !important;
  }
  
  .bg-danger {
    background-color: var(--danger) !important;
  }
  
  .bg-light {
    background-color: #f8f9fa !important;
  }
  
  .bg-dark {
    background-color: #212529 !important;
  }
  
  .bg-body {
    background-color: var(--background) !important;
  }
  
  .bg-white {
    background-color: #fff !important;
  }
  
  .bg-transparent {
    background-color: transparent !important;
  }
  
  .bg-opacity-10 {
    --bs-bg-opacity: 0.1;
  }
  
  .bg-opacity-25 {
    --bs-bg-opacity: 0.25;
  }
  
  .bg-opacity-50 {
    --bs-bg-opacity: 0.5;
  }
  
  .bg-opacity-75 {
    --bs-bg-opacity: 0.75;
  }
  
  .bg-opacity-100 {
    --bs-bg-opacity: 1;
  }
  
  .bg-gradient {
    background-image: var(--bs-gradient) !important;
  }
  
  .user-select-all {
    user-select: all !important;
  }
  
  .user-select-auto {
    user-select: auto !important;
  }
  
  .user-select-none {
    user-select: none !important;
  }
  
  .pe-none {
    pointer-events: none !important;
  }
  
  .pe-auto {
    pointer-events: auto !important;
  }
  
  .rounded {
    border-radius: var(--border-radius) !important;
  }
  
  .rounded-0 {
    border-radius: 0 !important;
  }
  
  .rounded-1 {
    border-radius: calc(var(--border-radius) * 0.5) !important;
  }
  
  .rounded-2 {
    border-radius: var(--border-radius) !important;
  }
  
  .rounded-3 {
    border-radius: calc(var(--border-radius) * 1.5) !important;
  }
  
  .rounded-4 {
    border-radius: calc(var(--border-radius) * 2) !important;
  }
  
  .rounded-5 {
    border-radius: calc(var(--border-radius) * 3) !important;
  }
  
  .rounded-circle {
    border-radius: 50% !important;
  }
  
  .rounded-pill {
    border-radius: 50rem !important;
  }
  
  .rounded-top {
    border-top-left-radius: var(--border-radius) !important;
    border-top-right-radius: var(--border-radius) !important;
  }
  
  .rounded-end {
    border-top-right-radius: var(--border-radius) !important;
    border-bottom-right-radius: var(--border-radius) !important;
  }
  
  .rounded-bottom {
    border-bottom-right-radius: var(--border-radius) !important;
    border-bottom-left-radius: var(--border-radius) !important;
  }
  
  .rounded-start {
    border-bottom-left-radius: var(--border-radius) !important;
    border-top-left-radius: var(--border-radius) !important;
  }
  
  .visible {
    visibility: visible !important;
  }
  
  .invisible {
    visibility: hidden !important;
  }
  
  @media (min-width: 576px) {
    .float-sm-start {
      float: left !important;
    }
    
    .float-sm-end {
      float: right !important;
    }
    
    .float-sm-none {
      float: none !important;
    }
    
    .d-sm-inline {
      display: inline !important;
    }
    
    .d-sm-inline-block {
      display: inline-block !important;
    }
    
    .d-sm-block {
      display: block !important;
    }
    
    .d-sm-grid {
      display: grid !important;
    }
    
    .d-sm-table {
      display: table !important;
    }
    
    .d-sm-table-row {
      display: table-row !important;
    }
    
    .d-sm-table-cell {
      display: table-cell !important;
    }
    
    .d-sm-flex {
      display: flex !important;
    }
    
    .d-sm-inline-flex {
      display: inline-flex !important;
    }
    
    .d-sm-none {
      display: none !important;
    }
    
    .flex-sm-fill {
      flex: 1 1 auto !important;
    }
    
    .flex-sm-row {
      flex-direction: row !important;
    }
    
    .flex-sm-column {
      flex-direction: column !important;
    }
    
    .flex-sm-row-reverse {
      flex-direction: row-reverse !important;
    }
    
    .flex-sm-column-reverse {
      flex-direction: column-reverse !important;
    }
    
    .flex-sm-grow-0 {
      flex-grow: 0 !important;
    }
    
    .flex-sm-grow-1 {
      flex-grow: 1 !important;
    }
    
    .flex-sm-shrink-0 {
      flex-shrink: 0 !important;
    }
    
    .flex-sm-shrink-1 {
      flex-shrink: 1 !important;
    }
    
    .flex-sm-wrap {
      flex-wrap: wrap !important;
    }
    
    .flex-sm-nowrap {
      flex-wrap: nowrap !important;
    }
    
    .flex-sm-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    
    .gap-sm-0 {
      gap: 0 !important;
    }
    
    .gap-sm-1 {
      gap: 0.25rem !important;
    }
    
    .gap-sm-2 {
      gap: 0.5rem !important;
    }
    
    .gap-sm-3 {
      gap: 1rem !important;
    }
    
    .gap-sm-4 {
      gap: 1.5rem !important;
    }
    
    .gap-sm-5 {
      gap: 3rem !important;
    }
    
    .justify-content-sm-start {
      justify-content: flex-start !important;
    }
    
    .justify-content-sm-end {
      justify-content: flex-end !important;
    }
    
    .justify-content-sm-center {
      justify-content: center !important;
    }
    
    .justify-content-sm-between {
      justify-content: space-between !important;
    }
    
    .justify-content-sm-around {
      justify-content: space-around !important;
    }
    
    .justify-content-sm-evenly {
      justify-content: space-evenly !important;
    }
    
    .align-items-sm-start {
      align-items: flex-start !important;
    }
    
    .align-items-sm-end {
      align-items: flex-end !important;
    }
    
    .align-items-sm-center {
      align-items: center !important;
    }
    
    .align-items-sm-baseline {
      align-items: baseline !important;
    }
    
    .align-items-sm-stretch {
      align-items: stretch !important;
    }
    
    .align-content-sm-start {
      align-content: flex-start !important;
    }
    
    .align-content-sm-end {
      align-content: flex-end !important;
    }
    
    .align-content-sm-center {
      align-content: center !important;
    }
    
    .align-content-sm-between {
      align-content: space-between !important;
    }
    
    .align-content-sm-around {
      align-content: space-around !important;
    }
    
    .align-content-sm-stretch {
      align-content: stretch !important;
    }
    
    .align-self-sm-auto {
      align-self: auto !important;
    }
    
    .align-self-sm-start {
      align-self: flex-start !important;
    }
    
    .align-self-sm-end {
      align-self: flex-end !important;
    }
    
    .align-self-sm-center {
      align-self: center !important;
    }
    
    .align-self-sm-baseline {
      align-self: baseline !important;
    }
    
    .align-self-sm-stretch {
      align-self: stretch !important;
    }
    
    .order-sm-first {
      order: -1 !important;
    }
    
    .order-sm-0 {
      order: 0 !important;
    }
    
    .order-sm-1 {
      order: 1 !important;
    }
    
    .order-sm-2 {
      order: 2 !important;
    }
    
    .order-sm-3 {
      order: 3 !important;
    }
    
    .order-sm-4 {
      order: 4 !important;
    }
    
    .order-sm-5 {
      order: 5 !important;
    }
    
    .order-sm-last {
      order: 6 !important;
    }
    
    .m-sm-0 {
      margin: 0 !important;
    }
    
    .m-sm-1 {
      margin: 0.25rem !important;
    }
    
    .m-sm-2 {
      margin: 0.5rem !important;
    }
    
    .m-sm-3 {
      margin: 1rem !important;
    }
    
    .m-sm-4 {
      margin: 1.5rem !important;
    }
    
    .m-sm-5 {
      margin: 3rem !important;
    }
    
    .m-sm-auto {
      margin: auto !important;
    }
    
    .mx-sm-0 {
      margin-right: 0 !important;
      margin-left: 0 !important;
    }
    
    .mx-sm-1 {
      margin-right: 0.25rem !important;
      margin-left: 0.25rem !important;
    }
    
    .mx-sm-2 {
      margin-right: 0.5rem !important;
      margin-left: 0.5rem !important;
    }
    
    .mx-sm-3 {
      margin-right: 1rem !important;
      margin-left: 1rem !important;
    }
    
    .mx-sm-4 {
      margin-right: 1.5rem !important;
      margin-left: 1.5rem !important;
    }
    
    .mx-sm-5 {
      margin-right: 3rem !important;
      margin-left: 3rem !important;
    }
    
    .mx-sm-auto {
      margin-right: auto !important;
      margin-left: auto !important;
    }
    
    .my-sm-0 {
      margin-top: 0 !important;
      margin-bottom: 0 !important;
    }
    
    .my-sm-1 {
      margin-top: 0.25rem !important;
      margin-bottom: 0.25rem !important;
    }
    
    .my-sm-2 {
      margin-top: 0.5rem !important;
      margin-bottom: 0.5rem !important;
    }
    
    .my-sm-3 {
      margin-top: 1rem !important;
      margin-bottom: 1rem !important;
    }
    
    .my-sm-4 {
      margin-top: 1.5rem !important;
      margin-bottom: 1.5rem !important;
    }
    
    .my-sm-5 {
      margin-top: 3rem !important;
      margin-bottom: 3rem !important;
    }
    
    .my-sm-auto {
      margin-top: auto !important;
      margin-bottom: auto !important;
    }
    
    .mt-sm-0 {
      margin-top: 0 !important;
    }
    
    .mt-sm-1 {
      margin-top: 0.25rem !important;
    }
    
    .mt-sm-2 {
      margin-top: 0.5rem !important;
    }
    
    .mt-sm-3 {
      margin-top: 1rem !important;
    }
    
    .mt-sm-4 {
      margin-top: 1.5rem !important;
    }
    
    .mt-sm-5 {
      margin-top: 3rem !important;
    }
    
    .mt-sm-auto {
      margin-top: auto !important;
    }
    
    .me-sm-0 {
      margin-right: 0 !important;
    }
    
    .me-sm-1 {
      margin-right: 0.25rem !important;
    }
    
    .me-sm-2 {
      margin-right: 0.5rem !important;
    }
    
    .me-sm-3 {
      margin-right: 1rem !important;
    }
    
    .me-sm-4 {
      margin-right: 1.5rem !important;
    }
    
    .me-sm-5 {
      margin-right: 3rem !important;
    }
    
    .me-sm-auto {
      margin-right: auto !important;
    }
    
    .mb-sm-0 {
      margin-bottom: 0 !important;
    }
    
    .mb-sm-1 {
      margin-bottom: 0.25rem !important;
    }
    
    .mb-sm-2 {
      margin-bottom: 0.5rem !important;
    }
    
    .mb-sm-3 {
      margin-bottom: 1rem !important;
    }
    
    .mb-sm-4 {
      margin-bottom: 1.5rem !important;
    }
    
    .mb-sm-5 {
      margin-bottom: 3rem !important;
    }
    
    .mb-sm-auto {
      margin-bottom: auto !important;
    }
    
    .ms-sm-0 {
      margin-left: 0 !important;
    }
    
    .ms-sm-1 {
      margin-left: 0.25rem !important;
    }
    
    .ms-sm-2 {
      margin-left: 0.5rem !important;
    }
    
    .ms-sm-3 {
      margin-left: 1rem !important;
    }
    
    .ms-sm-4 {
      margin-left: 1.5rem !important;
    }
    
    .ms-sm-5 {
      margin-left: 3rem !important;
    }
    
    .ms-sm-auto {
      margin-left: auto !important;
    }
    
    .p-sm-0 {
      padding: 0 !important;
    }
    
    .p-sm-1 {
      padding: 0.25rem !important;
    }
    
    .p-sm-2 {
      padding: 0.5rem !important;
    }
    
    .p-sm-3 {
      padding: 1rem !important;
    }
    
    .p-sm-4 {
      padding: 1.5rem !important;
    }
    
    .p-sm-5 {
      padding: 3rem !important;
    }
    
    .px-sm-0 {
      padding-right: 0 !important;
      padding-left: 0 !important;
    }
    
    .px-sm-1 {
      padding-right: 0.25rem !important;
      padding-left: 0.25rem !important;
    }
    
    .px-sm-2 {
      padding-right: 0.5rem !important;
      padding-left: 0.5rem !important;
    }
    
    .px-sm-3 {
      padding-right: 1rem !important;
      padding-left: 1rem !important;
    }
    
    .px-sm-4 {
      padding-right: 1.5rem !important;
      padding-left: 1.5rem !important;
    }
    
    .px-sm-5 {
      padding-right: 3rem !important;
      padding-left: 3rem !important;
    }
    
    .py-sm-0 {
      padding-top: 0 !important;
      padding-bottom: 0 !important;
    }
    
    .py-sm-1 {
      padding-top: 0.25rem !important;
      padding-bottom: 0.25rem !important;
    }
    
    .py-sm-2 {
      padding-top: 0.5rem !important;
      padding-bottom: 0.5rem !important;
    }
    
    .py-sm-3 {
      padding-top: 1rem !important;
      padding-bottom: 1rem !important;
    }
    
    .py-sm-4 {
      padding-top: 1.5rem !important;
      padding-bottom: 1.5rem !important;
    }
    
    .py-sm-5 {
      padding-top: 3rem !important;
      padding-bottom: 3rem !important;
    }
    
    .pt-sm-0 {
      padding-top: 0 !important;
    }
    
    .pt-sm-1 {
      padding-top: 0.25rem !important;
    }
    
    .pt-sm-2 {
      padding-top: 0.5rem !important;
    }
    
    .pt-sm-3 {
      padding-top: 1rem !important;
    }
    
    .pt-sm-4 {
      padding-top: 1.5rem !important;
    }
    
    .pt-sm-5 {
      padding-top: 3rem !important;
    }
    
    .pe-sm-0 {
      padding-right: 0 !important;
    }
    
    .pe-sm-1 {
      padding-right: 0.25rem !important;
    }
    
    .pe-sm-2 {
      padding-right: 0.5rem !important;
    }
    
    .pe-sm-3 {
      padding-right: 1rem !important;
    }
    
    .pe-sm-4 {
      padding-right: 1.5rem !important;
    }
    
    .pe-sm-5 {
      padding-right: 3rem !important;
    }
    
    .pb-sm-0 {
      padding-bottom: 0 !important;
    }
    
    .pb-sm-1 {
      padding-bottom: 0.25rem !important;
    }
    
    .pb-sm-2 {
      padding-bottom: 0.5rem !important;
    }
    
    .pb-sm-3 {
      padding-bottom: 1rem !important;
    }
    
    .pb-sm-4 {
      padding-bottom: 1.5rem !important;
    }
    
    .pb-sm-5 {
      padding-bottom: 3rem !important;
    }
    
    .ps-sm-0 {
      padding-left: 0 !important;
    }
    
    .ps-sm-1 {
      padding-left: 0.25rem !important;
    }
    
    .ps-sm-2 {
      padding-left: 0.5rem !important;
    }
    
    .ps-sm-3 {
      padding-left: 1rem !important;
    }
    
    .ps-sm-4 {
      padding-left: 1.5rem !important;
    }
    
    .ps-sm-5 {
      padding-left: 3rem !important;
    }
    
    .text-sm-start {
      text-align: left !important;
    }
    
    .text-sm-end {
      text-align: right !important;
    }
    
    .text-sm-center {
      text-align: center !important;
    }
  }
  
  @media (min-width: 768px) {
    .float-md-start {
      float: left !important;
    }
    
    .float-md-end {
      float: right !important;
    }
    
    .float-md-none {
      float: none !important;
    }
    
    .d-md-inline {
      display: inline !important;
    }
    
    .d-md-inline-block {
      display: inline-block !important;
    }
    
    .d-md-block {
      display: block !important;
    }
    
    .d-md-grid {
      display: grid !important;
    }
    
    .d-md-table {
      display: table !important;
    }
    
    .d-md-table-row {
      display: table-row !important;
    }
    
    .d-md-table-cell {
      display: table-cell !important;
    }
    
    .d-md-flex {
      display: flex !important;
    }
    
    .d-md-inline-flex {
      display: inline-flex !important;
    }
    
    .d-md-none {
      display: none !important;
    }
    
    .flex-md-fill {
      flex: 1 1 auto !important;
    }
    
    .flex-md-row {
      flex-direction: row !important;
    }
    
    .flex-md-column {
      flex-direction: column !important;
    }
    
    .flex-md-row-reverse {
      flex-direction: row-reverse !important;
    }
    
    .flex-md-column-reverse {
      flex-direction: column-reverse !important;
    }
    
    .flex-md-grow-0 {
      flex-grow: 0 !important;
    }
    
    .flex-md-grow-1 {
      flex-grow: 1 !important;
    }
    
    .flex-md-shrink-0 {
      flex-shrink: 0 !important;
    }
    
    .flex-md-shrink-1 {
      flex-shrink: 1 !important;
    }
    
    .flex-md-wrap {
      flex-wrap: wrap !important;
    }
    
    .flex-md-nowrap {
      flex-wrap: nowrap !important;
    }
    
    .flex-md-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    
    .gap-md-0 {
      gap: 0 !important;
    }
    
    .gap-md-1 {
      gap: 0.25rem !important;
    }
    
    .gap-md-2 {
      gap: 0.5rem !important;
    }
    
    .gap-md-3 {
      gap: 1rem !important;
    }
    
    .gap-md-4 {
      gap: 1.5rem !important;
    }
    
    .gap-md-5 {
      gap: 3rem !important;
    }
    
    .justify-content-md-start {
      justify-content: flex-start !important;
    }
    
    .justify-content-md-end {
      justify-content: flex-end !important;
    }
    
    .justify-content-md-center {
      justify-content: center !important;
    }
    
    .justify-content-md-between {
      justify-content: space-between !important;
    }
    
    .justify-content-md-around {
      justify-content: space-around !important;
    }
    
    .justify-content-md-evenly {
      justify-content: space-evenly !important;
    }
    
    .align-items-md-start {
      align-items: flex-start !important;
    }
    
    .align-items-md-end {
      align-items: flex-end !important;
    }
    
    .align-items-md-center {
      align-items: center !important;
    }
    
    .align-items-md-baseline {
      align-items: baseline !important;
    }
    
    .align-items-md-stretch {
      align-items: stretch !important;
    }
    
    .align-content-md-start {
      align-content: flex-start !important;
    }
    
    .align-content-md-end {
      align-content: flex-end !important;
    }
    
    .align-content-md-center {
      align-content: center !important;
    }
    
    .align-content-md-between {
      align-content: space-between !important;
    }
    
    .align-content-md-around {
      align-content: space-around !important;
    }
    
    .align-content-md-stretch {
      align-content: stretch !important;
    }
    
    .align-self-md-auto {
      align-self: auto !important;
    }
    
    .align-self-md-start {
      align-self: flex-start !important;
    }
    
    .align-self-md-end {
      align-self: flex-end !important;
    }
    
    .align-self-md-center {
      align-self: center !important;
    }
    
    .align-self-md-baseline {
      align-self: baseline !important;
    }
    
    .align-self-md-stretch {
      align-self: stretch !important;
    }
    
    .order-md-first {
      order: -1 !important;
    }
    
    .order-md-0 {
      order: 0 !important;
    }
    
    .order-md-1 {
      order: 1 !important;
    }
    
    .order-md-2 {
      order: 2 !important;
    }
    
    .order-md-3 {
      order: 3 !important;
    }
    
    .order-md-4 {
      order: 4 !important;
    }
    
    .order-md-5 {
      order: 5 !important;
    }
    
    .order-md-last {
      order: 6 !important;
    }
    
    .m-md-0 {
      margin: 0 !important;
    }
    
    .m-md-1 {
      margin: 0.25rem !important;
    }
    
    .m-md-2 {
      margin: 0.5rem !important;
    }
    
    .m-md-3 {
      margin: 1rem !important;
    }
    
    .m-md-4 {
      margin: 1.5rem !important;
    }
    
    .m-md-5 {
      margin: 3rem !important;
    }
    
    .m-md-auto {
      margin: auto !important;
    }
    
    .mx-md-0 {
      margin-right: 0 !important;
      margin-left: 0 !important;
    }
    
    .mx-md-1 {
      margin-right: 0.25rem !important;
      margin-left: 0.25rem !important;
    }
    
    .mx-md-2 {
      margin-right: 0.5rem !important;
      margin-left: 0.5rem !important;
    }
    
    .mx-md-3 {
      margin-right: 1rem !important;
      margin-left: 1rem !important;
    }
    
    .mx-md-4 {
      margin-right: 1.5rem !important;
      margin-left: 1.5rem !important;
    }
    
    .mx-md-5 {
      margin-right: 3rem !important;
      margin-left: 3rem !important;
    }
    
    .mx-md-auto {
      margin-right: auto !important;
      margin-left: auto !important;
    }
    
    .my-md-0 {
      margin-top: 0 !important;
      margin-bottom: 0 !important;
    }
    
    .my-md-1 {
      margin-top: 0.25rem !important;
      margin-bottom: 0.25rem !important;
    }
    
    .my-md-2 {
      margin-top: 0.5rem !important;
      margin-bottom: 0.5rem !important;
    }
    
    .my-md-3 {
      margin-top: 1rem !important;
      margin-bottom: 1rem !important;
    }
    
    .my-md-4 {
      margin-top: 1.5rem !important;
      margin-bottom: 1.5rem !important;
    }
    
    .my-md-5 {
      margin-top: 3rem !important;
      margin-bottom: 3rem !important;
    }
    
    .my-md-auto {
      margin-top: auto !important;
      margin-bottom: auto !important;
    }
    
    .mt-md-0 {
      margin-top: 0 !important;
    }
    
    .mt-md-1 {
      margin-top: 0.25rem !important;
    }
    
    .mt-md-2 {
      margin-top: 0.5rem !important;
    }
    
    .mt-md-3 {
      margin-top: 1rem !important;
    }
    
    .mt-md-4 {
      margin-top: 1.5rem !important;
    }
    
    .mt-md-5 {
      margin-top: 3rem !important;
    }
    
    .mt-md-auto {
      margin-top: auto !important;
    }
    
    .me-md-0 {
      margin-right: 0 !important;
    }
    
    .me-md-1 {
      margin-right: 0.25rem !important;
    }
    
    .me-md-2 {
      margin-right: 0.5rem !important;
    }
    
    .me-md-3 {
      margin-right: 1rem !important;
    }
    
    .me-md-4 {
      margin-right: 1.5rem !important;
    }
    
    .me-md-5 {
      margin-right: 3rem !important;
    }
    
    .me-md-auto {
      margin-right: auto !important;
    }
    
    .mb-md-0 {
      margin-bottom: 0 !important;
    }
    
    .mb-md-1 {
      margin-bottom: 0.25rem !important;
    }
    
    .mb-md-2 {
      margin-bottom: 0.5rem !important;
    }
    
    .mb-md-3 {
      margin-bottom: 1rem !important;
    }
    
    .mb-md-4 {
      margin-bottom: 1.5rem !important;
    }
    
    .mb-md-5 {
      margin-bottom: 3rem !important;
    }
    
    .mb-md-auto {
      margin-bottom: auto !important;
    }
    
    .ms-md-0 {
      margin-left: 0 !important;
    }
    
    .ms-md-1 {
      margin-left: 0.25rem !important;
    }
    
    .ms-md-2 {
      margin-left: 0.5rem !important;
    }
    
    .ms-md-3 {
      margin-left: 1rem !important;
    }
    
    .ms-md-4 {
      margin-left: 1.5rem !important;
    }
    
    .ms-md-5 {
      margin-left: 3rem !important;
    }
    
    .ms-md-auto {
      margin-left: auto !important;
    }
    
    .p-md-0 {
      padding: 0 !important;
    }
    
    .p-md-1 {
      padding: 0.25rem !important;
    }
    
    .p-md-2 {
      padding: 0.5rem !important;
    }
    
    .p-md-3 {
      padding: 1rem !important;
    }
    
    .p-md-4 {
      padding: 1.5rem !important;
    }
    
    .p-md-5 {
      padding: 3rem !important;
    }
    
    .px-md-0 {
      padding-right: 0 !important;
      padding-left: 0 !important;
    }
    
    .px-md-1 {
      padding-right: 0.25rem !important;
      padding-left: 0.25rem !important;
    }
    
    .px-md-2 {
      padding-right: 0.5rem !important;
      padding-left: 0.5rem !important;
    }
    
    .px-md-3 {
      padding-right: 1rem !important;
      padding-left: 1rem !important;
    }
    
    .px-md-4 {
      padding-right: 1.5rem !important;
      padding-left: 1.5rem !important;
    }
    
    .px-md-5 {
      padding-right: 3rem !important;
      padding-left: 3rem !important;
    }
    
    .py-md-0 {
      padding-top: 0 !important;
      padding-bottom: 0 !important;
    }
    
    .py-md-1 {
      padding-top: 0.25rem !important;
      padding-bottom: 0.25rem !important;
    }
    
    .py-md-2 {
      padding-top: 0.5rem !important;
      padding-bottom: 0.5rem !important;
    }
    
    .py-md-3 {
      padding-top: 1rem !important;
      padding-bottom: 1rem !important;
    }
    
    .py-md-4 {
      padding-top: 1.5rem !important;
      padding-bottom: 1.5rem !important;
    }
    
    .py-md-5 {
      padding-top: 3rem !important;
      padding-bottom: 3rem !important;
    }
    
    .pt-md-0 {
      padding-top: 0 !important;
    }
    
    .pt-md-1 {
      padding-top: 0.25rem !important;
    }
    
    .pt-md-2 {
      padding-top: 0.5rem !important;
    }
    
    .pt-md-3 {
      padding-top: 1rem !important;
    }
    
    .pt-md-4 {
      padding-top: 1.5rem !important;
    }
    
    .pt-md-5 {
      padding-top: 3rem !important;
    }
    
    .pe-md-0 {
      padding-right: 0 !important;
    }
    
    .pe-md-1 {
      padding-right: 0.25rem !important;
    }
    
    .pe-md-2 {
      padding-right: 0.5rem !important;
    }
    
    .pe-md-3 {
      padding-right: 1rem !important;
    }
    
    .pe-md-4 {
      padding-right: 1.5rem !important;
    }
    
    .pe-md-5 {
      padding-right: 3rem !important;
    }
    
    .pb-md-0 {
      padding-bottom: 0 !important;
    }
    
    .pb-md-1 {
      padding-bottom: 0.25rem !important;
    }
    
    .pb-md-2 {
      padding-bottom: 0.5rem !important;
    }
    
    .pb-md-3 {
      padding-bottom: 1rem !important;
    }
    
    .pb-md-4 {
      padding-bottom: 1.5rem !important;
    }
    
    .pb-md-5 {
      padding-bottom: 3rem !important;
    }
    
    .ps-md-0 {
      padding-left: 0 !important;
    }
    
    .ps-md-1 {
      padding-left: 0.25rem !important;
    }
    
    .ps-md-2 {
      padding-left: 0.5rem !important;
    }
    
    .ps-md-3 {
      padding-left: 1rem !important;
    }
    
    .ps-md-4 {
      padding-left: 1.5rem !important;
    }
    
    .ps-md-5 {
      padding-left: 3rem !important;
    }
    
    .text-md-start {
      text-align: left !important;
    }
    
    .text-md-end {
      text-align: right !important;
    }
    
    .text-md-center {
      text-align: center !important;
    }
  }
  
  @media (min-width: 992px) {
    .float-lg-start {
      float: left !important;
    }
    
    .float-lg-end {
      float: right !important;
    }
    
    .float-lg-none {
      float: none !important;
    }
    
    .d-lg-inline {
      display: inline !important;
    }
    
    .d-lg-inline-block {
      display: inline-block !important;
    }
    
    .d-lg-block {
      display: block !important;
    }
    
    .d-lg-grid {
      display: grid !important;
    }
    
    .d-lg-table {
      display: table !important;
    }
    
    .d-lg-table-row {
      display: table-row !important;
    }
    
    .d-lg-table-cell {
      display: table-cell !important;
    }
    
    .d-lg-flex {
      display: flex !important;
    }
    
    .d-lg-inline-flex {
      display: inline-flex !important;
    }
    
    .d-lg-none {
      display: none !important;
    }
    
    .flex-lg-fill {
      flex: 1 1 auto !important;
    }
    
    .flex-lg-row {
      flex-direction: row !important;
    }
    
    .flex-lg-column {
      flex-direction: column !important;
    }
    
    .flex-lg-row-reverse {
      flex-direction: row-reverse !important;
    }
    
    .flex-lg-column-reverse {
      flex-direction: column-reverse !important;
    }
    
    .flex-lg-grow-0 {
      flex-grow: 0 !important;
    }
    
    .flex-lg-grow-1 {
      flex-grow: 1 !important;
    }
    
    .flex-lg-shrink-0 {
      flex-shrink: 0 !important;
    }
    
    .flex-lg-shrink-1 {
      flex-shrink: 1 !important;
    }
    
    .flex-lg-wrap {
      flex-wrap: wrap !important;
    }
    
    .flex-lg-nowrap {
      flex-wrap: nowrap !important;
    }
    
    .flex-lg-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    
    .gap-lg-0 {
      gap: 0 !important;
    }
    
    .gap-lg-1 {
      gap: 0.25rem !important;
    }
    
    .gap-lg-2 {
      gap: 0.5rem !important;
    }
    
    .gap-lg-3 {
      gap: 1rem !important;
    }
    
    .gap-lg-4 {
      gap: 1.5rem !important;
    }
    
    .gap-lg-5 {
      gap: 3rem !important;
    }
    
    .justify-content-lg-start {
      justify-content: flex-start !important;
    }
    
    .justify-content-lg-end {
      justify-content: flex-end !important;
    }
    
    .justify-content-lg-center {
      justify-content: center !important;
    }
    
    .justify-content-lg-between {
      justify-content: space-between !important;
    }
    
    .justify-content-lg-around {
      justify-content: space-around !important;
    }
    
    .justify-content-lg-evenly {
      justify-content: space-evenly !important;
    }
    
    .align-items-lg-start {
      align-items: flex-start !important;
    }
    
    .align-items-lg-end {
      align-items: flex-end !important;
    }
    
    .align-items-lg-center {
      align-items: center !important;
    }
    
    .align-items-lg-baseline {
      align-items: baseline !important;
    }
    
    .align-items-lg-stretch {
      align-items: stretch !important;
    }
    
    .align-content-lg-start {
      align-content: flex-start !important;
    }
    
    .align-content-lg-end {
      align-content: flex-end !important;
    }
    
    .align-content-lg-center {
      align-content: center !important;
    }
    
    .align-content-lg-between {
      align-content: space-between !important;
    }
    
    .align-content-lg-around {
      align-content: space-around !important;
    }
    
    .align-content-lg-stretch {
      align-content: stretch !important;
    }
    
    .align-self-lg-auto {
      align-self: auto !important;
    }
    
    .align-self-lg-start {
      align-self: flex-start !important;
    }
    
    .align-self-lg-end {
      align-self: flex-end !important;
    }
    
    .align-self-lg-center {
      align-self: center !important;
    }
    
    .align-self-lg-baseline {
      align-self: baseline !important;
    }
    
    .align-self-lg-stretch {
      align-self: stretch !important;
    }
    
    .order-lg-first {
      order: -1 !important;
    }
    
    .order-lg-0 {
      order: 0 !important;
    }
    
    .order-lg-1 {
      order: 1 !important;
    }
    
    .order-lg-2 {
      order: 2 !important;
    }
    
    .order-lg-3 {
      order: 3 !important;
    }
    
    .order-lg-4 {
      order: 4 !important;
    }
    
    .order-lg-5 {
      order: 5 !important;
    }
    
    .order-lg-last {
      order: 6 !important;
    }
    
    .m-lg-0 {
      margin: 0 !important;
    }
    
    .m-lg-1 {
      margin: 0.25rem !important;
    }
    
    .m-lg-2 {
      margin: 0.5rem !important;
    }
    
    .m-lg-3 {
      margin: 1rem !important;
    }
    
    .m-lg-4 {
      margin: 1.5rem !important;
    }
    
    .m-lg-5 {
      margin: 3rem !important;
    }
    
    .m-lg-auto {
      margin: auto !important;
    }
    
    .mx-lg-0 {
      margin-right: 0 !important;
      margin-left: 0 !important;
    }
    
    .mx-lg-1 {
      margin-right: 0.25rem !important;
      margin-left: 0.25rem !important;
    }
    
    .mx-lg-2 {
      margin-right: 0.5rem !important;
      margin-left: 0.5rem !important;
    }
    
    .mx-lg-3 {
      margin-right: 1rem !important;
      margin-left: 1rem !important;
    }
    
    .mx-lg-4 {
      margin-right: 1.5rem !important;
      margin-left: 1.5rem !important;
    }
    
    .mx-lg-5 {
      margin-right: 3rem !important;
      margin-left: 3rem !important;
    }
    
    .mx-lg-auto {
      margin-right: auto !important;
      margin-left: auto !important;
    }
    
    .my-lg-0 {
      margin-top: 0 !important;
      margin-bottom: 0 !important;
    }
    
    .my-lg-1 {
      margin-top: 0.25rem !important;
      margin-bottom: 0.25rem !important;
    }
    
    .my-lg-2 {
      margin-top: 0.5rem !important;
      margin-bottom: 0.5rem !important;
    }
    
    .my-lg-3 {
      margin-top: 1rem !important;
      margin-bottom: 1rem !important;
    }
    
    .my-lg-4 {
      margin-top: 1.5rem !important;
      margin-bottom: 1.5rem !important;
    }
    
    .my-lg-5 {
      margin-top: 3rem !important;
      margin-bottom: 3rem !important;
    }
    
    .my-lg-auto {
      margin-top: auto !important;
      margin-bottom: auto !important;
    }
    
    .mt-lg-0 {
      margin-top: 0 !important;
    }
    
    .mt-lg-1 {
      margin-top: 0.25rem !important;
    }
    
    .mt-lg-2 {
      margin-top: 0.5rem !important;
    }
    
    .mt-lg-3 {
      margin-top: 1rem !important;
    }
    
    .mt-lg-4 {
      margin-top: 1.5rem !important;
    }
    
    .mt-lg-5 {
      margin-top: 3rem !important;
    }
    
    .mt-lg-auto {
      margin-top: auto !important;
    }
    
    .me-lg-0 {
      margin-right: 0 !important;
    }
    
    .me-lg-1 {
      margin-right: 0.25rem !important;
    }
    
    .me-lg-2 {
      margin-right: 0.5rem !important;
    }
    
    .me-lg-3 {
      margin-right: 1rem !important;
    }
    
    .me-lg-4 {
      margin-right: 1.5rem !important;
    }
    
    .me-lg-5 {
      margin-right: 3rem !important;
    }
    
    .me-lg-auto {
      margin-right: auto !important;
    }
    
    .mb-lg-0 {
      margin-bottom: 0 !important;
    }
    
    .mb-lg-1 {
      margin-bottom: 0.25rem !important;
    }
    
    .mb-lg-2 {
      margin-bottom: 0.5rem !important;
    }
    
    .mb-lg-3 {
      margin-bottom: 1rem !important;
    }
    
    .mb-lg-4 {
      margin-bottom: 1.5rem !important;
    }
    
    .mb-lg-5 {
      margin-bottom: 3rem !important;
    }
    
    .mb-lg-auto {
      margin-bottom: auto !important;
    }
    
    .ms-lg-0 {
      margin-left: 0 !important;
    }
    
    .ms-lg-1 {
      margin-left: 0.25rem !important;
    }
    
    .ms-lg-2 {
      margin-left: 0.5rem !important;
    }
    
    .ms-lg-3 {
      margin-left: 1rem !important;
    }
    
    .ms-lg-4 {
      margin-left: 1.5rem !important;
    }
    
    .ms-lg-5 {
      margin-left: 3rem !important;
    }
    
    .ms-lg-auto {
      margin-left: auto !important;
    }
    
    .p-lg-0 {
      padding: 0 !important;
    }
    
    .p-lg-1 {
      padding: 0.25rem !important;
    }
    
    .p-lg-2 {
      padding: 0.5rem !important;
    }
    
    .p-lg-3 {
      padding: 1rem !important;
    }
    
    .p-lg-4 {
      padding: 1.5rem !important;
    }
    
    .p-lg-5 {
      padding: 3rem !important;
    }
    
    .px-lg-0 {
      padding-right: 0 !important;
      padding-left: 0 !important;
    }
    
    .px-lg-1 {
      padding-right: 0.25rem !important;
      padding-left: 0.25rem !important;
    }
    
    .px-lg-2 {
      padding-right: 0.5rem !important;
      padding-left: 0.5rem !important;
    }
    
    .px-lg-3 {
      padding-right: 1rem !important;
      padding-left: 1rem !important;
    }
    
    .px-lg-4 {
      padding-right: 1.5rem !important;
      padding-left: 1.5rem !important;
    }
    
    .px-lg-5 {
      padding-right: 3rem !important;
      padding-left: 3rem !important;
    }
    
    .py-lg-0 {
      padding-top: 0 !important;
      padding-bottom: 0 !important;
    }
    
    .py-lg-1 {
      padding-top: 0.25rem !important;
      padding-bottom: 0.25rem !important;
    }
    
    .py-lg-2 {
      padding-top: 0.5rem !important;
      padding-bottom: 0.5rem !important;
    }
    
    .py-lg-3 {
      padding-top: 1rem !important;
      padding-bottom: 1rem !important;
    }
    
    .py-lg-4 {
      padding-top: 1.5rem !important;
      padding-bottom: 1.5rem !important;
    }
    
    .py-lg-5 {
      padding-top: 3rem !important;
      padding-bottom: 3rem !important;
    }
    
    .pt-lg-0 {
      padding-top: 0 !important;
    }
    
    .pt-lg-1 {
      padding-top: 0.25rem !important;
    }
    
    .pt-lg-2 {
      padding-top: 0.5rem !important;
    }
    
    .pt-lg-3 {
      padding-top: 1rem !important;
    }
    
    .pt-lg-4 {
      padding-top: 1.5rem !important;
    }
    
    .pt-lg-5 {
      padding-top: 3rem !important;
    }
    
    .pe-lg-0 {
      padding-right: 0 !important;
    }
    
    .pe-lg-1 {
      padding-right: 0.25rem !important;
    }
    
    .pe-lg-2 {
      padding-right: 0.5rem !important;
    }
    
    .pe-lg-3 {
      padding-right: 1rem !important;
    }
    
    .pe-lg-4 {
      padding-right: 1.5rem !important;
    }
    
    .pe-lg-5 {
      padding-right: 3rem !important;
    }
    
    .pb-lg-0 {
      padding-bottom: 0 !important;
    }
    
    .pb-lg-1 {
      padding-bottom: 0.25rem !important;
    }
    
    .pb-lg-2 {
      padding-bottom: 0.5rem !important;
    }
    
    .pb-lg-3 {
      padding-bottom: 1rem !important;
    }
    
    .pb-lg-4 {
      padding-bottom: 1.5rem !important;
    }
    
    .pb-lg-5 {
      padding-bottom: 3rem !important;
    }
    
    .ps-lg-0 {
      padding-left: 0 !important;
    }
    
    .ps-lg-1 {
      padding-left: 0.25rem !important;
    }
    
    .ps-lg-2 {
      padding-left: 0.5rem !important;
    }
    
    .ps-lg-3 {
      padding-left: 1rem !important;
    }
    
    .ps-lg-4 {
      padding-left: 1.5rem !important;
    }
    
    .ps-lg-5 {
      padding-left: 3rem !important;
    }
    
    .text-lg-start {
      text-align: left !important;
    }
    
    .text-lg-end {
      text-align: right !important;
    }
    
    .text-lg-center {
      text-align: center !important;
    }
  }
  
  @media (min-width: 1200px) {
    .float-xl-start {
      float: left !important;
    }
    
    .float-xl-end {
      float: right !important;
    }
    
    .float-xl-none {
      float: none !important;
    }
    
    .d-xl-inline {
      display: inline !important;
    }
    
    .d-xl-inline-block {
      display: inline-block !important;
    }
    
    .d-xl-block {
      display: block !important;
    }
    
    .d-xl-grid {
      display: grid !important;
    }
    
    .d-xl-table {
      display: table !important;
    }
    
    .d-xl-table-row {
      display: table-row !important;
    }
    
    .d-xl-table-cell {
      display: table-cell !important;
    }
    
    .d-xl-flex {
      display: flex !important;
    }
    
    .d-xl-inline-flex {
      display: inline-flex !important;
    }
    
    .d-xl-none {
      display: none !important;
    }
    
    .flex-xl-fill {
      flex: 1 1 auto !important;
    }
    
    .flex-xl-row {
      flex-direction: row !important;
    }
    
    .flex-xl-column {
      flex-direction: column !important;
    }
    
    .flex-xl-row-reverse {
      flex-direction: row-reverse !important;
    }
    
    .flex-xl-column-reverse {
      flex-direction: column-reverse !important;
    }
    
    .flex-xl-grow-0 {
      flex-grow: 0 !important;
    }
    
    .flex-xl-grow-1 {
      flex-grow: 1 !important;
    }
    
    .flex-xl-shrink-0 {
      flex-shrink: 0 !important;
    }
    
    .flex-xl-shrink-1 {
      flex-shrink: 1 !important;
    }
    
    .flex-xl-wrap {
      flex-wrap: wrap !important;
    }
    
    .flex-xl-nowrap {
      flex-wrap: nowrap !important;
    }
    
    .flex-xl-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    
    .gap-xl-0 {
      gap: 0 !important;
    }
    
    .gap-xl-1 {
      gap: 0.25rem !important;
    }
    
    .gap-xl-2 {
      gap: 0.5rem !important;
    }
    
    .gap-xl-3 {
      gap: 1rem !important;
    }
    
    .gap-xl-4 {
      gap: 1.5rem !important;
    }
    
    .gap-xl-5 {
      gap: 3rem !important;
    }
    
    .justify-content-xl-start {
      justify-content: flex-start !important;
    }
    
    .justify-content-xl-end {
      justify-content: flex-end !important;
    }
    
    .justify-content-xl-center {
      justify-content: center !important;
    }
    
    .justify-content-xl-between {
      justify-content: space-between !important;
    }
    
    .justify-content-xl-around {
      justify-content: space-around !important;
    }
    
    .justify-content-xl-evenly {
      justify-content: space-evenly !important;
    }
    
    .align-items-xl-start {
      align-items: flex-start !important;
    }
    
    .align-items-xl-end {
      align-items: flex-end !important;
    }
    
    .align-items-xl-center {
      align-items: center !important;
    }
    
    .align-items-xl-baseline {
      align-items: baseline !important;
    }
    
    .align-items-xl-stretch {
      align-items: stretch !important;
    }
    
    .align-content-xl-start {
      align-content: flex-start !important;
    }
    
    .align-content-xl-end {
      align-content: flex-end !important;
    }
    
    .align-content-xl-center {
      align-content: center !important;
    }
    
    .align-content-xl-between {
      align-content: space-between !important;
    }
    
    .align-content-xl-around {
      align-content: space-around !important;
    }
    
    .align-content-xl-stretch {
      align-content: stretch !important;
    }
    
    .align-self-xl-auto {
      align-self: auto !important;
    }
    
    .align-self-xl-start {
      align-self: flex-start !important;
    }
    
    .align-self-xl-end {
      align-self: flex-end !important;
    }
    
    .align-self-xl-center {
      align-self: center !important;
    }
    
    .align-self-xl-baseline {
      align-self: baseline !important;
    }
    
    .align-self-xl-stretch {
      align-self: stretch !important;
    }
    
    .order-xl-first {
      order: -1 !important;
    }
    
    .order-xl-0 {
      order: 0 !important;
    }
    
    .order-xl-1 {
      order: 1 !important;
    }
    
    .order-xl-2 {
      order: 2 !important;
    }
    
    .order-xl-3 {
      order: 3 !important;
    }
    
    .order-xl-4 {
      order: 4 !important;
    }
    
    .order-xl-5 {
      order: 5 !important;
    }
    
    .order-xl-last {
      order: 6 !important;
    }
    
    .m-xl-0 {
      margin: 0 !important;
    }
    
    .m-xl-1 {
      margin: 0.25rem !important;
    }
    
    .m-xl-2 {
      margin: 0.5rem !important;
    }
    
    .m-xl-3 {
      margin: 1rem !important;
    }
    
    .m-xl-4 {
      margin: 1.5rem !important;
    }
    
    .m-xl-5 {
      margin: 3rem !important;
    }
    
    .m-xl-auto {
      margin: auto !important;
    }
    
    .mx-xl-0 {
      margin-right: 0 !important;
      margin-left: 0 !important;
    }
    
    .mx-xl-1 {
      margin-right: 0.25rem !important;
      margin-left: 0.25rem !important;
    }
    
    .mx-xl-2 {
      margin-right: 0.5rem !important;
      margin-left: 0.5rem !important;
    }
    
    .mx-xl-3 {
      margin-right: 1rem !important;
      margin-left: 1rem !important;
    }
    
    .mx-xl-4 {
      margin-right: 1.5rem !important;
      margin-left: 1.5rem !important;
    }
    
    .mx-xl-5 {
      margin-right: 3rem !important;
      margin-left: 3rem !important;
    }
    
    .mx-xl-auto {
      margin-right: auto !important;
      margin-left: auto !important;
    }
    
    .my-xl-0 {
      margin-top: 0 !important;
      margin-bottom: 0 !important;
    }
    
    .my-xl-1 {
      margin-top: 0.25rem !important;
      margin-bottom: 0.25rem !important;
    }
    
    .my-xl-2 {
      margin-top: 0.5rem !important;
      margin-bottom: 0.5rem !important;
    }
    
    .my-xl-3 {
      margin-top: 1rem !important;
      margin-bottom: 1rem !important;
    }
    
    .my-xl-4 {
      margin-top: 1.5rem !important;
      margin-bottom: 1.5rem !important;
    }
    
    .my-xl-5 {
      margin-top: 3rem !important;
      margin-bottom: 3rem !important;
    }
    
    .my-xl-auto {
      margin-top: auto !important;
      margin-bottom: auto !important;
    }
    
    .mt-xl-0 {
      margin-top: 0 !important;
    }
    
    .mt-xl-1 {
      margin-top: 0.25rem !important;
    }
    
    .mt-xl-2 {
      margin-top: 0.5rem !important;
    }
    
    .mt-xl-3 {
      margin-top: 1rem !important;
    }
    
    .mt-xl-4 {
      margin-top: 1.5rem !important;
    }
    
    .mt-xl-5 {
      margin-top: 3rem !important;
    }
    
    .mt-xl-auto {
      margin-top: auto !important;
    }
    
    .me-xl-0 {
      margin-right: 0 !important;
    }
    
    .me-xl-1 {
      margin-right: 0.25rem !important;
    }
    
    .me-xl-2 {
      margin-right: 0.5rem !important;
    }
    
    .me-xl-3 {
      margin-right: 1rem !important;
    }
    
    .me-xl-4 {
      margin-right: 1.5rem !important;
    }
    
    .me-xl-5 {
      margin-right: 3rem !important;
    }
    
    .me-xl-auto {
      margin-right: auto !important;
    }
    
    .mb-xl-0 {
      margin-bottom: 0 !important;
    }
    
    .mb-xl-1 {
      margin-bottom: 0.25rem !important;
    }
    
    .mb-xl-2 {
      margin-bottom: 0.5rem !important;
    }
    
    .mb-xl-3 {
      margin-bottom: 1rem !important;
    }
    
    .mb-xl-4 {
      margin-bottom: 1.5rem !important;
    }
    
    .mb-xl-5 {
      margin-bottom: 3rem !important;
    }
    
    .mb-xl-auto {
      margin-bottom: auto !important;
    }
    
    .ms-xl-0 {
      margin-left: 0 !important;
    }
    
    .ms-xl-1 {
      margin-left: 0.25rem !important;
    }
    
    .ms-xl-2 {
      margin-left: 0.5rem !important;
    }
    
    .ms-xl-3 {
      margin-left: 1rem !important;
    }
    
    .ms-xl-4 {
      margin-left: 1.5rem !important;
    }
    
    .ms-xl-5 {
      margin-left: 3rem !important;
    }
    
    .ms-xl-auto {
      margin-left: auto !important;
    }
    
    .p-xl-0 {
      padding: 0 !important;
    }
    
    .p-xl-1 {
      padding: 0.25rem !important;
    }
    
    .p-xl-2 {
      padding: 0.5rem !important;
    }
    
    .p-xl-3 {
      padding: 1rem !important;
    }
    
    .p-xl-4 {
      padding: 1.5rem !important;
    }
    
    .p-xl-5 {
      padding: 3rem !important;
    }
    
    .px-xl-0 {
      padding-right: 0 !important;
      padding-left: 0 !important;
    }
    
    .px-xl-1 {
      padding-right: 0.25rem !important;
      padding-left: 0.25rem !important;
    }
    
    .px-xl-2 {
      padding-right: 0.5rem !important;
      padding-left: 0.5rem !important;
    }
    
    .px-xl-3 {
      padding-right: 1rem !important;
      padding-left: 1rem !important;
    }
    
    .px-xl-4 {
      padding-right: 1.5rem !important;
      padding-left: 1.5rem !important;
    }
    
    .px-xl-5 {
      padding-right: 3rem !important;
      padding-left: 3rem !important;
    }
    
    .py-xl-0 {
      padding-top: 0 !important;
      padding-bottom: 0 !important;
    }
    
    .py-xl-1 {
      padding-top: 0.25rem !important;
      padding-bottom: 0.25rem !important;
    }
    
    .py-xl-2 {
      padding-top: 0.5rem !important;
      padding-bottom: 0.5rem !important;
    }
    
    .py-xl-3 {
      padding-top: 1rem !important;
      padding-bottom: 1rem !important;
    }
    
    .py-xl-4 {
      padding-top: 1.5rem !important;
      padding-bottom: 1.5rem !important;
    }
    
    .py-xl-5 {
      padding-top: 3rem !important;
      padding-bottom: 3rem !important;
    }
    
    .pt-xl-0 {
      padding-top: 0 !important;
    }
    
    .pt-xl-1 {
      padding-top: 0.25rem !important;
    }
    
    .pt-xl-2 {
      padding-top: 0.5rem !important;
    }
    
    .pt-xl-3 {
      padding-top: 1rem !important;
    }
    
    .pt-xl-4 {
      padding-top: 1.5rem !important;
    }
    
    .pt-xl-5 {
      padding-top: 3rem !important;
    }
    
    .pe-xl-0 {
      padding-right: 0 !important;
    }
    
    .pe-xl-1 {
      padding-right: 0.25rem !important;
    }
    
    .pe-xl-2 {
      padding-right: 0.5rem !important;
    }
    
    .pe-xl-3 {
      padding-right: 1rem !important;
    }
    
    .pe-xl-4 {
      padding-right: 1.5rem !important;
    }
    
    .pe-xl-5 {
      padding-right: 3rem !important;
    }
    
    .pb-xl-0 {
      padding-bottom: 0 !important;
    }
    
    .pb-xl-1 {
      padding-bottom: 0.25rem !important;
    }
    
    .pb-xl-2 {
      padding-bottom: 0.5rem !important;
    }
    
    .pb-xl-3 {
      padding-bottom: 1rem !important;
    }
    
    .pb-xl-4 {
      padding-bottom: 1.5rem !important;
    }
    
    .pb-xl-5 {
      padding-bottom: 3rem !important;
    }
    
    .ps-xl-0 {
      padding-left: 0 !important;
    }
    
    .ps-xl-1 {
      padding-left: 0.25rem !important;
    }
    
    .ps-xl-2 {
      padding-left: 0.5rem !important;
    }
    
    .ps-xl-3 {
      padding-left: 1rem !important;
    }
    
    .ps-xl-4 {
      padding-left: 1.5rem !important;
    }
    
    .ps-xl-5 {
      padding-left: 3rem !important;
    }
    
    .text-xl-start {
      text-align: left !important;
    }
    
    .text-xl-end {
      text-align: right !important;
    }
    
    .text-xl-center {
      text-align: center !important;
    }
  }
  
  @media (min-width: 1400px) {
    .float-xxl-start {
      float: left !important;
    }
    
    .float-xxl-end {
      float: right !important;
    }
    
    .float-xxl-none {
      float: none !important;
    }
    
    .d-xxl-inline {
      display: inline !important;
    }
    
    .d-xxl-inline-block {
      display: inline-block !important;
    }
    
    .d-xxl-block {
      display: block !important;
    }
    
    .d-xxl-grid {
      display: grid !important;
    }
    
    .d-xxl-table {
      display: table !important;
    }
    
    .d-xxl-table-row {
      display: table-row !important;
    }
    
    .d-xxl-table-cell {
      display: table-cell !important;
    }
    
    .d-xxl-flex {
      display: flex !important;
    }
    
    .d-xxl-inline-flex {
      display: inline-flex !important;
    }
    
    .d-xxl-none {
      display: none !important;
    }
    
    .flex-xxl-fill {
      flex: 1 1 auto !important;
    }
    
    .flex-xxl-row {
      flex-direction: row !important;
    }
    
    .flex-xxl-column {
      flex-direction: column !important;
    }
    
    .flex-xxl-row-reverse {
      flex-direction: row-reverse !important;
    }
    
    .flex-xxl-column-reverse {
      flex-direction: column-reverse !important;
    }
    
    .flex-xxl-grow-0 {
      flex-grow: 0 !important;
    }
    
    .flex-xxl-grow-1 {
      flex-grow: 1 !important;
    }
    
    .flex-xxl-shrink-0 {
      flex-shrink: 0 !important;
    }
    
    .flex-xxl-shrink-1 {
      flex-shrink: 1 !important;
    }
    
    .flex-xxl-wrap {
      flex-wrap: wrap !important;
    }
    
    .flex-xxl-nowrap {
      flex-wrap: nowrap !important;
    }
    
    .flex-xxl-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    
    .gap-xxl-0 {
      gap: 0 !important;
    }
    
    .gap-xxl-1 {
      gap: 0.25rem !important;
    }
    
    .gap-xxl-2 {
      gap: 0.5rem !important;
    }
    
    .gap-xxl-3 {
      gap: 1rem !important;
    }
    
    .gap-xxl-4 {
      gap: 1.5rem !important;
    }
    
    .gap-xxl-5 {
      gap: 3rem !important;
    }
    
    .justify-content-xxl-start {
      justify-content: flex-start !important;
    }
    
    .justify-content-xxl-end {
      justify-content: flex-end !important;
    }
    
    .justify-content-xxl-center {
      justify-content: center !important;
    }
    
    .justify-content-xxl-between {
      justify-content: space-between !important;
    }
    
    .justify-content-xxl-around {
      justify-content: space-around !important;
    }
    
    .justify-content-xxl-evenly {
      justify-content: space-evenly !important;
    }
    
    .align-items-xxl-start {
      align-items: flex-start !important;
    }
    
    .align-items-xxl-end {
      align-items: flex-end !important;
    }
    
    .align-items-xxl-center {
      align-items: center !important;
    }
    
    .align-items-xxl-baseline {
      align-items: baseline !important;
    }
    
    .align-items-xxl-stretch {
      align-items: stretch !important;
    }
    
    .align-content-xxl-start {
      align-content: flex-start !important;
    }
    
    .align-content-xxl-end {
      align-content: flex-end !important;
    }
    
    .align-content-xxl-center {
      align-content: center !important;
    }
    
    .align-content-xxl-between {
      align-content: space-between !important;
    }
    
    .align-content-xxl-around {
      align-content: space-around !important;
    }
    
    .align-content-xxl-stretch {
      align-content: stretch !important;
    }
    
    .align-self-xxl-auto {
      align-self: auto !important;
    }
    
    .align-self-xxl-start {
      align-self: flex-start !important;
    }
    
    .align-self-xxl-end {
      align-self: flex-end !important;
    }
    
    .align-self-xxl-center {
      align-self: center !important;
    }
    
    .align-self-xxl-baseline {
      align-self: baseline !important;
    }
    
    .align-self-xxl-stretch {
      align-self: stretch !important;
    }
    
    .order-xxl-first {
      order: -1 !important;
    }
    
    .order-xxl-0 {
      order: 0 !important;
    }
    
    .order-xxl-1 {
      order: 1 !important;
    }
    
    .order-xxl-2 {
      order: 2 !important;
    }
    
    .order-xxl-3 {
      order: 3 !important;
    }
    
    .order-xxl-4 {
      order: 4 !important;
    }
    
    .order-xxl-5 {
      order: 5 !important;
    }
    
    .order-xxl-last {
      order: 6 !important;
    }
    
    .m-xxl-0 {
      margin: 0 !important;
    }
    
    .m-xxl-1 {
      margin: 0.25rem !important;
    }
    
    .m-xxl-2 {
      margin: 0.5rem !important;
    }
    
    .m-xxl-3 {
      margin: 1rem !important;
    }
    
    .m-xxl-4 {
      margin: 1.5rem !important;
    }
    
    .m-xxl-5 {
      margin: 3rem !important;
    }
    
    .m-xxl-auto {
      margin: auto !important;
    }
    
    .mx-xxl-0 {
      margin-right: 0 !important;
      margin-left: 0 !important;
    }
    
    .mx-xxl-1 {
      margin-right: 0.25rem !important;
      margin-left: 0.25rem !important;
    }
    
    .mx-xxl-2 {
      margin-right: 0.5rem !important;
      margin-left: 0.5rem !important;
    }
    
    .mx-xxl-3 {
      margin-right: 1rem !important;
      margin-left: 1rem !important;
    }
    
    .mx-xxl-4 {
      margin-right: 1.5rem !important;
      margin-left: 1.5rem !important;
    }
    
    .mx-xxl-5 {
      margin-right: 3rem !important;
      margin-left: 3rem !important;
    }
    
    .mx-xxl-auto {
      margin-right: auto !important;
      margin-left: auto !important;
    }
    
    .my-xxl-0 {
      margin-top: 0 !important;
      margin-bottom: 0 !important;
    }
    
    .my-xxl-1 {
      margin-top: 0.25rem !important;
      margin-bottom: 0.25rem !important;
    }
    
    .my-xxl-2 {
      margin-top: 0.5rem !important;
      margin-bottom: 0.5rem !important;
    }
    
    .my-xxl-3 {
      margin-top: 1rem !important;
      margin-bottom: 1rem !important;
    }
    
    .my-xxl-4 {
      margin-top: 1.5rem !important;
      margin-bottom: 1.5rem !important;
    }
    
    .my-xxl-5 {
      margin-top: 3rem !important;
      margin-bottom: 3rem !important;
    }
    
    .my-xxl-auto {
      margin-top: auto !important;
      margin-bottom: auto !important;
    }
    
    .mt-xxl-0 {
      margin-top: 0 !important;
    }
    
    .mt-xxl-1 {
      margin-top: 0.25rem !important;
    }
    
    .mt-xxl-2 {
      margin-top: 0.5rem !important;
    }
    
    .mt-xxl-3 {
      margin-top: 1rem !important;
    }
    
    .mt-xxl-4 {
      margin-top: 1.5rem !important;
    }
    
    .mt-xxl-5 {
      margin-top: 3rem !important;
    }
    
    .mt-xxl-auto {
      margin-top: auto !important;
    }
    
    .me-xxl-0 {
      margin-right: 0 !important;
    }
    
    .me-xxl-1 {
      margin-right: 0.25rem !important;
    }
    
    .me-xxl-2 {
      margin-right: 0.5rem !important;
    }
    
    .me-xxl-3 {
      margin-right: 1rem !important;
    }
    
    .me-xxl-4 {
      margin-right: 1.5rem !important;
    }
    
    .me-xxl-5 {
      margin-right: 3rem !important;
    }
    
    .me-xxl-auto {
      margin-right: auto !important;
    }
    
    .mb-xxl-0 {
      margin-bottom: 0 !important;
    }
    
    .mb-xxl-1 {
      margin-bottom: 0.25rem !important;
    }
    
    .mb-xxl-2 {
      margin-bottom: 0.5rem !important;
    }
    
    .mb-xxl-3 {
      margin-bottom: 1rem !important;
    }
    
    .mb-xxl-4 {
      margin-bottom: 1.5rem !important;
    }
    
    .mb-xxl-5 {
      margin-bottom: 3rem !important;
    }
    
    .mb-xxl-auto {
      margin-bottom: auto !important;
    }
    
    .ms-xxl-0 {
      margin-left: 0 !important;
    }
    
    .ms-xxl-1 {
      margin-left: 0.25rem !important;
    }
    
    .ms-xxl-2 {
      margin-left: 0.5rem !important;
    }
    
    .ms-xxl-3 {
      margin-left: 1rem !important;
    }
    
    .ms-xxl-4 {
      margin-left: 1.5rem !important;
    }
    
    .ms-xxl-5 {
      margin-left: 3rem !important;
    }
    
    .ms-xxl-auto {
      margin-left: auto !important;
    }
    
    .p-xxl-0 {
      padding: 0 !important;
    }
    
    .p-xxl-1 {
      padding: 0.25rem !important;
    }
    
    .p-xxl-2 {
      padding: 0.5rem !important;
    }
    
    .p-xxl-3 {
      padding: 1rem !important;
    }
    
    .p-xxl-4 {
      padding: 1.5rem !important;
    }
    
    .p-xxl-5 {
      padding: 3rem !important;
    }
    
    .px-xxl-0 {
      padding-right: 0 !important;
      padding-left: 0 !important;
    }
    
    .px-xxl-1 {
      padding-right: 0.25rem !important;
      padding-left: 0.25rem !important;
    }
    
    .px-xxl-2 {
      padding-right: 0.5rem !important;
      padding-left: 0.5rem !important;
    }
    
    .px-xxl-3 {
      padding-right: 1rem !important;
      padding-left: 1rem !important;
    }
    
    .px-xxl-4 {
      padding-right: 1.5rem !important;
      padding-left: 1.5rem !important;
    }
    
    .px-xxl-5 {
      padding-right: 3rem !important;
      padding-left: 3rem !important;
    }
    
    .py-xxl-0 {
      padding-top: 0 !important;
      padding-bottom: 0 !important;
    }
    
    .py-xxl-1 {
      padding-top: 0.25rem !important;
      padding-bottom: 0.25rem !important;
    }
    
    .py-xxl-2 {
      padding-top: 0.5rem !important;
      padding-bottom: 0.5rem !important;
    }
    
    .py-xxl-3 {
      padding-top: 1rem !important;
      padding-bottom: 1rem !important;
    }
    
    .py-xxl-4 {
      padding-top: 1.5rem !important;
      padding-bottom: 1.5rem !important;
    }
    
    .py-xxl-5 {
      padding-top: 3rem !important;
      padding-bottom: 3rem !important;
    }
    
    .pt-xxl-0 {
      padding-top: 0 !important;
    }
    
    .pt-xxl-1 {
      padding-top: 0.25rem !important;
    }
    
    .pt-xxl-2 {
      padding-top: 0.5rem !important;
    }
    
    .pt-xxl-3 {
      padding-top: 1rem !important;
    }
    
    .pt-xxl-4 {
      padding-top: 1.5rem !important;
    }
    
    .pt-xxl-5 {
      padding-top: 3rem !important;
    }
    
    .pe-xxl-0 {
      padding-right: 0 !important;
    }
    
    .pe-xxl-1 {
      padding-right: 0.25rem !important;
    }
    
    .pe-xxl-2 {
      padding-right: 0.5rem !important;
    }
    
    .pe-xxl-3 {
      padding-right: 1rem !important;
    }
    
    .pe-xxl-4 {
      padding-right: 1.5rem !important;
    }
    
    .pe-xxl-5 {
      padding-right: 3rem !important;
    }
    
    .pb-xxl-0 {
      padding-bottom: 0 !important;
    }
    
    .pb-xxl-1 {
      padding-bottom: 0.25rem !important;
    }
    
    .pb-xxl-2 {
      padding-bottom: 0.5rem !important;
    }
    
    .pb-xxl-3 {
      padding-bottom: 1rem !important;
    }
    
    .pb-xxl-4 {
      padding-bottom: 1.5rem !important;
    }
    
    .pb-xxl-5 {
      padding-bottom: 3rem !important;
    }
    
    .ps-xxl-0 {
      padding-left: 0 !important;
    }
    
    .ps-xxl-1 {
      padding-left: 0.25rem !important;
    }
    
    .ps-xxl-2 {
      padding-left: 0.5rem !important;
    }
    
    .ps-xxl-3 {
      padding-left: 1rem !important;
    }
    
    .ps-xxl-4 {
      padding-left: 1.5rem !important;
    }
    
    .ps-xxl-5 {
      padding-left: 3rem !important;
    }
    
    .text-xxl-start {
      text-align: left !important;
    }
    
    .text-xxl-end {
      text-align: right !important;
    }
    
    .text-xxl-center {
      text-align: center !important;
    }
  }
  
  @media (min-width: 1200px) {
    .fs-1 {
      font-size: 2.5rem !important;
    }
    
    .fs-2 {
      font-size: 2rem !important;
    }
    
    .fs-3 {
      font-size: 1.75rem !important;
    }
    
    .fs-4 {
      font-size: 1.5rem !important;
    }
  }
  
  @media print {
    .d-print-inline {
      display: inline !important;
    }
    
    .d-print-inline-block {
      display: inline-block !important;
    }
    
    .d-print-block {
      display: block !important;
    }
    
    .d-print-grid {
      display: grid !important;
    }
    
    .d-print-table {
      display: table !important;
    }
    
    .d-print-table-row {
      display: table-row !important;
    }
    
    .d-print-table-cell {
      display: table-cell !important;
    }
    
    .d-print-flex {
      display: flex !important;
    }
    
    .d-print-inline-flex {
      display: inline-flex !important;
    }
    
    .d-print-none {
      display: none !important;
    }
  }

  /* ===== ANIMATIONS ===== */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
  }
  
  @keyframes slideInUp {
    from {
      transform: translate3d(0, 100%, 0);
      visibility: visible;
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes slideOutDown {
    from {
      transform: translate3d(0, 0, 0);
    }
    to {
      visibility: hidden;
      transform: translate3d(0, 100%, 0);
    }
  }
  
  @keyframes slideInDown {
    from {
      transform: translate3d(0, -100%, 0);
      visibility: visible;
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes slideOutUp {
    from {
      transform: translate3d(0, 0, 0);
    }
    to {
      visibility: hidden;
      transform: translate3d(0, -100%, 0);
    }
  }
  
  @keyframes slideInLeft {
    from {
      transform: translate3d(-100%, 0, 0);
      visibility: visible;
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes slideOutLeft {
    from {
      transform: translate3d(0, 0, 0);
    }
    to {
      visibility: hidden;
      transform: translate3d(-100%, 0, 0);
    }
  }
  
  @keyframes slideInRight {
    from {
      transform: translate3d(100%, 0, 0);
      visibility: visible;
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes slideOutRight {
    from {
      transform: translate3d(0, 0, 0);
    }
    to {
      visibility: hidden;
      transform: translate3d(100%, 0, 0);
    }
  }
  
  @keyframes zoomIn {
    from {
      opacity: 0;
      transform: scale3d(0.3, 0.3, 0.3);
    }
    50% {
      opacity: 1;
    }
  }
  
  @keyframes zoomOut {
    from {
      opacity: 1;
    }
    50% {
      opacity: 0;
      transform: scale3d(0.3, 0.3, 0.3);
    }
    to {
      opacity: 0;
    }
  }
  
  @keyframes shake {
    0%, 100% {
      transform: translate3d(0, 0, 0);
    }
    10%, 30%, 50%, 70%, 90% {
      transform: translate3d(-10px, 0, 0);
    }
    20%, 40%, 60%, 80% {
      transform: translate3d(10px, 0, 0);
    }
  }
  
  @keyframes headShake {
    0% {
      transform: translateX(0);
    }
    6.5% {
      transform: translateX(-6px) rotateY(-9deg);
    }
    18.5% {
      transform: translateX(5px) rotateY(7deg);
    }
    31.5% {
      transform: translateX(-3px) rotateY(-5deg);
    }
    43.5% {
      transform: translateX(2px) rotateY(3deg);
    }
    50% {
      transform: translateX(0);
    }
  }
  
  @keyframes swing {
    15% {
      transform: translateX(5px);
    }
    30% {
      transform: translateX(-5px);
    }
    50% {
      transform: translateX(3px);
    }
    65% {
      transform: translateX(-3px);
    }
    80% {
      transform: translateX(2px);
    }
    100% {
      transform: translateX(0);
    }
  }
  
  @keyframes tada {
    0% {
      transform: scale3d(1, 1, 1);
    }
    10%, 20% {
      transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg);
    }
    30%, 50%, 70%, 90% {
      transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
    }
    40%, 60%, 80% {
      transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
    }
    100% {
      transform: scale3d(1, 1, 1);
    }
  }
  
  @keyframes wobble {
    0% {
      transform: translate3d(0, 0, 0);
    }
    15% {
      transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);
    }
    30% {
      transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);
    }
    45% {
      transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);
    }
    60% {
      transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);
    }
    75% {
      transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);
    }
    100% {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes jello {
    0%, 11.1%, to {
      transform: translate3d(0, 0, 0);
    }
    22.2% {
      transform: skewX(-12.5deg) skewY(-12.5deg);
    }
    33.3% {
      transform: skewX(6.25deg) skewY(6.25deg);
    }
    44.4% {
      transform: skewX(-3.125deg) skewY(-3.125deg);
    }
    55.5% {
      transform: skewX(1.5625deg) skewY(1.5625deg);
    }
    66.6% {
      transform: skewX(-0.78125deg) skewY(-0.78125deg);
    }
    77.7% {
      transform: skewX(0.390625deg) skewY(0.390625deg);
    }
    88.8% {
      transform: skewX(-0.1953125deg) skewY(-0.1953125deg);
    }
  }
  
  @keyframes heartBeat {
    0% {
      transform: scale(1);
    }
    14% {
      transform: scale(1.3);
    }
    28% {
      transform: scale(1);
    }
    42% {
      transform: scale(1.3);
    }
    70% {
      transform: scale(1);
    }
  }
  
  @keyframes backInUp {
    0% {
      transform: translate3d(0, 1200px, 0) scale(0.7);
      opacity: 0.7;
    }
    80% {
      transform: translate3d(0, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  @keyframes backInDown {
    0% {
      transform: translate3d(0, -1200px, 0) scale(0.7);
      opacity: 0.7;
    }
    80% {
      transform: translate3d(0, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  @keyframes backInLeft {
    0% {
      transform: translate3d(-1200px, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    80% {
      transform: translate3d(0, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  @keyframes backInRight {
    0% {
      transform: translate3d(1200px, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    80% {
      transform: translate3d(0, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  @keyframes backOutUp {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    20% {
      transform: translate3d(0, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    100% {
      transform: translate3d(0, -700px, 0) scale(0.7);
      opacity: 0.7;
    }
  }
  
  @keyframes backOutDown {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    20% {
      transform: translate3d(0, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    100% {
      transform: translate3d(0, 700px, 0) scale(0.7);
      opacity: 0.7;
    }
  }
  
  @keyframes backOutLeft {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    20% {
      transform: translate3d(0, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    100% {
      transform: translate3d(-2000px, 0, 0) scale(0.7);
      opacity: 0.7;
    }
  }
  
  @keyframes backOutRight {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    20% {
      transform: translate3d(0, 0, 0) scale(0.7);
      opacity: 0.7;
    }
    100% {
      transform: translate3d(2000px, 0, 0) scale(0.7);
      opacity: 0.7;
    }
  }
  
  @keyframes bounceIn {
    0%, 20%, 40%, 60%, 80%, to {
      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    }
    0% {
      opacity: 0;
      transform: scale3d(0.3, 0.3, 0.3);
    }
    20% {
      transform: scale3d(1.1, 1.1, 1.1);
    }
    40% {
      transform: scale3d(0.9, 0.9, 0.9);
    }
    60% {
      opacity: 1;
      transform: scale3d(1.03, 1.03, 1.03);
    }
    80% {
      transform: scale3d(0.97, 0.97, 0.97);
    }
    to {
      opacity: 1;
      transform: scale3d(1, 1, 1);
    }
  }
  
  @keyframes bounceInDown {
    0%, 60%, 75%, 90%, to {
      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    }
    0% {
      opacity: 0;
      transform: translate3d(0, -3000px, 0) scaleY(3);
    }
    60% {
      opacity: 1;
      transform: translate3d(0, 25px, 0) scaleY(0.9);
    }
    75% {
      transform: translate3d(0, -10px, 0) scaleY(0.95);
    }
    90% {
      transform: translate3d(0, 5px, 0) scaleY(0.985);
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes bounceInLeft {
    0%, 60%, 75%, 90%, to {
      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    }
    0% {
      opacity: 0;
      transform: translate3d(-3000px, 0, 0) scaleX(3);
    }
    60% {
      opacity: 1;
      transform: translate3d(25px, 0, 0) scaleX(1);
    }
    75% {
      transform: translate3d(-10px, 0, 0) scaleX(0.98);
    }
    90% {
      transform: translate3d(5px, 0, 0) scaleX(0.995);
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes bounceInRight {
    0%, 60%, 75%, 90%, to {
      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    }
    0% {
      opacity: 0;
      transform: translate3d(3000px, 0, 0) scaleX(3);
    }
    60% {
      opacity: 1;
      transform: translate3d(-25px, 0, 0) scaleX(1);
    }
    75% {
      transform: translate3d(10px, 0, 0) scaleX(0.98);
    }
    90% {
      transform: translate3d(-5px, 0, 0) scaleX(0.995);
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes bounceInUp {
    0%, 60%, 75%, 90%, to {
      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    }
    0% {
      opacity: 0;
      transform: translate3d(0, 3000px, 0) scaleY(5);
    }
    60% {
      opacity: 1;
      transform: translate3d(0, -20px, 0) scaleY(0.9);
    }
    75% {
      transform: translate3d(0, 10px, 0) scaleY(0.95);
    }
    90% {
      transform: translate3d(0, -5px, 0) scaleY(0.985);
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes bounceOut {
    20% {
      transform: scale3d(0.9, 0.9, 0.9);
    }
    50%, 55% {
      opacity: 1;
      transform: scale3d(1.1, 1.1, 1.1);
    }
    to {
      opacity: 0;
      transform: scale3d(0.3, 0.3, 0.3);
    }
  }
  
  @keyframes bounceOutDown {
    20% {
      transform: translate3d(0, 10px, 0) scaleY(0.985);
    }
    40%, 45% {
      opacity: 1;
      transform: translate3d(0, -20px, 0) scaleY(0.9);
    }
    to {
      opacity: 0;
      transform: translate3d(0, 2000px, 0) scaleY(3);
    }
  }
  
  @keyframes bounceOutLeft {
    20% {
      opacity: 1;
      transform: translate3d(20px, 0, 0) scaleX(0.9);
    }
    to {
      opacity: 0;
      transform: translate3d(-2000px, 0, 0) scaleX(2);
    }
  }
  
  @keyframes bounceOutRight {
    20% {
      opacity: 1;
      transform: translate3d(-20px, 0, 0) scaleX(0.9);
    }
    to {
      opacity: 0;
      transform: translate3d(2000px, 0, 0) scaleX(2);
    }
  }
  
  @keyframes bounceOutUp {
    20% {
      transform: translate3d(0, -10px, 0) scaleY(0.985);
    }
    40%, 45% {
      opacity: 1;
      transform: translate3d(0, 20px, 0) scaleY(0.9);
    }
    to {
      opacity: 0;
      transform: translate3d(0, -2000px, 0) scaleY(3);
    }
  }
  
  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translate3d(0, -100%, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes fadeInDownBig {
    from {
      opacity: 0;
      transform: translate3d(0, -2000px, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes fadeInLeft {
    from {
      opacity: 0;
      transform: translate3d(-100%, 0, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes fadeInLeftBig {
    from {
      opacity: 0;
      transform: translate3d(-2000px, 0, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes fadeInRight {
    from {
      opacity: 0;
      transform: translate3d(100%, 0, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes fadeInRightBig {
    from {
      opacity: 0;
      transform: translate3d(2000px, 0, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translate3d(0, 100%, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes fadeInUpBig {
    from {
      opacity: 0;
      transform: translate3d(0, 2000px, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes fadeOutDown {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      transform: translate3d(0, 100%, 0);
    }
  }
  
  @keyframes fadeOutDownBig {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      transform: translate3d(0, 2000px, 0);
    }
  }
  
  @keyframes fadeOutLeft {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      transform: translate3d(-100%, 0, 0);
    }
  }
  
  @keyframes fadeOutLeftBig {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      transform: translate3d(-2000px, 0, 0);
    }
  }
  
  @keyframes fadeOutRight {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      transform: translate3d(100%, 0, 0);
    }
  }
  
  @keyframes fadeOutRightBig {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      transform: translate3d(2000px, 0, 0);
    }
  }
  
  @keyframes fadeOutUp {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      transform: translate3d(0, -100%, 0);
    }
  }
  
  @keyframes fadeOutUpBig {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      transform: translate3d(0, -2000px, 0);
    }
  }
  
  @keyframes flip {
    from {
      transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, -360deg);
      animation-timing-function: ease-out;
    }
    40% {
      transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -190deg);
      animation-timing-function: ease-out;
    }
    50% {
      transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -170deg);
      animation-timing-function: ease-in;
    }
    80% {
      transform: perspective(400px) scale3d(0.95, 0.95, 0.95) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg);
      animation-timing-function: ease-in;
    }
    to {
      transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg);
      animation-timing-function: ease-in;
    }
  }
  
  @keyframes flipInX {
    from {
      transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
      opacity: 0;
      animation-timing-function: ease-in;
    }
    40% {
      transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
      animation-timing-function: ease-in;
    }
    60% {
      transform: perspective(400px) rotate3d(1, 0, 0, 10deg);
      opacity: 1;
      animation-timing-function: ease-in;
    }
    80% {
      transform: perspective(400px) rotate3d(1, 0, 0, -5deg);
      animation-timing-function: ease-in;
    }
    to {
      transform: perspective(400px) rotate3d(1, 0, 0, 0deg);
      animation-timing-function: ease-in;
    }
  }
  
  @keyframes flipInY {
    from {
      transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
      opacity: 0;
      animation-timing-function: ease-in;
    }
    40% {
      transform: perspective(400px) rotate3d(0, 1, 0, -20deg);
      animation-timing-function: ease-in;
    }
    60% {
      transform: perspective(400px) rotate3d(0, 1, 0, 10deg);
      opacity: 1;
      animation-timing-function: ease-in;
    }
    80% {
      transform: perspective(400px) rotate3d(0, 1, 0, -5deg);
      animation-timing-function: ease-in;
    }
    to {
      transform: perspective(400px) rotate3d(0, 1, 0, 0deg);
      animation-timing-function: ease-in;
    }
  }
  
  @keyframes flipOutX {
    from {
      transform: perspective(400px);
    }
    30% {
      transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
      opacity: 1;
    }
    to {
      transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
      opacity: 0;
    }
  }
  
  @keyframes flipOutY {
    from {
      transform: perspective(400px);
    }
    30% {
      transform: perspective(400px) rotate3d(0, 1, 0, -15deg);
      opacity: 1;
    }
    to {
      transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
      opacity: 0;
    }
  }
  
  @keyframes lightSpeedIn {
    from {
      transform: translate3d(100%, 0, 0) skewX(-30deg);
      opacity: 0;
    }
    60% {
      transform: skewX(20deg);
      opacity: 1;
    }
    80% {
      transform: skewX(-5deg);
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes lightSpeedOut {
    from {
      opacity: 1;
    }
    to {
      transform: translate3d(100%, 0, 0) skewX(30deg);
      opacity: 0;
    }
  }
  
  @keyframes rotateIn {
    from {
      transform-origin: center;
      transform: rotate3d(0, 0, 1, -200deg);
      opacity: 0;
    }
    to {
      transform-origin: center;
      transform: translate3d(0, 0, 0);
      opacity: 1;
    }
  }
  
  @keyframes rotateInDownLeft {
    from {
      transform-origin: left bottom;
      transform: rotate3d(0, 0, 1, -45deg);
      opacity: 0;
    }
    to {
      transform-origin: left bottom;
      transform: translate3d(0, 0, 0);
      opacity: 1;
    }
  }
  
  @keyframes rotateInDownRight {
    from {
      transform-origin: right bottom;
      transform: rotate3d(0, 0, 1, 45deg);
      opacity: 0;
    }
    to {
      transform-origin: right bottom;
      transform: translate3d(0, 0, 0);
      opacity: 1;
    }
  }
  
  @keyframes rotateInUpLeft {
    from {
      transform-origin: left bottom;
      transform: rotate3d(0, 0, 1, 45deg);
      opacity: 0;
    }
    to {
      transform-origin: left bottom;
      transform: translate3d(0, 0, 0);
      opacity: 1;
    }
  }
  
  @keyframes rotateInUpRight {
    from {
      transform-origin: right bottom;
      transform: rotate3d(0, 0, 1, -45deg);
      opacity: 0;
    }
    to {
      transform-origin: right bottom;
      transform: translate3d(0, 0, 0);
      opacity: 1;
    }
  }
  
  @keyframes rotateOut {
    from {
      transform-origin: center;
      opacity: 1;
    }
    to {
      transform-origin: center;
      transform: rotate3d(0, 0, 1, 200deg);
      opacity: 0;
    }
  }
  
  @keyframes rotateOutDownLeft {
    from {
      transform-origin: left bottom;
      opacity: 1;
    }
    to {
      transform-origin: left bottom;
      transform: rotate3d(0, 0, 1, 45deg);
      opacity: 0;
    }
  }
  
  @keyframes rotateOutDownRight {
    from {
      transform-origin: right bottom;
      opacity: 1;
    }
    to {
      transform-origin: right bottom;
      transform: rotate3d(0, 0, 1, -45deg);
      opacity: 0;
    }
  }
  
  @keyframes rotateOutUpLeft {
    from {
      transform-origin: left bottom;
      opacity: 1;
    }
    to {
      transform-origin: left bottom;
      transform: rotate3d(0, 0, 1, -45deg);
      opacity: 0;
    }
  }
  
  @keyframes rotateOutUpRight {
    from {
      transform-origin: right bottom;
      opacity: 1;
    }
    to {
      transform-origin: right bottom;
      transform: rotate3d(0, 0, 1, 45deg);
      opacity: 0;
    }
  }
  
  @keyframes hinge {
    0% {
      transform-origin: top left;
      animation-timing-function: ease-in-out;
    }
    20%, 60% {
      transform: rotate3d(0, 0, 1, 80deg);
      transform-origin: top left;
      animation-timing-function: ease-in-out;
    }
    40%, 80% {
      transform: rotate3d(0, 0, 1, 60deg);
      transform-origin: top left;
      animation-timing-function: ease-in-out;
      opacity: 1;
    }
    to {
      transform: translate3d(0, 700px, 0);
      opacity: 0;
    }
  }
  
  @keyframes jackInTheBox {
    from {
      opacity: 0;
      transform: scale(0.1) rotate(30deg);
      transform-origin: center bottom;
    }
    50% {
      transform: rotate(-10deg);
    }
    70% {
      transform: rotate(3deg);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  @keyframes rollIn {
    from {
      opacity: 0;
      transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes rollOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);
    }
  }
  
  @keyframes zoomInDown {
    from {
      opacity: 0;
      transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0);
      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
    60% {
      opacity: 1;
      transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
      animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    }
  }
  
  @keyframes zoomInLeft {
    from {
      opacity: 0;
      transform: scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0);
      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
    60% {
      opacity: 1;
      transform: scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0);
      animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    }
  }
  
  @keyframes zoomInRight {
    from {
      opacity: 0;
      transform: scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0);
      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
    60% {
      opacity: 1;
      transform: scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0);
      animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    }
  }
  
  @keyframes zoomInUp {
    from {
      opacity: 0;
      transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0);
      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
    60% {
      opacity: 1;
      transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
      animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    }
  }
  
  @keyframes zoomOutDown {
    40% {
      opacity: 1;
      transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
    100% {
      opacity: 0;
      transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0);
      transform-origin: center bottom;
      animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    }
  }
  
  @keyframes zoomOutLeft {
    40% {
      opacity: 1;
      transform: scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0);
    }
    100% {
      opacity: 0;
      transform: scale3d(0.1, 0.1, 0.1) translate3d(-2000px, 0, 0);
      transform-origin: left center;
    }
  }
  
  @keyframes zoomOutRight {
    40% {
      opacity: 1;
      transform: scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0);
    }
    100% {
      opacity: 0;
      transform: scale3d(0.1, 0.1, 0.1) translate3d(2000px, 0, 0);
      transform-origin: right center;
    }
  }
  
  @keyframes zoomOutUp {
    40% {
      opacity: 1;
      transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
    100% {
      opacity: 0;
      transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0);
      transform-origin: center bottom;
      animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    }
  }
  
  @keyframes slideInDown {
    from {
      transform: translate3d(0, -100%, 0);
      visibility: visible;
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes slideInLeft {
    from {
      transform: translate3d(-100%, 0, 0);
      visibility: visible;
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes slideInRight {
    from {
      transform: translate3d(100%, 0, 0);
      visibility: visible;
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes slideInUp {
    from {
      transform: translate3d(0, 100%, 0);
      visibility: visible;
    }
    to {
      transform: translate3d(0, 0, 0);
    }
  }
  
  @keyframes slideOutDown {
    from {
      transform: translate3d(0, 0, 0);
    }
    to {
      visibility: hidden;
      transform: translate3d(0, 100%, 0);
    }
  }
  
  @keyframes slideOutLeft {
    from {
      transform: translate3d(0, 0, 0);
    }
    to {
      visibility: hidden;
      transform: translate3d(-100%, 0, 0);
    }
  }
  
  @keyframes slideOutRight {
    from {
      transform: translate3d(0, 0, 0);
    }
    to {
      visibility: hidden;
      transform: translate3d(100%, 0, 0);
    }
  }
  
  @keyframes slideOutUp {
    from {
      transform: translate3d(0, 0, 0);
    }
    to {
      visibility: hidden;
      transform: translate3d(0, -100%, 0);
    }
  }
  
  /* Animation Classes */
  .animate-fadeIn { animation: fadeIn var(--transition); }
  .animate-fadeOut { animation: fadeOut var(--transition); }
  .animate-slideInUp { animation: slideInUp var(--transition); }
  .animate-slideInDown { animation: slideInDown var(--transition); }
  .animate-slideInLeft { animation: slideInLeft var(--transition); }
  .animate-slideInRight { animation: slideInRight var(--transition); }
  .animate-slideOutUp { animation: slideOutUp var(--transition); }
  .animate-slideOutDown { animation: slideOutDown var(--transition); }
  .animate-slideOutLeft { animation: slideOutLeft var(--transition); }
  .animate-slideOutRight { animation: slideOutRight var(--transition); }
  .animate-zoomIn { animation: zoomIn var(--transition); }
  .animate-zoomOut { animation: zoomOut var(--transition); }
  .animate-bounce { animation: bounce 1s infinite; }
  .animate-flash { animation: flash 1s infinite; }
  .animate-pulse { animation: pulse 2s infinite; }
  .animate-rubberBand { animation: rubberBand 1s infinite; }
  .animate-shakeX { animation: shakeX 1s infinite; }
  .animate-shakeY { animation: shakeY 1s infinite; }
  .animate-headShake { animation: headShake 1s infinite; }
  .animate-swing { animation: swing 1s infinite; }
  .animate-tada { animation: tada 1s infinite; }
  .animate-wobble { animation: wobble 1s infinite; }
  .animate-jello { animation: jello 1s infinite; }
  .animate-heartBeat { animation: heartBeat 1s infinite; }
  
  .animate-infinite {
    animation-iteration-count: infinite;
  }
  
  .animate-delay-1s {
    animation-delay: 1s;
  }
  
  .animate-delay-2s {
    animation-delay: 2s;
  }
  
  .animate-delay-3s {
    animation-delay: 3s;
  }
  
  .animate-delay-4s {
    animation-delay: 4s;
  }
  
  .animate-delay-5s {
    animation-delay: 5s;
  }
  
  .animate-fast {
    animation-duration: 0.5s;
  }
  
  .animate-faster {
    animation-duration: 0.3s;
  }
  
  .animate-slow {
    animation-duration: 2s;
  }
  
  .animate-slower {
    animation-duration: 3s;
  }
}

/* ===== GRK COMPLETED IT FROM HERE TO THE END(https://grok.com/project/7aa8cdc8-58c4-405d-b698-6a89317b86ff?tab=attachments&chat=0ffb4443-1f30-457a-b526-2a7305d6057c) ===== */
/* Rex CSS v3.4.0 - Enterprise-Grade UI Framework /
/ Copyright (c) 2025 John Kesh Mahugu | johnmahugu@gmail.com | +254722925095 /
/ License: MIT | Timestamp: September 01, 2025 */
/* ===== FONT IMPORTS ===== */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css');
/* ===== LAYERS ===== /
@layer reset {
/ Modern Reset */
*, *::before, *::after {
box-sizing: border-box;
margin: 0;
padding: 0;
}
html {
-webkit-text-size-adjust: 100%;
-ms-text-size-adjust: 100%;
font-size: 16px;
}
body {
font-family: 'Roboto', system-ui, sans-serif;
line-height: 1.6;
-webkit-font-smoothing: antialiased;
text-rendering: optimizeLegibility;
color: var(--on-background);
background: var(--background);
}
img, picture, video, canvas, svg {
display: block;
max-width: 100%;
height: auto;
}
input, button, textarea, select {
font: inherit;
background: none;
border: none;
color: inherit;
}
a {
color: inherit;
text-decoration: none;
}
table {
border-collapse: collapse;
border-spacing: 0;
}
ul, ol {
padding: 0;
list-style: none;
}
button {
cursor: pointer;
background: none;
border: none;
}
/* Accessibility */
:focus-visible {
outline: 2px solid var(--primary);
outline-offset: 2px;
}
@media (prefers-reduced-motion: reduce) {
*, *::before, *::after {
transition: none !important;
animation: none !important;
}
}
}
@layer base {
/* ===== THEMING VARIABLES ===== /
:root {
/ Material Design 3 Colors */
--primary: #6200ea;
--on-primary: #ffffff;
--primary-container: #d0bfff;
--on-primary-container: #21005d;
--secondary: #03dac6;
--on-secondary: #000000;
--secondary-container: #d0f8f2;
--on-secondary-container: #00201d;
--tertiary: #ff4081;
--on-tertiary: #ffffff;
--tertiary-container: #ffdade;
--on-tertiary-container: #40000a;
--error: #b00020;
--on-error: #ffffff;
--error-container: #ffdad6;
--on-error-container: #410002;
--background: #ffffff;
--on-background: #1c1b1f;
--surface: #f5f5f5;
--on-surface: #1c1b1f;
--surface-variant: #e7e0ec;
--on-surface-variant: #49454f;
--outline: #7a757f;
--shadow: rgba(0,0,0,0.2);
/* Extended Colors */
--success: #00c853;
--warning: #ffd600;
--info: #2196f3;
--danger: #ff3860;
--link: #3273dc;
/* Spacing & Sizing */
--spacing-unit: 4px;
--font-size-base: 1rem;
--border-radius: 4px;
--transition: 0.3s cubic-bezier(0.25, 0.8, 0.5, 1);
/* Typography */
--font-family-sans: 'Roboto', system-ui, sans-serif;
--font-family-mono: 'Roboto Mono', Consolas, monospace;
/* Shadows */
--shadow-sm: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
--shadow-md: 0 4px 6px rgba(0,0,0,0.1);
--shadow-lg: 0 10px 20px rgba(0,0,0,0.1);
--shadow-xl: 0 14px 28px rgba(0,0,0,0.12), 0 10px 10px rgba(0,0,0,0.08);
}
/* Dark Theme */
[data-theme="dark"], @media (prefers-color-scheme: dark) {
--primary: #bb86fc;
--on-primary: #32005d;
--primary-container: #4a007a;
--on-primary-container: #e3d6ff;
--secondary: #b4ccc5;
--on-secondary: #1e3531;
--secondary-container: #354b47;
--on-secondary-container: #d0e8e1;
--tertiary: #ffb3ba;
--on-tertiary: #68001e;
--tertiary-container: #8e2c37;
--on-tertiary-container: #ffb3ba;
--error: #ffb4ab;
--on-error: #690005;
--error-container: #93000a;
--on-error-container: #ffb4ab;
--background: #1c1b1f;
--on-background: #e6e1e5;
--surface: #1c1b1f;
--on-surface: #e6e1e5;
--surface-variant: #49454f;
--on-surface-variant: #cbc4cf;
--outline: #948f99;
}
/* High Contrast Theme */
[data-theme="high-contrast"] {
--primary: #000;
--on-primary: #fff;
--background: #fff;
--on-background: #000;
--surface: #fff;
--on-surface: #000;
--border: 2px solid #000;
--shadow: none;
}
/* RTL Support */
[dir="rtl"] {
direction: rtl;
text-align: right;
}
/* Root Styles */
html {
scroll-behavior: smooth;
}
body {
min-height: 100vh;
text-rendering: optimizeSpeed;
}
}
@layer utilities {
/* ===== SPACING ===== */
.m-0 { margin: 0; }
.m-1 { margin: calc(var(--spacing-unit) * 1); }
.m-2 { margin: calc(var(--spacing-unit) * 2); }
.m-3 { margin: calc(var(--spacing-unit) * 3); }
.m-4 { margin: calc(var(--spacing-unit) * 4); }
.m-5 { margin: calc(var(--spacing-unit) * 5); }
.m-6 { margin: calc(var(--spacing-unit) * 6); }
.m-8 { margin: calc(var(--spacing-unit) * 8); }
.m-10 { margin: calc(var(--spacing-unit) * 10); }
.m-12 { margin: calc(var(--spacing-unit) * 12); }
.m-16 { margin: calc(var(--spacing-unit) * 16); }
.m-20 { margin: calc(var(--spacing-unit) * 20); }
.mt-0 { margin-top: 0; }
.mt-1 { margin-top: calc(var(--spacing-unit) * 1); }
.mt-2 { margin-top: calc(var(--spacing-unit) * 2); }
.mt-3 { margin-top: calc(var(--spacing-unit) * 3); }
.mt-4 { margin-top: calc(var(--spacing-unit) * 4); }
.mt-5 { margin-top: calc(var(--spacing-unit) * 5); }
.mt-6 { margin-top: calc(var(--spacing-unit) * 6); }
.mt-8 { margin-top: calc(var(--spacing-unit) * 8); }
.mt-10 { margin-top: calc(var(--spacing-unit) * 10); }
.mt-12 { margin-top: calc(var(--spacing-unit) * 12); }
.mt-16 { margin-top: calc(var(--spacing-unit) * 16); }
.mt-20 { margin-top: calc(var(--spacing-unit) * 20); }
.mb-0 { margin-bottom: 0; }
.mb-1 { margin-bottom: calc(var(--spacing-unit) * 1); }
.mb-2 { margin-bottom: calc(var(--spacing-unit) * 2); }
.mb-3 { margin-bottom: calc(var(--spacing-unit) * 3); }
.mb-4 { margin-bottom: calc(var(--spacing-unit) * 4); }
.mb-5 { margin-bottom: calc(var(--spacing-unit) * 5); }
.mb-6 { margin-bottom: calc(var(--spacing-unit) * 6); }
.mb-8 { margin-bottom: calc(var(--spacing-unit) * 8); }
.mb-10 { margin-bottom: calc(var(--spacing-unit) * 10); }
.mb-12 { margin-bottom: calc(var(--spacing-unit) * 12); }
.mb-16 { margin-bottom: calc(var(--spacing-unit) * 16); }
.mb-20 { margin-bottom: calc(var(--spacing-unit) * 20); }
.ml-0 { margin-left: 0; }
.ml-1 { margin-left: calc(var(--spacing-unit) * 1); }
.ml-2 { margin-left: calc(var(--spacing-unit) * 2); }
.ml-3 { margin-left: calc(var(--spacing-unit) * 3); }
.ml-4 { margin-left: calc(var(--spacing-unit) * 4); }
.ml-5 { margin-left: calc(var(--spacing-unit) * 5); }
.ml-6 { margin-left: calc(var(--spacing-unit) * 6); }
.ml-8 { margin-left: calc(var(--spacing-unit) * 8); }
.ml-10 { margin-left: calc(var(--spacing-unit) * 10); }
.ml-12 { margin-left: calc(var(--spacing-unit) * 12); }
.ml-16 { margin-left: calc(var(--spacing-unit) * 16); }
.ml-20 { margin-left: calc(var(--spacing-unit) * 20); }
.mr-0 { margin-right: 0; }
.mr-1 { margin-right: calc(var(--spacing-unit) * 1); }
.mr-2 { margin-right: calc(var(--spacing-unit) * 2); }
.mr-3 { margin-right: calc(var(--spacing-unit) * 3); }
.mr-4 { margin-right: calc(var(--spacing-unit) * 4); }
.mr-5 { margin-right: calc(var(--spacing-unit) * 5); }
.mr-6 { margin-right: calc(var(--spacing-unit) * 6); }
.mr-8 { margin-right: calc(var(--spacing-unit) * 8); }
.mr-10 { margin-right: calc(var(--spacing-unit) * 10); }
.mr-12 { margin-right: calc(var(--spacing-unit) * 12); }
.mr-16 { margin-right: calc(var(--spacing-unit) * 16); }
.mr-20 { margin-right: calc(var(--spacing-unit) * 20); }
.mx-0 { margin-left: 0; margin-right: 0; }
.mx-1 { margin-left: calc(var(--spacing-unit) * 1); margin-right: calc(var(--spacing-unit) * 1); }
.mx-2 { margin-left: calc(var(--spacing-unit) * 2); margin-right: calc(var(--spacing-unit) * 2); }
.mx-3 { margin-left: calc(var(--spacing-unit) * 3); margin-right: calc(var(--spacing-unit) * 3); }
.mx-4 { margin-left: calc(var(--spacing-unit) * 4); margin-right: calc(var(--spacing-unit) * 4); }
.mx-5 { margin-left: calc(var(--spacing-unit) * 5); margin-right: calc(var(--spacing-unit) * 5); }
.mx-6 { margin-left: calc(var(--spacing-unit) * 6); margin-right: calc(var(--spacing-unit) * 6); }
.mx-8 { margin-left: calc(var(--spacing-unit) * 8); margin-right: calc(var(--spacing-unit) * 8); }
.mx-10 { margin-left: calc(var(--spacing-unit) * 10); margin-right: calc(var(--spacing-unit) * 10); }
.mx-12 { margin-left: calc(var(--spacing-unit) * 12); margin-right: calc(var(--spacing-unit) * 12); }
.mx-16 { margin-left: calc(var(--spacing-unit) * 16); margin-right: calc(var(--spacing-unit) * 16); }
.mx-20 { margin-left: calc(var(--spacing-unit) * 20); margin-right: calc(var(--spacing-unit) * 20); }
.my-0 { margin-top: 0; margin-bottom: 0; }
.my-1 { margin-top: calc(var(--spacing-unit) * 1); margin-bottom: calc(var(--spacing-unit) * 1); }
.my-2 { margin-top: calc(var(--spacing-unit) * 2); margin-bottom: calc(var(--spacing-unit) * 2); }
.my-3 { margin-top: calc(var(--spacing-unit) * 3); margin-bottom: calc(var(--spacing-unit) * 3); }
.my-4 { margin-top: calc(var(--spacing-unit) * 4); margin-bottom: calc(var(--spacing-unit) * 4); }
.my-5 { margin-top: calc(var(--spacing-unit) * 5); margin-bottom: calc(var(--spacing-unit) * 5); }
.my-6 { margin-top: calc(var(--spacing-unit) * 6); margin-bottom: calc(var(--spacing-unit) * 6); }
.my-8 { margin-top: calc(var(--spacing-unit) * 8); margin-bottom: calc(var(--spacing-unit) * 8); }
.my-10 { margin-top: calc(var(--spacing-unit) * 10); margin-bottom: calc(var(--spacing-unit) * 10); }
.my-12 { margin-top: calc(var(--spacing-unit) * 12); margin-bottom: calc(var(--spacing-unit) * 12); }
.my-16 { margin-top: calc(var(--spacing-unit) * 16); margin-bottom: calc(var(--spacing-unit) * 16); }
.my-20 { margin-top: calc(var(--spacing-unit) * 20); margin-bottom: calc(var(--spacing-unit) * 20); }
.p-0 { padding: 0; }
.p-1 { padding: calc(var(--spacing-unit) * 1); }
.p-2 { padding: calc(var(--spacing-unit) * 2); }
.p-3 { padding: calc(var(--spacing-unit) * 3); }
.p-4 { padding: calc(var(--spacing-unit) * 4); }
.p-5 { padding: calc(var(--spacing-unit) * 5); }
.p-6 { padding: calc(var(--spacing-unit) * 6); }
.p-8 { padding: calc(var(--spacing-unit) * 8); }
.p-10 { padding: calc(var(--spacing-unit) * 10); }
.p-12 { padding: calc(var(--spacing-unit) * 12); }
.p-16 { padding: calc(var(--spacing-unit) * 16); }
.p-20 { padding: calc(var(--spacing-unit) * 20); }
.pt-0 { padding-top: 0; }
.pt-1 { padding-top: calc(var(--spacing-unit) * 1); }
.pt-2 { padding-top: calc(var(--spacing-unit) * 2); }
.pt-3 { padding-top: calc(var(--spacing-unit) * 3); }
.pt-4 { padding-top: calc(var(--spacing-unit) * 4); }
.pt-5 { padding-top: calc(var(--spacing-unit) * 5); }
.pt-6 { padding-top: calc(var(--spacing-unit) * 6); }
.pt-8 { padding-top: calc(var(--spacing-unit) * 8); }
.pt-10 { padding-top: calc(var(--spacing-unit) * 10); }
.pt-12 { padding-top: calc(var(--spacing-unit) * 12); }
.pt-16 { padding-top: calc(var(--spacing-unit) * 16); }
.pt-20 { padding-top: calc(var(--spacing-unit) * 20); }
.pb-0 { padding-bottom: 0; }
.pb-1 { padding-bottom: calc(var(--spacing-unit) * 1); }
.pb-2 { padding-bottom: calc(var(--spacing-unit) * 2); }
.pb-3 { padding-bottom: calc(var(--spacing-unit) * 3); }
.pb-4 { padding-bottom: calc(var(--spacing-unit) * 4); }
.pb-5 { padding-bottom: calc(var(--spacing-unit) * 5); }
.pb-6 { padding-bottom: calc(var(--spacing-unit) * 6); }
.pb-8 { padding-bottom: calc(var(--spacing-unit) * 8); }
.pb-10 { padding-bottom: calc(var(--spacing-unit) * 10); }
.pb-12 { padding-bottom: calc(var(--spacing-unit) * 12); }
.pb-16 { padding-bottom: calc(var(--spacing-unit) * 16); }
.pb-20 { padding-bottom: calc(var(--spacing-unit) * 20); }
.pl-0 { padding-left: 0; }
.pl-1 { padding-left: calc(var(--spacing-unit) * 1); }
.pl-2 { padding-left: calc(var(--spacing-unit) * 2); }
.pl-3 { padding-left: calc(var(--spacing-unit) * 3); }
.pl-4 { padding-left: calc(var(--spacing-unit) * 4); }
.pl-5 { padding-left: calc(var(--spacing-unit) * 5); }
.pl-6 { padding-left: calc(var(--spacing-unit) * 6); }
.pl-8 { padding-left: calc(var(--spacing-unit) * 8); }
.pl-10 { padding-left: calc(var(--spacing-unit) * 10); }
.pl-12 { padding-left: calc(var(--spacing-unit) * 12); }
.pl-16 { padding-left: calc(var(--spacing-unit) * 16); }
.pl-20 { padding-left: calc(var(--spacing-unit) * 20); }
.pr-0 { padding-right: 0; }
.pr-1 { padding-right: calc(var(--spacing-unit) * 1); }
.pr-2 { padding-right: calc(var(--spacing-unit) * 2); }
.pr-3 { padding-right: calc(var(--spacing-unit) * 3); }
.pr-4 { padding-right: calc(var(--spacing-unit) * 4); }
.pr-5 { padding-right: calc(var(--spacing-unit) * 5); }
.pr-6 { padding-right: calc(var(--spacing-unit) * 6); }
.pr-8 { padding-right: calc(var(--spacing-unit) * 8); }
.pr-10 { padding-right: calc(var(--spacing-unit) * 10); }
.pr-12 { padding-right: calc(var(--spacing-unit) * 12); }
.pr-16 { padding-right: calc(var(--spacing-unit) * 16); }
.pr-20 { padding-right: calc(var(--spacing-unit) * 20); }
.px-0 { padding-left: 0; padding-right: 0; }
.px-1 { padding-left: calc(var(--spacing-unit) * 1); padding-right: calc(var(--spacing-unit) * 1); }
.px-2 { padding-left: calc(var(--spacing-unit) * 2); padding-right: calc(var(--spacing-unit) * 2); }
.px-3 { padding-left: calc(var(--spacing-unit) * 3); padding-right: calc(var(--spacing-unit) * 3); }
.px-4 { padding-left: calc(var(--spacing-unit) * 4); padding-right: calc(var(--spacing-unit) * 4); }
.px-5 { padding-left: calc(var(--spacing-unit) * 5); padding-right: calc(var(--spacing-unit) * 5); }
.px-6 { padding-left: calc(var(--spacing-unit) * 6); padding-right: calc(var(--spacing-unit) * 6); }
.px-8 { padding-left: calc(var(--spacing-unit) * 8); padding-right: calc(var(--spacing-unit) * 8); }
.px-10 { padding-left: calc(var(--spacing-unit) * 10); padding-right: calc(var(--spacing-unit) * 10); }
.px-12 { padding-left: calc(var(--spacing-unit) * 12); padding-right: calc(var(--spacing-unit) * 12); }
.px-16 { padding-left: calc(var(--spacing-unit) * 16); padding-right: calc(var(--spacing-unit) * 16); }
.px-20 { padding-left: calc(var(--spacing-unit) * 20); padding-right: calc(var(--spacing-unit) * 20); }
.py-0 { padding-top: 0; padding-bottom: 0; }
.py-1 { padding-top: calc(var(--spacing-unit) * 1); padding-bottom: calc(var(--spacing-unit) * 1); }
.py-2 { padding-top: calc(var(--spacing-unit) * 2); padding-bottom: calc(var(--spacing-unit) * 2); }
.py-3 { padding-top: calc(var(--spacing-unit) * 3); padding-bottom: calc(var(--spacing-unit) * 3); }
.py-4 { padding-top: calc(var(--spacing-unit) * 4); padding-bottom: calc(var(--spacing-unit) * 4); }
.py-5 { padding-top: calc(var(--spacing-unit) * 5); padding-bottom: calc(var(--spacing-unit) * 5); }
.py-6 { padding-top: calc(var(--spacing-unit) * 6); padding-bottom: calc(var(--spacing-unit) * 6); }
.py-8 { padding-top: calc(var(--spacing-unit) * 8); padding-bottom: calc(var(--spacing-unit) * 8); }
.py-10 { padding-top: calc(var(--spacing-unit) * 10); padding-bottom: calc(var(--spacing-unit) * 10); }
.py-12 { padding-top: calc(var(--spacing-unit) * 12); padding-bottom: calc(var(--spacing-unit) * 12); }
.py-16 { padding-top: calc(var(--spacing-unit) * 16); padding-bottom: calc(var(--spacing-unit) * 16); }
.py-20 { padding-top: calc(var(--spacing-unit) * 20); padding-bottom: calc(var(--spacing-unit) * 20); }
/* ===== COLORS ===== */
.bg-primary { background-color: var(--primary); }
.bg-secondary { background-color: var(--secondary); }
.bg-tertiary { background-color: var(--tertiary); }
.bg-error { background-color: var(--error); }
.bg-success { background-color: var(--success); }
.bg-warning { background-color: var(--warning); }
.bg-info { background-color: var(--info); }
.bg-danger { background-color: var(--danger); }
.bg-link { background-color: var(--link); }
.bg-surface { background-color: var(--surface); }
.bg-background { background-color: var(--background); }
.bg-transparent { background-color: transparent; }
.text-primary { color: var(--primary); }
.text-secondary { color: var(--secondary); }
.text-tertiary { color: var(--tertiary); }
.text-error { color: var(--error); }
.text-success { color: var(--success); }
.text-warning { color: var(--warning); }
.text-info { color: var(--info); }
.text-danger { color: var(--danger); }
.text-link { color: var(--link); }
.text-on-surface { color: var(--on-surface); }
.text-on-background { color: var(--on-background); }
/* =====TYPOGRAPHY ===== */
.text-xs { font-size: 0.75rem; }
.text-sm { font-size: 0.875rem; }
.text-base { font-size: 1rem; }
.text-lg { font-size: 1.125rem; }
.text-xl { font-size: 1.25rem; }
.text-2xl { font-size: 1.5rem; }
.text-3xl { font-size: 1.875rem; }
.text-4xl { font-size: 2.25rem; }
.text-5xl { font-size: 3rem; }
.text-6xl { font-size: 3.75rem; }
.font-thin { font-weight: 100; }
.font-light { font-weight: 300; }
.font-normal { font-weight: 400; }
.font-medium { font-weight: 500; }
.font-semibold { font-weight: 600; }
.font-bold { font-weight: 700; }
.font-extrabold { font-weight: 800; }
.font-black { font-weight: 900; }
.text-left { text-align: left; }
.text-center { text-align: center; }
.text-right { text-align: right; }
.text-justify { text-align: justify; }
.leading-none { line-height: 1; }
.leading-tight { line-height: 1.25; }
.leading-snug { line-height: 1.375; }
.leading-normal { line-height: 1.5; }
.leading-relaxed { line-height: 1.625; }
.leading-loose { line-height: 2; }
/* ===== LAYOUT ===== */
.flex { display: flex; }
.flex-row { flex-direction: row; }
.flex-col { flex-direction: column; }
.flex-wrap { flex-wrap: wrap; }
.items-start { align-items: flex-start; }
.items-end { align-items: flex-end; }
.items-center { align-items: center; }
.items-baseline { align-items: baseline; }
.items-stretch { align-items: stretch; }
.justify-start { justify-content: flex-start; }
.justify-end { justify-content: flex-end; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.justify-around { justify-content: space-around; }
.justify-evenly { justify-content: space-evenly; }
.grid { display: grid; }
.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
.grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
.grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
.grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
.grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
.grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
.grid-cols-7 { grid-template-columns: repeat(7, minmax(0, 1fr)); }
.grid-cols-8 { grid-template-columns: repeat(8, minmax(0, 1fr)); }
.grid-cols-9 { grid-template-columns: repeat(9, minmax(0, 1fr)); }
.grid-cols-10 { grid-template-columns: repeat(10, minmax(0, 1fr)); }
.grid-cols-11 { grid-template-columns: repeat(11, minmax(0, 1fr)); }
.grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
.gap-0 { gap: 0; }
.gap-1 { gap: calc(var(--spacing-unit) * 1); }
.gap-2 { gap: calc(var(--spacing-unit) * 2); }
.gap-3 { gap: calc(var(--spacing-unit) * 3); }
.gap-4 { gap: calc(var(--spacing-unit) * 4); }
.gap-5 { gap: calc(var(--spacing-unit) * 5); }
.gap-6 { gap: calc(var(--spacing-unit) * 6); }
.gap-8 { gap: calc(var(--spacing-unit) * 8); }
.gap-10 { gap: calc(var(--spacing-unit) * 10); }
.gap-12 { gap: calc(var(--spacing-unit) * 12); }
.gap-16 { gap: calc(var(--spacing-unit) * 16); }
.gap-20 { gap: calc(var(--spacing-unit) * 20); }
.col-span-1 { grid-column: span 1 / span 1; }
.col-span-2 { grid-column: span 2 / span 2; }
.col-span-3 { grid-column: span 3 / span 3; }
.col-span-4 { grid-column: span 4 / span 4; }
.col-span-5 { grid-column: span 5 / span 5; }
.col-span-6 { grid-column: span 6 / span 6; }
.col-span-7 { grid-column: span 7 / span 7; }
.col-span-8 { grid-column: span 8 / span 8; }
.col-span-9 { grid-column: span 9 / span 9; }
.col-span-10 { grid-column: span 10 / span 10; }
.col-span-11 { grid-column: span 11 / span 11; }
.col-span-12 { grid-column: span 12 / span 12; }
.row-span-1 { grid-row: span 1 / span 1; }
.row-span-2 { grid-row: span 2 / span 2; }
.row-span-3 { grid-row: span 3 / span 3; }
.row-span-4 { grid-row: span 4 / span 4; }
.row-span-5 { grid-row: span 5 / span 5; }
.row-span-6 { grid-row: span 6 / span 6; }
/* ===== BORDERS & SHADOWS ===== */
.border { border: 1px solid var(--outline); }
.border-t { border-top: 1px solid var(--outline); }
.border-b { border-bottom: 1px solid var(--outline); }
.border-l { border-left: 1px solid var(--outline); }
.border-r { border-right: 1px solid var(--outline); }
.border-0 { border-width: 0; }
.border-2 { border-width: 2px; }
.border-4 { border-width: 4px; }
.border-8 { border-width: 8px; }
.rounded-none { border-radius: 0; }
.rounded-sm { border-radius: 0.125rem; }
.rounded { border-radius: 0.25rem; }
.rounded-md { border-radius: 0.375rem; }
.rounded-lg { border-radius: 0.5rem; }
.rounded-xl { border-radius: 0.75rem; }
.rounded-2xl { border-radius: 1rem; }
.rounded-full { border-radius: 9999px; }
.shadow-none { box-shadow: none; }
.shadow-sm { box-shadow: var(--shadow-sm); }
.shadow { box-shadow: var(--shadow-md); }
.shadow-md { box-shadow: var(--shadow-md); }
.shadow-lg { box-shadow: var(--shadow-lg); }
.shadow-xl { box-shadow: var(--shadow-xl); }
/* ===== SIZING ===== */
.w-0 { width: 0; }
.w-auto { width: auto; }
.w-full { width: 100%; }
.w-screen { width: 100vw; }
.w-min { width: min-content; }
.w-max { width: max-content; }
.w-1 { width: calc(var(--spacing-unit) * 1); }
.w-2 { width: calc(var(--spacing-unit) * 2); }
.w-4 { width: calc(var(--spacing-unit) * 4); }
.w-6 { width: calc(var(--spacing-unit) * 6); }
.w-8 { width: calc(var(--spacing-unit) * 8); }
.w-10 { width: calc(var(--spacing-unit) * 10); }
.w-12 { width: calc(var(--spacing-unit) * 12); }
.w-16 { width: calc(var(--spacing-unit) * 16); }
.w-20 { width: calc(var(--spacing-unit) * 20); }
.w-24 { width: calc(var(--spacing-unit) * 24); }
.w-32 { width: calc(var(--spacing-unit) * 32); }
.w-40 { width: calc(var(--spacing-unit) * 40); }
.w-48 { width: calc(var(--spacing-unit) * 48); }
.w-56 { width: calc(var(--spacing-unit) * 56); }
.w-64 { width: calc(var(--spacing-unit) * 64); }
.w-1/2 { width: 50%; }
.w-1/3 { width: 33.333333%; }
.w-2/3 { width: 66.666667%; }
.w-1/4 { width: 25%; }
.w-3/4 { width: 75%; }
.w-1/5 { width: 20%; }
.w-2/5 { width: 40%; }
.w-3/5 { width: 60%; }
.w-4/5 { width: 80%; }
.w-1/6 { width: 16.666667%; }
.w-5/6 { width: 83.333333%; }
.w-1/12 { width: 8.333333%; }
.w-5/12 { width: 41.666667%; }
.w-7/12 { width: 58.333333%; }
.w-11/12 { width: 91.666667%; }
.h-0 { height: 0; }
.h-auto { height: auto; }
.h-full { height: 100%; }
.h-screen { height: 100vh; }
.h-min { height: min-content; }
.h-max { height: max-content; }
.h-1 { height: calc(var(--spacing-unit) * 1); }
.h-2 { height: calc(var(--spacing-unit) * 2); }
.h-4 { height: calc(var(--spacing-unit) * 4); }
.h-6 { height: calc(var(--spacing-unit) * 6); }
.h-8 { height: calc(var(--spacing-unit) * 8); }
.h-10 { height: calc(var(--spacing-unit) * 10); }
.h-12 { height: calc(var(--spacing-unit) * 12); }
.h-16 { height: calc(var(--spacing-unit) * 16); }
.h-20 { height: calc(var(--spacing-unit) * 20); }
.h-24 { height: calc(var(--spacing-unit) * 24); }
.h-32 { height: calc(var(--spacing-unit) * 32); }
.h-40 { height: calc(var(--spacing-unit) * 40); }
.h-48 { height: calc(var(--spacing-unit) * 48); }
.h-56 { height: calc(var(--spacing-unit) * 56); }
.h-64 { height: calc(var(--spacing-unit) * 64); }
.h-1/2 { height: 50%; }
.h-1/3 { height: 33.333333%; }
.h-2/3 { height: 66.666667%; }
.h-1/4 { height: 25%; }
.h-3/4 { height: 75%; }
.h-1/5 { height: 20%; }
.h-2/5 { height: 40%; }
.h-3/5 { height: 60%; }
.h-4/5 { height: 80%; }
.h-1/6 { height: 16.666667%; }
.h-5/6 { height: 83.333333%; }
.max-w-xs { max-width: 20rem; }
.max-w-sm { max-width: 24rem; }
.max-w-md { max-width: 28rem; }
.max-w-lg { max-width: 32rem; }
.max-w-xl { max-width: 36rem; }
.max-w-2xl { max-width: 42rem; }
.max-w-3xl { max-width: 48rem; }
.max-w-4xl { max-width: 56rem; }
.max-w-5xl { max-width: 64rem; }
.max-w-6xl { max-width: 72rem; }
.max-w-7xl { max-width: 80rem; }
.max-w-full { max-width: 100%; }
.max-w-screen-sm { max-width: 640px; }
.max-w-screen-md { max-width: 768px; }
.max-w-screen-lg { max-width: 1024px; }
.max-w-screen-xl { max-width: 1280px; }
.max-w-screen-2xl { max-width: 1536px; }
.min-w-0 { min-width: 0; }
.min-w-full { min-width: 100%; }
/* ===== DISPLAY & VISIBILITY ===== */
.block { display: block; }
.inline-block { display: inline-block; }
.inline { display: inline; }
.hidden { display: none; }
.visible { visibility: visible; }
.invisible { visibility: hidden; }
/* ===== POSITIONING ===== */
.static { position: static; }
.fixed { position: fixed; }
.absolute { position: absolute; }
.relative { position: relative; }
.sticky { position: sticky; }
.top-0 { top: 0; }
.top-1 { top: calc(var(--spacing-unit) * 1); }
.top-2 { top: calc(var(--spacing-unit) * 2); }
.top-4 { top: calc(var(--spacing-unit) * 4); }
.top-auto { top: auto; }
.bottom-0 { bottom: 0; }
.bottom-1 { bottom: calc(var(--spacing-unit) * 1); }
.bottom-2 { bottom: calc(var(--spacing-unit) * 2); }
.bottom-4 { bottom: calc(var(--spacing-unit) * 4); }
.bottom-auto { bottom: auto; }
.left-0 { left: 0; }
.left-1 { left: calc(var(--spacing-unit) * 1); }
.left-2 { left: calc(var(--spacing-unit) * 2); }
.left-4 { left: calc(var(--spacing-unit) * 4); }
.left-auto { left: auto; }
.right-0 { right: 0; }
.right-1 { right: calc(var(--spacing-unit) * 1); }
.right-2 { right: calc(var(--spacing-unit) * 2); }
.right-4 { right: calc(var(--spacing-unit) * 4); }
.right-auto { right: auto; }
.z-0 { z-index: 0; }
.z-10 { z-index: 10; }
.z-20 { z-index: 20; }
.z-30 { z-index: 30; }
.z-40 { z-index: 40; }
.z-50 { z-index: 50; }
.z-auto { z-index: auto; }
/* ===== TRANSITIONS & ANIMATIONS ===== */
.transition { transition: var(--transition); }
.transition-all { transition: all var(--transition); }
.transition-colors { transition: background-color var(--transition), border-color var(--transition), color var(--transition); }
.transition-opacity { transition: opacity var(--transition); }
.transition-shadow { transition: box-shadow var(--transition); }
.transition-transform { transition: transform var(--transition); }
.ease-linear { transition-timing-function: linear; }
.ease-in { transition-timing-function: cubic-bezier(0.4, 0, 1, 1); }
.ease-out { transition-timing-function: cubic-bezier(0, 0, 0.2, 1); }
.ease-in-out { transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }
@keyframes fadeIn {
from { opacity: 0; }
to { opacity: 1; }
}
@keyframes fadeOut {
from { opacity: 1; }
to { opacity: 0; }
}
@keyframes slideInUp {
from { transform: translate3d(0, 100%, 0); visibility: visible; }
to { transform: translate3d(0, 0, 0); }
}
@keyframes slideInDown {
from { transform: translate3d(0, -100%, 0); visibility: visible; }
to { transform: translate3d(0, 0, 0); }
}
@keyframes slideInLeft {
from { transform: translate3d(-100%, 0, 0); visibility: visible; }
to { transform: translate3d(0, 0, 0); }
}
@keyframes slideInRight {
from { transform: translate3d(100%, 0, 0); visibility: visible; }
to { transform: translate3d(0, 0, 0); }
}
@keyframes slideOutUp {
from { transform: translate3d(0, 0, 0); }
to { transform: translate3d(0, -100%, 0); visibility: hidden; }
}
@keyframes slideOutDown {
from { transform: translate3d(0, 0, 0); }
to { transform: translate3d(0, 100%, 0); visibility: hidden; }
}
@keyframes slideOutLeft {
from { transform: translate3d(0, 0, 0); }
to { transform: translate3d(-100%, 0, 0); visibility: hidden; }
}
@keyframes slideOutRight {
from { transform: translate3d(0, 0, 0); }
to { transform: translate3d(100%, 0, 0); visibility: hidden; }
}
@keyframes zoomIn {
from { opacity: 0; transform: scale3d(0.3, 0.3, 0.3); }
50% { opacity: 1; }
}
@keyframes zoomOut {
from { opacity: 1; }
50% { opacity: 0; transform: scale3d(0.3, 0.3, 0.3); }
to { opacity: 0; }
}
@keyframes bounce {
from, 20%, 53%, to {
animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
transform: translate3d(0, 0, 0);
}
40%, 43% {
animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
transform: translate3d(0, -30px, 0) scaleY(1.1);
}
70% {
animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
transform: translate3d(0, -15px, 0) scaleY(1.05);
}
80% {
transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
transform: translate3d(0, 0, 0) scaleY(0.95);
}
90% {
transform: translate3d(0, -4px, 0) scaleY(1.02);
}
}
@keyframes flash {
from, 50%, to { opacity: 1; }
25%, 75% { opacity: 0; }
}
@keyframes pulse {
from { transform: scale3d(1, 1, 1); }
50% { transform: scale3d(1.05, 1.05, 1.05); }
to { transform: scale3d(1, 1, 1); }
}
@keyframes rubberBand {
from { transform: scale3d(1, 1, 1); }
30% { transform: scale3d(1.25, 0.75, 1); }
40% { transform: scale3d(0.75, 1.25, 1); }
50% { transform: scale3d(1.15, 0.85, 1); }
65% { transform: scale3d(0.95, 1.05, 1); }
75% { transform: scale3d(1.05, 0.95, 1); }
to { transform: scale3d(1, 1, 1); }
}
@keyframes shakeX {
from, to { transform: translate3d(0, 0, 0); }
10%, 30%, 50%, 70%, 90% { transform: translate3d(-10px, 0, 0); }
20%, 40%, 60%, 80% { transform: translate3d(10px, 0, 0); }
}
@keyframes shakeY {
from, to { transform: translate3d(0, 0, 0); }
10%, 30%, 50%, 70%, 90% { transform: translate3d(0, -10px, 0); }
20%, 40%, 60%, 80% { transform: translate3d(0, 10px, 0); }
}
@keyframes headShake {
0% { transform: translateX(0); }
6.5% { transform: translateX(-6px) rotateY(-9deg); }
18.5% { transform: translateX(5px) rotateY(7deg); }
31.5% { transform: translateX(-3px) rotateY(-5deg); }
43.5% { transform: translateX(2px) rotateY(3deg); }
50% { transform: translateX(0); }
}
@keyframes swing {
20% { transform: rotate3d(0, 0, 1, 15deg); }
40% { transform: rotate3d(0, 0, 1, -10deg); }
60% { transform: rotate3d(0, 0, 1, 5deg); }
80% { transform: rotate3d(0, 0, 1, -5deg); }
to { transform: rotate3d(0, 0, 1, 0deg); }
}
@keyframes tada {
from { transform: scale3d(1, 1, 1); }
10%, 20% { transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg); }
30%, 50%, 70%, 90% { transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg); }
40%, 60%, 80% { transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg); }
to { transform: scale3d(1, 1, 1); }
}
@keyframes wobble {
from { transform: translate3d(0, 0, 0); }
15% { transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg); }
30% { transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg); }
45% { transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg); }
60% { transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg); }
75% { transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg); }
to { transform: translate3d(0, 0, 0); }
}
@keyframes jello {
from, 11.1%, to { transform: translate3d(0, 0, 0); }
22.2% { transform: skewX(-12.5deg) skewY(-12.5deg); }
33.3% { transform: skewX(6.25deg) skewY(6.25deg); }
44.4% { transform: skewX(-3.125deg) skewY(-3.125deg); }
55.5% { transform: skewX(1.5625deg) skewY(1.5625deg); }
66.6% { transform: skewX(-0.78125deg) skewY(-0.78125deg); }
77.7% { transform: skewX(0.390625deg) skewY(0.390625deg); }
88.8% { transform: skewX(-0.1953125deg) skewY(-0.1953125deg); }
}
@keyframes heartBeat {
0% { transform: scale(1); }
14% { transform: scale(1.3); }
28% { transform: scale(1); }
42% { transform: scale(1.3); }
70% { transform: scale(1); }
}
@keyframes backInDown {
0% {
transform: translateY(-1200px) scale(0.7);
opacity: 0.7;
}
80% {
transform: translateY(0px) scale(0.7);
opacity: 0.7;
}
100% {
transform: scale(1);
opacity: 1;
}
}
@keyframes backInLeft {
0% {
transform: translateX(-2000px) scale(0.7);
opacity: 0.7;
}
80% {
transform: translateX(0px) scale(0.7);
opacity: 0.7;
}
100% {
transform: scale(1);
opacity: 1;
}
}
@keyframes backInRight {
0% {
transform: translateX(2000px) scale(0.7);
opacity: 0.7;
}
80% {
transform: translateX(0px) scale(0.7);
opacity: 0.7;
}
100% {
transform: scale(1);
opacity: 1;
}
}
@keyframes backInUp {
0% {
transform: translateY(1200px) scale(0.7);
opacity: 0.7;
}
80% {
transform: translateY(0px) scale(0.7);
opacity: 0.7;
}
100% {
transform: scale(1);
opacity: 1;
}
}
@keyframes backOutDown {
0% {
transform: scale(1);
opacity: 1;
}
20% {
transform: translateY(0px) scale(0.7);
opacity: 0.7;
}
100% {
transform: translateY(700px) scale(0.7);
opacity: 0.7;
}
}
@keyframes backOutLeft {
0% {
transform: scale(1);
opacity: 1;
}
20% {
transform: translateX(0px) scale(0.7);
opacity: 0.7;
}
100% {
transform: translateX(-2000px) scale(0.7);
opacity: 0.7;
}
}
@keyframes backOutRight {
0% {
transform: scale(1);
opacity: 1;
}
20% {
transform: translateX(0px) scale(0.7);
opacity: 0.7;
}
100% {
transform: translateX(2000px) scale(0.7);
opacity: 0.7;
}
}
@keyframes backOutUp {
0% {
transform: scale(1);
opacity: 1;
}
20% {
transform: translateY(0px) scale(0.7);
opacity: 0.7;
}
100% {
transform: translateY(-700px) scale(0.7);
opacity: 0.7;
}
}
@keyframes bounceIn {
from, 20%, 40%, 60%, 80%, to {
animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}
0% {
opacity: 0;
transform: scale3d(0.3, 0.3, 0.3);
}
20% {
transform: scale3d(1.1, 1.1, 1.1);
}
40% {
transform: scale3d(0.9, 0.9, 0.9);
}
60% {
opacity: 1;
transform: scale3d(1.03, 1.03, 1.03);
}
80% {
transform: scale3d(0.97, 0.97, 0.97);
}
to {
opacity: 1;
transform: scale3d(1, 1, 1);
}
}
@keyframes bounceInDown {
from, 60%, 75%, 90%, to {
animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}
0% {
opacity: 0;
transform: translate3d(0, -3000px, 0) scaleY(3);
}
60% {
opacity: 1;
transform: translate3d(0, 25px, 0) scaleY(0.9);
}
75% {
transform: translate3d(0, -10px, 0) scaleY(0.95);
}
90% {
transform: translate3d(0, 5px, 0) scaleY(0.985);
}
to {
transform: translate3d(0, 0, 0);
}
}
@keyframes bounceInLeft {
from, 60%, 75%, 90%, to {
animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}
0% {
opacity: 0;
transform: translate3d(-3000px, 0, 0) scaleX(3);
}
60% {
opacity: 1;
transform: translate3d(25px, 0, 0) scaleX(1);
}
75% {
transform: translate3d(-10px, 0, 0) scaleX(0.98);
}
90% {
transform: translate3d(5px, 0, 0) scaleX(0.995);
}
to {
transform: translate3d(0, 0, 0);
}
}
@keyframes bounceInRight {
from, 60%, 75%, 90%, to {
animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}
from {
opacity: 0;
transform: translate3d(3000px, 0, 0) scaleX(3);
}
60% {
opacity: 1;
transform: translate3d(-25px, 0, 0) scaleX(1);
}
75% {
transform: translate3d(10px, 0, 0) scaleX(0.98);
}
90% {
transform: translate3d(-5px, 0, 0) scaleX(0.995);
}
to {
transform: translate3d(0, 0, 0);
}
}
@keyframes bounceInUp {
from, 60%, 75%, 90%, to {
animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}
from {
opacity: 0;
transform: translate3d(0, 3000px, 0) scaleY(5);
}
60% {
opacity: 1;
transform: translate3d(0, -20px, 0) scaleY(0.9);
}
75% {
transform: translate3d(0, 10px, 0) scaleY(0.95);
}
90% {
transform: translate3d(0, -5px, 0) scaleY(0.985);
}
to {
transform: translate3d(0, 0, 0);
}
}
@keyframes bounceOut {
20% {
transform: scale3d(0.9, 0.9, 0.9);
}
50%, 55% {
opacity: 1;
transform: scale3d(1.1, 1.1, 1.1);
}
to {
opacity: 0;
transform: scale3d(0.3, 0.3, 0.3);
}
}
@keyframes bounceOutDown {
20% {
transform: translate3d(0, 10px, 0) scaleY(0.985);
}
40%, 45% {
opacity: 1;
transform: translate3d(0, -20px, 0) scaleY(0.9);
}
to {
opacity: 0;
transform: translate3d(0, 2000px, 0) scaleY(3);
}
}
@keyframes bounceOutLeft {
20% {
opacity: 1;
transform: translate3d(20px, 0, 0) scaleX(0.9);
}
to {
opacity: 0;
transform: translate3d(-2000px, 0, 0) scaleX(2);
}
}
@keyframes bounceOutRight {
20% {
opacity: 1;
transform: translate3d(-20px, 0, 0) scaleX(0.9);
}
to {
opacity: 0;
transform: translate3d(2000px, 0, 0) scaleX(2);
}
}
@keyframes bounceOutUp {
20% {
transform: translate3d(0, -10px, 0) scaleY(0.985);
}
40%, 45% {
opacity: 1;
transform: translate3d(0, 20px, 0) scaleY(0.9);
}
to {
opacity: 0;
transform: translate3d(0, -2000px, 0) scaleY(3);
}
}
@keyframes fadeInDown {
from {
opacity: 0;
transform: translate3d(0, -100%, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInDownBig {
from {
opacity: 0;
transform: translate3d(0, -2000px, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInLeft {
from {
opacity: 0;
transform: translate3d(-100%, 0, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInLeftBig {
from {
opacity: 0;
transform: translate3d(-2000px, 0, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInRight {
from {
opacity: 0;
transform: translate3d(100%, 0, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInRightBig {
from {
opacity: 0;
transform: translate3d(2000px, 0, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInUp {
from {
opacity: 0;
transform: translate3d(0, 100%, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInUpBig {
from {
opacity: 0;
transform: translate3d(0, 2000px, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInTopLeft {
from {
opacity: 0;
transform: translate3d(-100%, -100%, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInTopRight {
from {
opacity: 0;
transform: translate3d(100%, -100%, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInBottomLeft {
from {
opacity: 0;
transform: translate3d(-100%, 100%, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeInBottomRight {
from {
opacity: 0;
transform: translate3d(100%, 100%, 0);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes fadeOutDown {
from {
opacity: 1;
}
to {
opacity: 0;
transform: translate3d(0, 100%, 0);
}
}
@keyframes fadeOutDownBig {
from {
opacity: 1;
}
to {
opacity: 0;
transform: translate3d(0, 2000px, 0);
}
}
@keyframes fadeOutLeft {
from {
opacity: 1;
}
to {
opacity: 0;
transform: translate3d(-100%, 0, 0);
}
}
@keyframes fadeOutLeftBig {
from {
opacity: 1;
}
to {
opacity: 0;
transform: translate3d(-2000px, 0, 0);
}
}
@keyframes fadeOutRight {
from {
opacity: 1;
}
to {
opacity: 0;
transform: translate3d(100%, 0, 0);
}
}
@keyframes fadeOutRightBig {
from {
opacity: 1;
}
to {
opacity: 0;
transform: translate3d(2000px, 0, 0);
}
}
@keyframes fadeOutUp {
from {
opacity: 1;
}
to {
opacity: 0;
transform: translate3d(0, -100%, 0);
}
}
@keyframes fadeOutUpBig {
from {
opacity: 1;
}
to {
opacity: 0;
transform: translate3d(0, -2000px, 0);
}
}
@keyframes fadeOutTopLeft {
from {
opacity: 1;
transform: translate3d(0, 0, 0);
}
to {
opacity: 0;
transform: translate3d(-100%, -100%, 0);
}
}
@keyframes fadeOutTopRight {
from {
opacity: 1;
transform: translate3d(0, 0, 0);
}
to {
opacity: 0;
transform: translate3d(100%, -100%, 0);
}
}
@keyframes fadeOutBottomRight {
from {
opacity: 1;
transform: translate3d(0, 0, 0);
}
to {
opacity: 0;
transform: translate3d(100%, 100%, 0);
}
}
@keyframes fadeOutBottomLeft {
from {
opacity: 1;
transform: translate3d(0, 0, 0);
}
to {
opacity: 0;
transform: translate3d(-100%, 100%, 0);
}
}
@keyframes flip {
from {
transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, -360deg);
animation-timing-function: ease-out;
}
40% {
transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -190deg);
animation-timing-function: ease-out;
}
50% {
transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -170deg);
animation-timing-function: ease-in;
}
80% {
transform: perspective(400px) scale3d(0.95, 0.95, 0.95) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg);
animation-timing-function: ease-in;
}
to {
transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg);
animation-timing-function: ease-in;
}
}
@keyframes flipInX {
from {
transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
opacity: 0;
animation-timing-function: ease-in;
}
40% {
transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
animation-timing-function: ease-in;
}
60% {
transform: perspective(400px) rotate3d(1, 0, 0, 10deg);
opacity: 1;
animation-timing-function: ease-in;
}
80% {
transform: perspective(400px) rotate3d(1, 0, 0, -5deg);
animation-timing-function: ease-in;
}
to {
transform: perspective(400px) rotate3d(1, 0, 0, 0deg);
animation-timing-function: ease-in;
}
}
@keyframes flipInY {
from {
transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
opacity: 0;
animation-timing-function: ease-in;
}
40% {
transform: perspective(400px) rotate3d(0, 1, 0, -20deg);
animation-timing-function: ease-in;
}
60% {
transform: perspective(400px) rotate3d(0, 1, 0, 10deg);
opacity: 1;
animation-timing-function: ease-in;
}
80% {
transform: perspective(400px) rotate3d(0, 1, 0, -5deg);
animation-timing-function: ease-in;
}
to {
transform: perspective(400px) rotate3d(0, 1, 0, 0deg);
animation-timing-function: ease-in;
}
}
@keyframes flipOutX {
from {
transform: perspective(400px);
}
30% {
transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
opacity: 1;
}
to {
transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
opacity: 0;
}
}
@keyframes flipOutY {
from {
transform: perspective(400px);
}
30% {
transform: perspective(400px) rotate3d(0, 1, 0, -15deg);
opacity: 1;
}
to {
transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
opacity: 0;
}
}
@keyframes lightSpeedIn {
from {
transform: translate3d(100%, 0, 0) skewX(-30deg);
opacity: 0;
}
60% {
transform: skewX(20deg);
opacity: 1;
}
80% {
transform: skewX(-5deg);
}
to {
transform: translate3d(0, 0, 0);
}
}
@keyframes lightSpeedOut {
from {
opacity: 1;
}
to {
transform: translate3d(100%, 0, 0) skewX(30deg);
opacity: 0;
}
}
@keyframes rotateIn {
from {
transform-origin: center;
transform: rotate3d(0, 0, 1, -200deg);
opacity: 0;
}
to {
transform-origin: center;
transform: translate3d(0, 0, 0);
opacity: 1;
}
}
@keyframes rotateInDownLeft {
from {
transform-origin: left bottom;
transform: rotate3d(0, 0, 1, -45deg);
opacity: 0;
}
to {
transform-origin: left bottom;
transform: translate3d(0, 0, 0);
opacity: 1;
}
}
@keyframes rotateInDownRight {
from {
transform-origin: right bottom;
transform: rotate3d(0, 0, 1, 45deg);
opacity: 0;
}
to {
transform-origin: right bottom;
transform: translate3d(0, 0, 0);
opacity: 1;
}
}
@keyframes rotateInUpLeft {
from {
transform-origin: left bottom;
transform: rotate3d(0, 0, 1, 45deg);
opacity: 0;
}
to {
transform-origin: left bottom;
transform: translate3d(0, 0, 0);
opacity: 1;
}
}
@keyframes rotateInUpRight {
from {
transform-origin: right bottom;
transform: rotate3d(0, 0, 1, -45deg);
opacity: 0;
}
to {
transform-origin: right bottom;
transform: translate3d(0, 0, 0);
opacity: 1;
}
}
@keyframes rotateOut {
from {
transform-origin: center;
opacity: 1;
}
to {
transform-origin: center;
transform: rotate3d(0, 0, 1, 200deg);
opacity: 0;
}
}
@keyframes rotateOutDownLeft {
from {
transform-origin: left bottom;
opacity: 1;
}
to {
transform-origin: left bottom;
transform: rotate3d(0, 0, 1, 45deg);
opacity: 0;
}
}
@keyframes rotateOutDownRight {
from {
transform-origin: right bottom;
opacity: 1;
}
to {
transform-origin: right bottom;
transform: rotate3d(0, 0, 1, -45deg);
opacity: 0;
}
}
@keyframes rotateOutUpLeft {
from {
transform-origin: left bottom;
opacity: 1;
}
to {
transform-origin: left bottom;
transform: rotate3d(0, 0, 1, -45deg);
opacity: 0;
}
}
@keyframes rotateOutUpRight {
from {
transform-origin: right bottom;
opacity: 1;
}
to {
transform-origin: right bottom;
transform: rotate3d(0, 0, 1, 45deg);
opacity: 0;
}
}
@keyframes hinge {
0% {
transform-origin: top left;
animation-timing-function: ease-in-out;
}
20%, 60% {
transform: rotate3d(0, 0, 1, 80deg);
transform-origin: top left;
animation-timing-function: ease-in-out;
}
40%, 80% {
transform: rotate3d(0, 0, 1, 60deg);
transform-origin: top left;
animation-timing-function: ease-in-out;
opacity: 1;
}
to {
transform: translate3d(0, 700px, 0);
opacity: 0;
}
}
@keyframes jackInTheBox {
from {
opacity: 0;
transform: scale(0.1) rotate(30deg);
transform-origin: center bottom;
}
50% {
transform: rotate(-10deg);
}
70% {
transform: rotate(3deg);
}
to {
opacity: 1;
transform: scale(1);
}
}
@keyframes rollIn {
from {
opacity: 0;
transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);
}
to {
opacity: 1;
transform: translate3d(0, 0, 0);
}
}
@keyframes rollOut {
from {
opacity: 1;
}
to {
opacity: 0;
transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);
}
}
@keyframes zoomInDown {
from {
opacity: 0;
transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0);
animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
60% {
opacity: 1;
transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
}
}
@keyframes zoomInLeft {
from {
opacity: 0;
transform: scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0);
animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
60% {
opacity: 1;
transform: scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0);
animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
}
}
@keyframes zoomInRight {
from {
opacity: 0;
transform: scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0);
animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
60% {
opacity: 1;
transform: scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0);
animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
}
}
@keyframes zoomInUp {
from {
opacity: 0;
transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0);
animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
60% {
opacity: 1;
transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
}
}
@keyframes zoomOutDown {
40% {
opacity: 1;
transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
100% {
opacity: 0;
transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0);
transform-origin: center bottom;
animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
}
}
@keyframes zoomOutLeft {
40% {
opacity: 1;
transform: scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0);
}
100% {
opacity: 0;
transform: scale3d(0.1, 0.1, 0.1) translate3d(-2000px, 0, 0);
transform-origin: left center;
}
}
@keyframes zoomOutRight {
40% {
opacity: 1;
transform: scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0);
}
100% {
opacity: 0;
transform: scale3d(0.1, 0.1, 0.1) translate3d(2000px, 0, 0);
transform-origin: right center;
}
}
@keyframes zoomOutUp {
40% {
opacity: 1;
transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
100% {
opacity: 0;
transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0);
transform-origin: center bottom;
animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
}
}
@keyframes slideInDown {
from {
transform: translate3d(0, -100%, 0);
visibility: visible;
}
to {
transform: translate3d(0, 0, 0);
}
}
@keyframes slideInLeft {
from {
transform: translate3d(-100%, 0, 0);
visibility: visible;
}
to {
transform: translate3d(0, 0, 0);
}
}
@keyframes slideInRight {
from {
transform: translate3d(100%, 0, 0);
visibility: visible;
}
to {
transform: translate3d(0, 0, 0);
}
}
@keyframes slideInUp {
from {
transform: translate3d(0, 100%, 0);
visibility: visible;
}
to {
transform: translate3d(0, 0, 0);
}
}
@keyframes slideOutDown {
from {
transform: translate3d(0, 0, 0);
}
to {
visibility: hidden;
transform: translate3d(0, 100%, 0);
}
}
@keyframes slideOutLeft {
from {
transform: translate3d(0, 0, 0);
}
to {
visibility: hidden;
transform: translate3d(-100%, 0, 0);
}
}
@keyframes slideOutRight {
from {
transform: translate3d(0, 0, 0);
}
to {
visibility: hidden;
transform: translate3d(100%, 0, 0);
}
}
@keyframes slideOutUp {
from {
transform: translate3d(0, 0, 0);
}
to {
visibility: hidden;
transform: translate3d(0, -100%, 0);
}
}
/* Animation Classes */
.animate-fadeIn { animation: fadeIn var(--transition); }
.animate-fadeOut { animation: fadeOut var(--transition); }
.animate-slideInUp { animation: slideInUp var(--transition); }
.animate-slideInDown { animation: slideInDown var(--transition); }
.animate-slideInLeft { animation: slideInLeft var(--transition); }
.animate-slideInRight { animation: slideInRight var(--transition); }
.animate-slideOutUp { animation: slideOutUp var(--transition); }
.animate-slideOutDown { animation: slideOutDown var(--transition); }
.animate-slideOutLeft { animation: slideOutLeft var(--transition); }
.animate-slideOutRight { animation: slideOutRight var(--transition); }
.animate-zoomIn { animation: zoomIn var(--transition); }
.animate-zoomOut { animation: zoomOut var(--transition); }
.animate-bounce { animation: bounce 1s infinite; }
.animate-flash { animation: flash 1s infinite; }
.animate-pulse { animation: pulse 2s infinite; }
.animate-rubberBand { animation: rubberBand 1s; }
.animate-shakeX { animation: shakeX 1s; }
.animate-shakeY { animation: shakeY 1s; }
.animate-headShake { animation: headShake 1s; }
.animate-swing { animation: swing 1s; }
.animate-tada { animation: tada 1s; }
.animate-wobble { animation: wobble 1s; }
.animate-jello { animation: jello 1s; }
.animate-heartBeat { animation: heartBeat 1s; }
.animate-backInDown { animation: backInDown 1s; }
.animate-backInLeft { animation: backInLeft 1s; }
.animate-backInRight { animation: backInRight 1s; }
.animate-backInUp { animation: backInUp 1s; }
.animate-backOutDown { animation: backOutDown 1s; }
.animate-backOutLeft { animation: backOutLeft 1s; }
.animate-backOutRight { animation: backOutRight 1s; }
.animate-backOutUp { animation: backOutUp 1s; }
.animate-bounceIn { animation: bounceIn 1s; }
.animate-bounceInDown { animation: bounceInDown 1s; }
.animate-bounceInLeft { animation: bounceInLeft 1s; }
.animate-bounceInRight { animation: bounceInRight 1s; }
.animate-bounceInUp { animation: bounceInUp 1s; }
.animate-bounceOut { animation: bounceOut 1s; }
.animate-bounceOutDown { animation: bounceOutDown 1s; }
.animate-bounceOutLeft { animation: bounceOutLeft 1s; }
.animate-bounceOutRight { animation: bounceOutRight 1s; }
.animate-bounceOutUp { animation: bounceOutUp 1s; }
.animate-fadeInDown { animation: fadeInDown 1s; }
.animate-fadeInDownBig { animation: fadeInDownBig 1s; }
.animate-fadeInLeft { animation: fadeInLeft 1s; }
.animate-fadeInLeftBig { animation: fadeInLeftBig 1s; }
.animate-fadeInRight { animation: fadeInRight 1s; }
.animate-fadeInRightBig { animation: fadeInRightBig 1s; }
.animate-fadeInUp { animation: fadeInUp 1s; }
.animate-fadeInUpBig { animation: fadeInUpBig 1s; }
.animate-fadeInTopLeft { animation: fadeInTopLeft 1s; }
.animate-fadeInTopRight { animation: fadeInTopRight 1s; }
.animate-fadeInBottomLeft { animation: fadeInBottomLeft 1s; }
.animate-fadeInBottomRight { animation: fadeInBottomRight 1s; }
.animate-fadeOutDown { animation: fadeOutDown 1s; }
.animate-fadeOutDownBig { animation: fadeOutDownBig 1s; }
.animate-fadeOutLeft { animation: fadeOutLeft 1s; }
.animate-fadeOutLeftBig { animation: fadeOutLeftBig 1s; }
.animate-fadeOutRight { animation: fadeOutRight 1s; }
.animate-fadeOutRightBig { animation: fadeOutRightBig 1s; }
.animate-fadeOutUp { animation: fadeOutUp 1s; }
.animate-fadeOutUpBig { animation: fadeOutUpBig 1s; }
.animate-fadeOutTopLeft { animation: fadeOutTopLeft 1s; }
.animate-fadeOutTopRight { animation: fadeOutTopRight 1s; }
.animate-fadeOutBottomRight { animation: fadeOutBottomRight 1s; }
.animate-fadeOutBottomLeft { animation: fadeOutBottomLeft 1s; }
.animate-flip { animation: flip 1s; }
.animate-flipInX { animation: flipInX 1s; }
.animate-flipInY { animation: flipInY 1s; }
.animate-flipOutX { animation: flipOutX 1s; }
.animate-flipOutY { animation: flipOutY 1s; }
.animate-lightSpeedIn { animation: lightSpeedIn 1s; }
.animate-lightSpeedOut { animation: lightSpeedOut 1s; }
.animate-rotateIn { animation: rotateIn 1s; }
.animate-rotateInDownLeft { animation: rotateInDownLeft 1s; }
.animate-rotateInDownRight { animation: rotateInDownRight 1s; }
.animate-rotateInUpLeft { animation: rotateInUpLeft 1s; }
.animate-rotateInUpRight { animation: rotateInUpRight 1s; }
.animate-rotateOut { animation: rotateOut 1s; }
.animate-rotateOutDownLeft { animation: rotateOutDownLeft 1s; }
.animate-rotateOutDownRight { animation: rotateOutDownRight 1s; }
.animate-rotateOutUpLeft { animation: rotateOutUpLeft 1s; }
.animate-rotateOutUpRight { animation: rotateOutUpRight 1s; }
.animate-hinge { animation: hinge 2s; }
.animate-jackInTheBox { animation: jackInTheBox 1s; }
.animate-rollIn { animation: rollIn 1s; }
.animate-rollOut { animation: rollOut 1s; }
.animate-zoomInDown { animation: zoomInDown 1s; }
.animate-zoomInLeft { animation: zoomInLeft 1s; }
.animate-zoomInRight { animation: zoomInRight 1s; }
.animate-zoomInUp { animation: zoomInUp 1s; }
.animate-zoomOutDown { animation: zoomOutDown 1s; }
.animate-zoomOutLeft { animation: zoomOutLeft 1s; }
.animate-zoomOutRight { animation: zoomOutRight 1s; }
.animate-zoomOutUp { animation: zoomOutUp 1s; }
.animate-slideInDown { animation: slideInDown 1s; }
.animate-slideInLeft { animation: slideInLeft 1s; }
.animate-slideInRight { animation: slideInRight 1s; }
.animate-slideInUp { animation: slideInUp 1s; }
.animate-slideOutDown { animation: slideOutDown 1s; }
.animate-slideOutLeft { animation: slideOutLeft 1s; }
.animate-slideOutRight { animation: slideOutRight 1s; }
.animate-slideOutUp { animation: slideOutUp 1s; }
.animate-infinite {
animation-iteration-count: infinite;
}
.animate-delay-1s {
animation-delay: 1s;
}
.animate-delay-2s {
animation-delay: 2s;
}
.animate-delay-3s {
animation-delay: 3s;
}
.animate-delay-4s {
animation-delay: 4s;
}
.animate-delay-5s {
animation-delay: 5s;
}
.animate-fast {
animation-duration: 0.5s;
}
.animate-faster {
animation-duration: 0.3s;
}
.animate-slow {
animation-duration: 2s;
}
.animate-slower {
animation-duration: 3s;
}
/* ===== MODERN UTILS (v3.4 additions: container queries, color-mix, :has()) ===== */
.aspect-square { aspect-ratio: 1 / 1; }
.aspect-video { aspect-ratio: 16 / 9; }
.snap-x { scroll-snap-type: x mandatory; }
.snap-y { scroll-snap-type: y mandatory; }
.container-query { container-type: inline-size; }
@container (min-width: 400px) { .cq-text-lg { font-size: 1.25rem; } }
@container (min-width: 600px) { .cq-grid-cols-2 { grid-template-columns: repeat(2, 1fr); } }
:has(> .selected) { background-color: var(--primary-container); }
.bg-mix-primary { background-color: color-mix(in srgb, var(--primary) 50%, var(--background)); }
.text-mix-error { color: color-mix(in srgb, var(--error) 70%, black); }
.subgrid { grid-template-columns: subgrid; }
/* ===== ACCESSIBILITY ===== */
.sr-only {
position: absolute;
width: 1px;
height: 1px;
padding: 0;
margin: -1px;
overflow: hidden;
clip: rect(0, 0, 0, 0);
white-space: nowrap;
border-width: 0;
}
.not-sr-only {
position: static;
width: auto;
height: auto;
padding: 0;
margin: 0;
overflow: visible;
clip: auto;
white-space: normal;
}
/* ===== HOVER, FOCUS, ACTIVE STATES ===== */
.hover:bg-primary:hover { background-color: var(--primary); }
.hover:text-white:hover { color: #fff; }
.hover:shadow-lg:hover { box-shadow: var(--shadow-lg); }
.focus:outline-none:focus { outline: none; }
.active:bg-secondary:active { background-color: var(--secondary); }
/* ===== RESPONSIVE UTILS ===== /
@media (min-width: 640px) {
.sm:flex { display: flex; }
.sm:hidden { display: none; }
.sm:text-lg { font-size: 1.125rem; }
/ Add more sm: prefixes as needed */
}
@media (min-width: 768px) {
.md:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
.md:p-6 { padding: calc(var(--spacing-unit) * 6); }
/* Add more md: prefixes as needed */
}
@media (min-width: 1024px) {
.lg:w-1/2 { width: 50%; }
.lg:text-2xl { font-size: 1.5rem; }
/* Add more lg: prefixes as needed */
}
@media (min-width: 1280px) {
.xl:max-w-6xl { max-width: 72rem; }
/* Add more xl: prefixes as needed */
}
@media (min-width: 1536px) {
.2xl:gap-12 { gap: calc(var(--spacing-unit) * 12); }
/* Add more 2xl: prefixes as needed */
}
}
/* ===== FONT AWESOME ICONS ===== */
.fa {
display: inline-block;
font-style: normal;
font-variant: normal;
text-rendering: auto;
font: normal normal normal 14px/1 FontAwesome;
font-size: inherit;
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
}
.fa-lg { font-size: 1.33333em; line-height: .75em; vertical-align: -.0667em; }
.fa-xs { font-size: .75em; }
.fa-sm { font-size: .875em; }
.fa-1x { font-size: 1em; }
.fa-2x { font-size: 2em; }
.fa-3x { font-size: 3em; }
.fa-4x { font-size: 4em; }
.fa-5x { font-size: 5em; }
.fa-6x { font-size: 6em; }
.fa-7x { font-size: 7em; }
.fa-8x { font-size: 8em; }
.fa-9x { font-size: 9em; }
.fa-10x { font-size: 10em; }
.fa-fw { text-align: center; width: 1.25em; }
.fa-ul { list-style-type: none; margin-left: 2.5em; padding-left: 0; }
.fa-ul > li { position: relative; }
.fa-li { left: -2em; position: absolute; text-align: center; width: 2em; line-height: inherit; }
.fa-border { border: solid 0.08em #eee; border-radius: .1em; padding: .2em .25em .15em; }
.fa-pull-left { float: left; }
.fa-pull-right { float: right; }
.fa-spin { animation: fa-spin 2s infinite linear; }
.fa-spin-reverse { animation: fa-spin 2s infinite linear reverse; }
.fa-pulse { animation: fa-spin 1s infinite steps(8); }
@keyframes fa-spin {
0% { transform: rotate(0deg); }
100% { transform: rotate(360deg); }
}
/* Placeholders for 10 common icons (extendable) */
.fa-home:before { content: "\f015"; }
.fa-user:before { content: "\f007"; }
.fa-search:before { content: "\f002"; }
.fa-heart:before { content: "\f004"; }
.fa-star:before { content: "\f005"; }
.fa-check:before { content: "\f00c"; }
.fa-times:before { content: "\f00d"; }
.fa-plus:before { content: "\f067"; }
.fa-minus:before { content: "\f068"; }
.fa-arrow-right:before { content: "\f061"; }
/* ===== COMPONENTS ===== /
@layer components {
/ Buttons */
.btn {
display: inline-flex;
align-items: center;
justify-content: center;
padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 4);
border-radius: var(--border-radius);
font-weight: 500;
transition: var(--transition);
cursor: pointer;
}
.btn-primary { background: var(--primary); color: var(--on-primary); }
.btn-primary:hover { background: color-mix(in srgb, var(--primary) 90%, black); }
.btn-secondary { background: var(--secondary); color: var(--on-secondary); }
.btn-secondary:hover { background: color-mix(in srgb, var(--secondary) 90%, black); }
.btn-outlined { background: transparent; border: 1px solid var(--outline); color: var(--primary); }
.btn-outlined:hover { background: var(--primary-container); }
.btn-text { background: transparent; color: var(--primary); }
.btn-text:hover { text-decoration: underline; }
.btn-disabled { opacity: 0.5; cursor: not-allowed; }
/* Cards */
.card {
background: var(--surface);
border-radius: calc(var(--border-radius) * 2);
padding: calc(var(--spacing-unit) * 4);
box-shadow: var(--shadow-sm);
transition: var(--transition);
}
.card:hover { box-shadow: var(--shadow-md); }
.card-header { padding-bottom: calc(var(--spacing-unit) * 2); border-bottom: 1px solid var(--outline); }
.card-footer { padding-top: calc(var(--spacing-unit) * 2); border-top: 1px solid var(--outline); }
.card-title { font-size: 1.25rem; font-weight: 500; }
/* Navigation */
.app-bar {
background: var(--surface);
box-shadow: var(--shadow-sm);
padding: calc(var(--spacing-unit) * 2);
display: flex;
align-items: center;
justify-content: space-between;
}
.nav-item { padding: calc(var(--spacing-unit) * 2); color: var(--on-surface); }
.nav-item:hover { background: var(--surface-variant); }
/* Modals */
.modal {
position: fixed;
z-index: 100;
left: 0;
top: 0;
width: 100%;
height: 100%;
background: rgba(0,0,0,0.4);
display: flex;
align-items: center;
justify-content: center;
opacity: 0;
visibility: hidden;
transition: var(--transition);
}
.modal.active { opacity: 1; visibility: visible; }
.modal-content {
background: var(--surface);
padding: calc(var(--spacing-unit) * 6);
border-radius: calc(var(--border-radius) * 2);
box-shadow: var(--shadow-lg);
max-width: 80%;
transform: scale(0.9);
transition: var(--transition);
}
.modal.active .modal-content { transform: scale(1); }
/* Forms */
.text-field {
position: relative;
margin-bottom: calc(var(--spacing-unit) * 4);
}
.input {
width: 100%;
padding: calc(var(--spacing-unit) * 4) 0;
border-bottom: 1px solid var(--outline);
transition: var(--transition);
font-size: 1rem;
}
.input:focus { border-bottom: 2px solid var(--primary); }
.label { position: absolute; top: calc(var(--spacing-unit) * 2); left: 0; transition: var(--transition); }
.input:focus + .label, .input:not(:placeholder-shown) + .label { top: -1rem; font-size: 0.875rem; color: var(--primary); }
/* Tables */
.table {
width: 100%;
border-collapse: collapse;
}
.table th, .table td {
padding: calc(var(--spacing-unit) * 3);
text-align: left;
border-bottom: 1px solid var(--outline);
}
.table th { background: var(--surface-variant); font-weight: 500; }
.table-striped tbody tr:nth-child(even) { background: var(--surface-variant); }
/* Alerts/Snackbar */
.snackbar {
position: fixed;
bottom: calc(var(--spacing-unit) * 4);
left: 50%;
transform: translateX(-50%);
background: var(--inverse-surface);
color: var(--inverse-on-surface);
padding: calc(var(--spacing-unit) * 4);
border-radius: var(--border-radius);
box-shadow: var(--shadow-md);
min-width: 288px;
max-width: 568px;
display: flex;
align-items: center;
justify-content: space-between;
opacity: 0;
transition: var(--transition);
}
.snackbar.active { opacity: 1; }
/* Additional Components (v3.4 expansions: chips, FAB, tabs, accordions, etc.) */
.chip {
display: inline-flex;
align-items: center;
padding: calc(var(--spacing-unit) * 1) calc(var(--spacing-unit) * 3);
background: var(--surface-variant);
border-radius: 9999px;
font-size: 0.875rem;
}
.chip-close { margin-left: calc(var(--spacing-unit) * 2); cursor: pointer; }
.fab {
position: fixed;
bottom: calc(var(--spacing-unit) * 4);
right: calc(var(--spacing-unit) * 4);
background: var(--primary);
color: var(--on-primary);
border-radius: 50%;
width: 56px;
height: 56px;
display: flex;
align-items: center;
justify-content: center;
box-shadow: var(--shadow-md);
transition: var(--transition);
}
.fab:hover { box-shadow: var(--shadow-lg); }
.tab-bar { display: flex; border-bottom: 1px solid var(--outline); }
.tab { padding: calc(var(--spacing-unit) * 3); cursor: pointer; }
.tab.active { border-bottom: 2px solid var(--primary); color: var(--primary); }
.accordion { border: 1px solid var(--outline); border-radius: var(--border-radius); }
.accordion-header { padding: calc(var(--spacing-unit) * 3); cursor: pointer; display: flex; justify-content: space-between; }
.accordion-content { padding: 0 calc(var(--spacing-unit) * 3); max-height: 0; overflow: hidden; transition: max-height 0.3s ease; }
.accordion.active .accordion-content { max-height: 500px; /* Adjust as needed */ }
.breadcrumb { display: flex; list-style: none; }
.breadcrumb li + li:before { content: "/"; padding: 0 calc(var(--spacing-unit) * 2); color: var(--on-surface-variant); }
.pagination { display: flex; justify-content: center; }
.page-item { padding: calc(var(--spacing-unit) * 2); cursor: pointer; }
.page-item.active { background: var(--primary); color: var(--on-primary); border-radius: var(--border-radius); }
.dropdown { position: relative; }
.dropdown-content { position: absolute; background: var(--surface); box-shadow: var(--shadow-md); display: none; }
.dropdown:hover .dropdown-content { display: block; }
.spinner { border: 4px solid var(--surface-variant); border-top: 4px solid var(--primary); border-radius: 50%; width: 36px; height: 36px; animation: fa-spin 1s linear infinite; }
.skeleton { background: var(--surface-variant); animation: pulse 1.5s infinite; }
.avatar { border-radius: 50%; width: 40px; height: 40px; object-fit: cover; }
.tag { background: var(--primary-container); color: var(--on-primary-container); padding: calc(var(--spacing-unit) * 1) calc(var(--spacing-unit) * 2); border-radius: var(--border-radius); font-size: 0.875rem; }
.toggle { position: relative; display: inline-block; width: 40px; height: 20px; }
.toggle input { opacity: 0; width: 0; height: 0; }
.slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background: var(--outline); transition: var(--transition); border-radius: 9999px; }
.slider:before { position: absolute; content: ""; height: 16px; width: 16px; left: 2px; bottom: 2px; background: white; transition: var(--transition); border-radius: 50%; }
input:checked + .slider { background: var(--primary); }
input:checked + .slider:before { transform: translateX(20px); }
.nav-rail { position: fixed; left: 0; top: 0; height: 100%; width: 80px; background: var(--surface); display: flex; flex-direction: column; align-items: center; padding-top: calc(var(--spacing-unit) * 4); }
.footer { background: var(--surface); padding: calc(var(--spacing-unit) * 8) 0; text-align: center; }
.section { padding: calc(var(--spacing-unit) * 16) 0; }
.icon { font-size: 1.5rem; color: var(--on-surface); }
.dashboard { display: grid; grid-template-columns: 1fr 3fr; gap: calc(var(--spacing-unit) * 4); }
.chart { width: 100%; height: 300px; /* Placeholder for chart libraries */ }
.wallet { background: var(--tertiary-container); padding: calc(var(--spacing-unit) * 4); border-radius: var(--border-radius); }
/* Enterprise Additions: AI-friendly classes (v3.4) */
.ai-grid { display: grid; grid-template-areas: "header" "main" "footer"; grid-template-rows: auto 1fr auto; }
.ai-container { max-width: 1280px; margin: 0 auto; padding: 0 calc(var(--spacing-unit) * 4); }
.ai-flex-center { display: flex; align-items: center; justify-content: center; }
}
/* Placeholders for Custom Imports /
/ @import url('/custom-fonts.css'); /
/ @import url('/extra-components.css'); */
/* Dedication: Dedicated to יהוה /
/ Wishing all users, developers, and designers immense joy in using Rex CSS v3.4.0! */4.7sHow can Grok help?

